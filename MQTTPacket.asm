; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspaces\newagent2\Paho\org.eclipse.paho.mqtt.c\src\MQTTPacket.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_MQTTPacket_header_only
PUBLIC	_MQTTPacket_ack
PUBLIC	_MQTTPacket_publish
PUBLIC	_MQTTClient_packet_names
PUBLIC	_new_packets
EXTRN	_MQTTPacket_suback:PROC
EXTRN	_MQTTPacket_connack:PROC
_DATA	SEGMENT
COMM	_Log_levels:DWORD
_DATA	ENDS
_BSS	SEGMENT
?header@?1??MQTTPacket_header_only@@9@9 DB 01H DUP (?)	; `MQTTPacket_header_only'::`2'::header
_BSS	ENDS
_DATA	SEGMENT
$SG84419 DB	'RESERVED', 00H
	ORG $+3
$SG84420 DB	'CONNECT', 00H
$SG84421 DB	'CONNACK', 00H
$SG84422 DB	'PUBLISH', 00H
$SG84423 DB	'PUBACK', 00H
	ORG $+1
$SG84424 DB	'PUBREC', 00H
	ORG $+1
$SG84425 DB	'PUBREL', 00H
	ORG $+1
$SG84426 DB	'PUBCOMP', 00H
$SG84427 DB	'SUBSCRIBE', 00H
	ORG $+2
$SG84428 DB	'SUBACK', 00H
	ORG $+1
$SG84429 DB	'UNSUBSCRIBE', 00H
$SG84430 DB	'UNSUBACK', 00H
	ORG $+3
$SG84431 DB	'PINGREQ', 00H
$SG84432 DB	'PINGRESP', 00H
	ORG $+3
$SG84433 DB	'DISCONNECT', 00H
	ORG $+1
_packet_names DD FLAT:$SG84419
	DD	FLAT:$SG84420
	DD	FLAT:$SG84421
	DD	FLAT:$SG84422
	DD	FLAT:$SG84423
	DD	FLAT:$SG84424
	DD	FLAT:$SG84425
	DD	FLAT:$SG84426
	DD	FLAT:$SG84427
	DD	FLAT:$SG84428
	DD	FLAT:$SG84429
	DD	FLAT:$SG84430
	DD	FLAT:$SG84431
	DD	FLAT:$SG84432
	DD	FLAT:$SG84433
_MQTTClient_packet_names DD FLAT:_packet_names
$SG84438 DB	'UNKNOWN', 00H
_new_packets DD	00H
	DD	00H
	DD	FLAT:_MQTTPacket_connack
	DD	FLAT:_MQTTPacket_publish
	DD	FLAT:_MQTTPacket_ack
	DD	FLAT:_MQTTPacket_ack
	DD	FLAT:_MQTTPacket_ack
	DD	FLAT:_MQTTPacket_ack
	DD	00H
	DD	FLAT:_MQTTPacket_suback
	DD	00H
	DD	FLAT:_MQTTPacket_ack
	DD	FLAT:_MQTTPacket_header_only
	DD	FLAT:_MQTTPacket_header_only
	DD	FLAT:_MQTTPacket_header_only
$SG84459 DB	'MQTTPacket_Factory', 00H
	ORG $+1
$SG84478 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84480 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84482 DB	'MQTTPacket_Factory', 00H
	ORG $+1
$SG84497 DB	'MQTTPacket_send', 00H
$SG84498 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84504 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84505 DB	'MQTTPacket_send', 00H
$SG84524 DB	'MQTTPacket_sends', 00H
	ORG $+3
$SG84525 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84534 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84535 DB	'MQTTPacket_sends', 00H
	ORG $+3
$SG84542 DB	'MQTTPacket_encode', 00H
	ORG $+2
$SG84548 DB	'MQTTPacket_encode', 00H
	ORG $+2
$SG84558 DB	'MQTTPacket_decode', 00H
	ORG $+2
$SG84565 DB	'MQTTPacket_decode', 00H
	ORG $+2
$SG84583 DB	'readUTFlen', 00H
	ORG $+1
$SG84586 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84588 DB	'readUTFlen', 00H
	ORG $+1
$SG84633 DB	'MQTTPacket_send_disconnect', 00H
	ORG $+1
$SG84636 DB	'MQTTPacket_send_disconnect', 00H
	ORG $+1
$SG84646 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84649 DB	'MQTTPacket_publish', 00H
	ORG $+1
$SG84652 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84658 DB	'MQTTPacket_publish', 00H
	ORG $+1
$SG84662 DB	'MQTTPacket_freePublish', 00H
	ORG $+1
$SG84665 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84666 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84668 DB	'MQTTPacket_freePublish', 00H
	ORG $+1
$SG84682 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84684 DB	'MQTTPacket_send_ack', 00H
$SG84687 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84688 DB	'MQTTPacket_send_ack', 00H
$SG84697 DB	'MQTTPacket_send_puback', 00H
	ORG $+1
$SG84699 DB	'MQTTPacket_send_puback', 00H
	ORG $+1
$SG84703 DB	'MQTTPacket_freeSuback', 00H
	ORG $+2
$SG84706 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84708 DB	'MQTTPacket_freeSuback', 00H
	ORG $+2
$SG84717 DB	'MQTTPacket_send_pubrec', 00H
	ORG $+1
$SG84719 DB	'MQTTPacket_send_pubrec', 00H
	ORG $+1
$SG84730 DB	'MQTTPacket_send_pubrel', 00H
	ORG $+1
$SG84732 DB	'MQTTPacket_send_pubrel', 00H
	ORG $+1
$SG84741 DB	'MQTTPacket_send_pubcomp', 00H
$SG84743 DB	'MQTTPacket_send_pubcomp', 00H
$SG84753 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84755 DB	'MQTTPacket_ack', 00H
	ORG $+1
$SG84757 DB	'MQTTPacket_ack', 00H
	ORG $+1
$SG84774 DB	'MQTTPacket_send_publish', 00H
$SG84775 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84778 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84784 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84791 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84796 DB	'MQTTPacket_send_publish', 00H
$SG84800 DB	'MQTTPacket_free_packet', 00H
	ORG $+1
$SG84804 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPacket.c', 00H
	ORG $+3
$SG84806 DB	'MQTTPacket_free_packet', 00H
_DATA	ENDS
PUBLIC	_MQTTPacket_name
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = -4						; size = 4
_ptype$ = 8						; size = 4
_MQTTPacket_name PROC
; File c:\workspaces\newagent2\paho\org.eclipse.paho.mqtt.c\src\mqttpacket.c
; Line 62
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 63
	cmp	DWORD PTR _ptype$[ebp], 0
	jl	SHORT $LN3@MQTTPacket
	cmp	DWORD PTR _ptype$[ebp], 14		; 0000000eH
	jg	SHORT $LN3@MQTTPacket
	mov	eax, DWORD PTR _ptype$[ebp]
	mov	ecx, DWORD PTR _packet_names[eax*4]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN4@MQTTPacket
$LN3@MQTTPacket:
	mov	DWORD PTR tv68[ebp], OFFSET $SG84438
$LN4@MQTTPacket:
	mov	eax, DWORD PTR tv68[ebp]
; Line 64
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_name ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_encode
PUBLIC	_MQTTPacket_decode
PUBLIC	_MQTTPacket_Factory
EXTRN	_StackTrace_exit:PROC
EXTRN	_myfree:PROC
EXTRN	_MQTTPersistence_put:PROC
EXTRN	_mymalloc:PROC
EXTRN	_Log:PROC
EXTRN	_Socket_getdata:PROC
EXTRN	_Socket_getch:PROC
EXTRN	_StackTrace_entry:PROC
_BSS	SEGMENT
	ALIGN	4

?header@?1??MQTTPacket_Factory@@9@9 DD 01H DUP (?)	; `MQTTPacket_Factory'::`2'::header
; Function compile flags: /Odtp
_BSS	ENDS
_TEXT	SEGMENT
_buf$84477 = -32					; size = 4
_buf0len$84476 = -28					; size = 4
_ptype$ = -24						; size = 4
_data$ = -20						; size = 4
_remaining_length$ = -16				; size = 4
_actual_len$ = -12					; size = 4
_remaining_length_new$ = -8				; size = 4
_pack$ = -4						; size = 4
_net$ = 8						; size = 4
_error$ = 12						; size = 4
_MQTTPacket_Factory PROC
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 97
	mov	DWORD PTR _data$[ebp], 0
; Line 101
	mov	DWORD PTR _pack$[ebp], 0
; Line 102
	mov	DWORD PTR _actual_len$[ebp], 0
; Line 104
	push	3
	push	104					; 00000068H
	push	OFFSET $SG84459
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 105
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax], -1
; Line 111
	push	OFFSET ?header@?1??MQTTPacket_Factory@@9@9
	mov	ecx, DWORD PTR _net$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Socket_getch
	add	esp, 8
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 113
	mov	edx, DWORD PTR _error$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN12@MQTTPacket@2
; Line 114
	jmp	$exit$84461
$LN12@MQTTPacket@2:
; Line 117
	lea	eax, DWORD PTR _remaining_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _net$[ebp]
	push	ecx
	call	_MQTTPacket_decode
	add	esp, 8
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _error$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN11@MQTTPacket@2
; Line 118
	jmp	$exit$84461
$LN11@MQTTPacket@2:
; Line 125
	lea	ecx, DWORD PTR _actual_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _remaining_length$[ebp]
	push	edx
	mov	eax, DWORD PTR _net$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Socket_getdata
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _data$[ebp], eax
; Line 127
	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN10@MQTTPacket@2
; Line 129
	mov	edx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx], -1
; Line 130
	jmp	$exit$84461
$LN10@MQTTPacket@2:
; Line 133
	mov	eax, DWORD PTR _actual_len$[ebp]
	cmp	eax, DWORD PTR _remaining_length$[ebp]
	je	SHORT $LN9@MQTTPacket@2
; Line 134
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], -22			; ffffffeaH
; Line 135
	jmp	$LN8@MQTTPacket@2
$LN9@MQTTPacket@2:
; Line 137
	mov	edx, DWORD PTR ?header@?1??MQTTPacket_Factory@@9@9
	shr	edx, 4
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _ptype$[ebp], edx
; Line 138
	cmp	DWORD PTR _ptype$[ebp], 1
	jl	SHORT $LN6@MQTTPacket@2
	cmp	DWORD PTR _ptype$[ebp], 14		; 0000000eH
	jg	SHORT $LN6@MQTTPacket@2
	mov	eax, DWORD PTR _ptype$[ebp]
	cmp	DWORD PTR _new_packets[eax*4], 0
	jne	SHORT $LN7@MQTTPacket@2
$LN6@MQTTPacket@2:
; Line 139
	mov	ecx, DWORD PTR _ptype$[ebp]
	push	ecx
	push	0
	push	2
	push	3
	call	_Log
	add	esp, 16					; 00000010H
; Line 140
	jmp	$LN8@MQTTPacket@2
$LN7@MQTTPacket@2:
; Line 142
	mov	edx, DWORD PTR _remaining_length$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	movzx	ecx, BYTE PTR ?header@?1??MQTTPacket_Factory@@9@9
	push	ecx
	mov	edx, DWORD PTR _ptype$[ebp]
	mov	eax, DWORD PTR _new_packets[edx*4]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pack$[ebp], eax
	cmp	DWORD PTR _pack$[ebp], 0
	jne	SHORT $LN4@MQTTPacket@2
; Line 143
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], -4			; fffffffcH
	jmp	$LN8@MQTTPacket@2
$LN4@MQTTPacket@2:
; Line 145
	mov	edx, DWORD PTR ?header@?1??MQTTPacket_Factory@@9@9
	shr	edx, 4
	and	edx, 15					; 0000000fH
	cmp	edx, 3
	jne	$LN8@MQTTPacket@2
	mov	eax, DWORD PTR ?header@?1??MQTTPacket_Factory@@9@9
	shr	eax, 1
	and	eax, 3
	cmp	eax, 2
	jne	$LN8@MQTTPacket@2
; Line 148
	push	10					; 0000000aH
	push	148					; 00000094H
	push	OFFSET $SG84478
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$84477[ebp], eax
; Line 149
	mov	ecx, DWORD PTR _buf$84477[ebp]
	mov	dl, BYTE PTR ?header@?1??MQTTPacket_Factory@@9@9
	mov	BYTE PTR [ecx], dl
; Line 150
	mov	eax, DWORD PTR _remaining_length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$84477[ebp]
	add	ecx, 1
	push	ecx
	call	_MQTTPacket_encode
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _buf0len$84476[ebp], eax
; Line 151
	mov	edx, DWORD PTR _remaining_length$[ebp]
	mov	DWORD PTR _remaining_length_new$[ebp], edx
; Line 153
	push	1
	mov	eax, DWORD PTR _pack$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR ?header@?1??MQTTPacket_Factory@@9@9
	shr	edx, 4
	and	edx, 15					; 0000000fH
	push	edx
	lea	eax, DWORD PTR _remaining_length_new$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _buf0len$84476[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$84477[ebp]
	push	eax
	mov	ecx, DWORD PTR _net$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_MQTTPersistence_put
	add	esp, 36					; 00000024H
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 154
	mov	edx, DWORD PTR _buf$84477[ebp]
	push	edx
	push	154					; 0000009aH
	push	OFFSET $SG84480
	call	_myfree
	add	esp, 12					; 0000000cH
$LN8@MQTTPacket@2:
; Line 159
	cmp	DWORD PTR _pack$[ebp], 0
	je	SHORT $exit$84461
; Line 160
	mov	eax, DWORD PTR _net$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	_time
	add	esp, 4
$exit$84461:
; Line 162
	push	3
	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	162					; 000000a2H
	push	OFFSET $SG84482
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 163
	mov	eax, DWORD PTR _pack$[ebp]
; Line 164
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_Factory ENDP
_TEXT	ENDS
EXTRN	__imp___time64:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\time.inl
; Line 132
	push	ebp
	mov	ebp, esp
; Line 133
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4
; Line 134
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
PUBLIC	_readInt
PUBLIC	_MQTTPacket_send
EXTRN	_Socket_putdatas:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_msgId$84501 = -20					; size = 4
_ptraux$84500 = -16					; size = 4
_buf$ = -12						; size = 4
_rc$ = -8						; size = 4
_buf0len$ = -4						; size = 4
_net$ = 8						; size = 4
_header$ = 12						; size = 4
_buffer$ = 16						; size = 4
_buflen$ = 20						; size = 4
_free$ = 24						; size = 4
_MQTTPacket_send PROC
; File c:\workspaces\newagent2\paho\org.eclipse.paho.mqtt.c\src\mqttpacket.c
; Line 176
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
; Line 180
	push	3
	push	180					; 000000b4H
	push	OFFSET $SG84497
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 181
	push	10					; 0000000aH
	push	181					; 000000b5H
	push	OFFSET $SG84498
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$[ebp], eax
; Line 182
	mov	eax, DWORD PTR _buf$[ebp]
	mov	cl, BYTE PTR _header$[ebp]
	mov	BYTE PTR [eax], cl
; Line 183
	mov	edx, DWORD PTR _buflen$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 1
	push	eax
	call	_MQTTPacket_encode
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _buf0len$[ebp], eax
; Line 185
	mov	ecx, DWORD PTR _header$[ebp]
	shr	ecx, 4
	and	ecx, 15					; 0000000fH
	cmp	ecx, 6
	jne	SHORT $LN3@MQTTPacket@3
; Line 187
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _ptraux$84500[ebp], edx
; Line 188
	lea	eax, DWORD PTR _ptraux$84500[ebp]
	push	eax
	call	_readInt
	add	esp, 4
	mov	DWORD PTR _msgId$84501[ebp], eax
; Line 190
	push	0
	mov	ecx, DWORD PTR _msgId$84501[ebp]
	push	ecx
	mov	edx, DWORD PTR _header$[ebp]
	shr	edx, 4
	and	edx, 15					; 0000000fH
	push	edx
	lea	eax, DWORD PTR _buflen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _buf0len$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _net$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_MQTTPersistence_put
	add	esp, 36					; 00000024H
	mov	DWORD PTR _rc$[ebp], eax
$LN3@MQTTPacket@3:
; Line 199
	lea	eax, DWORD PTR _free$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buflen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _buf0len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _net$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Socket_putdatas
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _rc$[ebp], eax
; Line 201
	cmp	DWORD PTR _rc$[ebp], 0
	jne	SHORT $LN2@MQTTPacket@3
; Line 202
	mov	ecx, DWORD PTR _net$[ebp]
	add	ecx, 8
	push	ecx
	call	_time
	add	esp, 4
$LN2@MQTTPacket@3:
; Line 204
	cmp	DWORD PTR _rc$[ebp], -22		; ffffffeaH
	je	SHORT $LN1@MQTTPacket@3
; Line 205
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	push	205					; 000000cdH
	push	OFFSET $SG84504
	call	_myfree
	add	esp, 12					; 0000000cH
$LN1@MQTTPacket@3:
; Line 207
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	207					; 000000cfH
	push	OFFSET $SG84505
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 208
	mov	eax, DWORD PTR _rc$[ebp]
; Line 209
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_send ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_sends
; Function compile flags: /Odtp
_TEXT	SEGMENT
_msgId$84531 = -28					; size = 4
_ptraux$84530 = -24					; size = 4
_buf$ = -20						; size = 4
_total$ = -16						; size = 4
_i$ = -12						; size = 4
_rc$ = -8						; size = 4
_buf0len$ = -4						; size = 4
_net$ = 8						; size = 4
_header$ = 12						; size = 4
_count$ = 16						; size = 4
_buffers$ = 20						; size = 4
_buflens$ = 24						; size = 4
_frees$ = 28						; size = 4
_MQTTPacket_sends PROC
; Line 222
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 223
	mov	DWORD PTR _total$[ebp], 0
; Line 226
	push	3
	push	226					; 000000e2H
	push	OFFSET $SG84524
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 227
	push	10					; 0000000aH
	push	227					; 000000e3H
	push	OFFSET $SG84525
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$[ebp], eax
; Line 228
	mov	eax, DWORD PTR _buf$[ebp]
	mov	cl, BYTE PTR _header$[ebp]
	mov	BYTE PTR [eax], cl
; Line 229
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@MQTTPacket@4
$LN5@MQTTPacket@4:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@MQTTPacket@4:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN4@MQTTPacket@4
; Line 230
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _buflens$[ebp]
	mov	eax, DWORD PTR _total$[ebp]
	add	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _total$[ebp], eax
	jmp	SHORT $LN5@MQTTPacket@4
$LN4@MQTTPacket@4:
; Line 231
	mov	ecx, DWORD PTR _total$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, 1
	push	edx
	call	_MQTTPacket_encode
	add	esp, 8
	add	eax, 1
	mov	DWORD PTR _buf0len$[ebp], eax
; Line 233
	mov	eax, DWORD PTR _header$[ebp]
	shr	eax, 4
	and	eax, 15					; 0000000fH
	cmp	eax, 3
	jne	SHORT $LN3@MQTTPacket@4
	mov	ecx, DWORD PTR _header$[ebp]
	shr	ecx, 1
	and	ecx, 3
	je	SHORT $LN3@MQTTPacket@4
; Line 235
	mov	edx, DWORD PTR _buffers$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _ptraux$84530[ebp], eax
; Line 236
	lea	ecx, DWORD PTR _ptraux$84530[ebp]
	push	ecx
	call	_readInt
	add	esp, 4
	mov	DWORD PTR _msgId$84531[ebp], eax
; Line 238
	push	0
	mov	edx, DWORD PTR _msgId$84531[ebp]
	push	edx
	mov	eax, DWORD PTR _header$[ebp]
	shr	eax, 4
	and	eax, 15					; 0000000fH
	push	eax
	mov	ecx, DWORD PTR _buflens$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffers$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf0len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _net$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_MQTTPersistence_put
	add	esp, 36					; 00000024H
	mov	DWORD PTR _rc$[ebp], eax
$LN3@MQTTPacket@4:
; Line 246
	mov	edx, DWORD PTR _frees$[ebp]
	push	edx
	mov	eax, DWORD PTR _buflens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffers$[ebp]
	push	ecx
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf0len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _net$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Socket_putdatas
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _rc$[ebp], eax
; Line 248
	cmp	DWORD PTR _rc$[ebp], 0
	jne	SHORT $LN2@MQTTPacket@4
; Line 249
	mov	ecx, DWORD PTR _net$[ebp]
	add	ecx, 8
	push	ecx
	call	_time
	add	esp, 4
$LN2@MQTTPacket@4:
; Line 251
	cmp	DWORD PTR _rc$[ebp], -22		; ffffffeaH
	je	SHORT $LN1@MQTTPacket@4
; Line 252
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	push	252					; 000000fcH
	push	OFFSET $SG84534
	call	_myfree
	add	esp, 12					; 0000000cH
$LN1@MQTTPacket@4:
; Line 253
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	253					; 000000fdH
	push	OFFSET $SG84535
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 254
	mov	eax, DWORD PTR _rc$[ebp]
; Line 255
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_sends ENDP
; Function compile flags: /Odtp
_d$84546 = -5						; size = 1
_rc$ = -4						; size = 4
_buf$ = 8						; size = 4
_length$ = 12						; size = 4
_MQTTPacket_encode PROC
; Line 265
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 266
	mov	DWORD PTR _rc$[ebp], 0
; Line 268
	push	3
	push	268					; 0000010cH
	push	OFFSET $SG84542
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
$LN4@MQTTPacket@5:
; Line 271
	mov	eax, DWORD PTR _length$[ebp]
	and	eax, -2147483521			; 8000007fH
	jns	SHORT $LN7@MQTTPacket@5
	dec	eax
	or	eax, -128				; ffffff80H
	inc	eax
$LN7@MQTTPacket@5:
	mov	BYTE PTR _d$84546[ebp], al
; Line 272
	mov	eax, DWORD PTR _length$[ebp]
	cdq
	and	edx, 127				; 0000007fH
	add	eax, edx
	sar	eax, 7
	mov	DWORD PTR _length$[ebp], eax
; Line 274
	cmp	DWORD PTR _length$[ebp], 0
	jle	SHORT $LN1@MQTTPacket@5
; Line 275
	movsx	ecx, BYTE PTR _d$84546[ebp]
	or	ecx, 128				; 00000080H
	mov	BYTE PTR _d$84546[ebp], cl
$LN1@MQTTPacket@5:
; Line 276
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _rc$[ebp]
	mov	al, BYTE PTR _d$84546[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR _rc$[ebp]
	add	ecx, 1
	mov	DWORD PTR _rc$[ebp], ecx
; Line 277
	cmp	DWORD PTR _length$[ebp], 0
	jg	SHORT $LN4@MQTTPacket@5
; Line 278
	push	3
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	push	278					; 00000116H
	push	OFFSET $SG84548
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 279
	mov	eax, DWORD PTR _rc$[ebp]
; Line 280
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_encode ENDP
; Function compile flags: /Odtp
_c$ = -13						; size = 1
_len$ = -12						; size = 4
_rc$ = -8						; size = 4
_multiplier$ = -4					; size = 4
_net$ = 8						; size = 4
_value$ = 12						; size = 4
_MQTTPacket_decode PROC
; Line 290
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 291
	mov	DWORD PTR _rc$[ebp], -1
; Line 293
	mov	DWORD PTR _multiplier$[ebp], 1
; Line 294
	mov	DWORD PTR _len$[ebp], 0
; Line 297
	push	3
	push	297					; 00000129H
	push	OFFSET $SG84558
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 298
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@MQTTPacket@6:
; Line 301
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
	cmp	DWORD PTR _len$[ebp], 4
	jle	SHORT $LN2@MQTTPacket@6
; Line 303
	mov	DWORD PTR _rc$[ebp], -1
; Line 304
	jmp	SHORT $exit$84563
$LN2@MQTTPacket@6:
; Line 309
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _net$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Socket_getch
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
; Line 311
	cmp	DWORD PTR _rc$[ebp], 0
	je	SHORT $LN1@MQTTPacket@6
; Line 312
	jmp	SHORT $exit$84563
$LN1@MQTTPacket@6:
; Line 313
	movsx	edx, BYTE PTR _c$[ebp]
	and	edx, 127				; 0000007fH
	imul	edx, DWORD PTR _multiplier$[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 314
	mov	edx, DWORD PTR _multiplier$[ebp]
	shl	edx, 7
	mov	DWORD PTR _multiplier$[ebp], edx
; Line 315
	movsx	eax, BYTE PTR _c$[ebp]
	and	eax, 128				; 00000080H
	jne	SHORT $LN5@MQTTPacket@6
$exit$84563:
; Line 317
	push	3
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	317					; 0000013dH
	push	OFFSET $SG84565
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 318
	mov	eax, DWORD PTR _rc$[ebp]
; Line 319
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_decode ENDP
; Function compile flags: /Odtp
_len$ = -8						; size = 4
_ptr$ = -4						; size = 4
_pptr$ = 8						; size = 4
_readInt PROC
; Line 328
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 329
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ptr$[ebp], ecx
; Line 330
	mov	edx, DWORD PTR _ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	shl	eax, 8
	mov	ecx, DWORD PTR _ptr$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	add	eax, edx
	mov	DWORD PTR _len$[ebp], eax
; Line 331
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _pptr$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 332
	mov	eax, DWORD PTR _len$[ebp]
; Line 333
	mov	esp, ebp
	pop	ebp
	ret	0
_readInt ENDP
_TEXT	ENDS
PUBLIC	_readUTFlen
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_string$ = -4						; size = 4
_pptr$ = 8						; size = 4
_enddata$ = 12						; size = 4
_len$ = 16						; size = 4
_readUTFlen PROC
; Line 349
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 350
	mov	DWORD PTR _string$[ebp], 0
; Line 352
	push	3
	push	352					; 00000160H
	push	OFFSET $SG84583
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 353
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR _enddata$[ebp]
	sub	ecx, DWORD PTR [eax]
	cmp	ecx, 1
	jle	SHORT $LN2@readUTFlen
; Line 355
	mov	edx, DWORD PTR _pptr$[ebp]
	push	edx
	call	_readInt
	add	esp, 4
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 356
	mov	edx, DWORD PTR _pptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _len$[ebp]
	add	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR _enddata$[ebp]
	ja	SHORT $LN2@readUTFlen
; Line 358
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	push	eax
	push	358					; 00000166H
	push	OFFSET $SG84586
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _string$[ebp], eax
; Line 359
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 360
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _string$[ebp]
	mov	BYTE PTR [edx+ecx], 0
; Line 361
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _len$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@readUTFlen:
; Line 364
	push	3
	push	0
	push	364					; 0000016cH
	push	OFFSET $SG84588
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 365
	mov	eax, DWORD PTR _string$[ebp]
; Line 366
	mov	esp, ebp
	pop	ebp
	ret	0
_readUTFlen ENDP
_TEXT	ENDS
PUBLIC	_readUTF
; Function compile flags: /Odtp
_TEXT	SEGMENT
_len$ = -4						; size = 4
_pptr$ = 8						; size = 4
_enddata$ = 12						; size = 4
_readUTF PROC
; Line 380
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 382
	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _enddata$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pptr$[ebp]
	push	edx
	call	_readUTFlen
	add	esp, 12					; 0000000cH
; Line 383
	mov	esp, ebp
	pop	ebp
	ret	0
_readUTF ENDP
_TEXT	ENDS
PUBLIC	_readChar
; Function compile flags: /Odtp
_TEXT	SEGMENT
_c$ = -1						; size = 1
_pptr$ = 8						; size = 4
_readChar PROC
; Line 392
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 393
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$[ebp], dl
; Line 394
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _pptr$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 395
	mov	al, BYTE PTR _c$[ebp]
; Line 396
	mov	esp, ebp
	pop	ebp
	ret	0
_readChar ENDP
_TEXT	ENDS
PUBLIC	_writeChar
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pptr$ = 8						; size = 4
_c$ = 12						; size = 1
_writeChar PROC
; Line 405
	push	ebp
	mov	ebp, esp
; Line 406
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 407
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _pptr$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 408
	pop	ebp
	ret	0
_writeChar ENDP
_TEXT	ENDS
PUBLIC	_writeInt
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pptr$ = 8						; size = 4
_anInt$ = 12						; size = 4
_writeInt PROC
; Line 417
	push	ebp
	mov	ebp, esp
; Line 418
	mov	eax, DWORD PTR _anInt$[ebp]
	cdq
	and	edx, 255				; 000000ffH
	add	eax, edx
	sar	eax, 8
	mov	ecx, DWORD PTR _pptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], al
; Line 419
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _pptr$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 420
	mov	eax, DWORD PTR _anInt$[ebp]
	and	eax, -2147483393			; 800000ffH
	jns	SHORT $LN3@writeInt
	dec	eax
	or	eax, -256				; ffffff00H
	inc	eax
$LN3@writeInt:
	mov	ecx, DWORD PTR _pptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], al
; Line 421
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _pptr$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 422
	pop	ebp
	ret	0
_writeInt ENDP
_TEXT	ENDS
PUBLIC	_writeUTF
EXTRN	_strlen:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_len$ = -4						; size = 4
_pptr$ = 8						; size = 4
_string$ = 12						; size = 4
_writeUTF PROC
; Line 431
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 432
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
; Line 433
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pptr$[ebp]
	push	edx
	call	_writeInt
	add	esp, 8
; Line 434
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _string$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pptr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 435
	mov	ecx, DWORD PTR _pptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _pptr$[ebp]
	mov	DWORD PTR [eax], edx
; Line 436
	mov	esp, ebp
	pop	ebp
	ret	0
_writeUTF ENDP
; Function compile flags: /Odtp
_aHeader$ = 8						; size = 1
_data$ = 12						; size = 4
_datalen$ = 16						; size = 4
_MQTTPacket_header_only PROC
; Line 447
	push	ebp
	mov	ebp, esp
; Line 449
	mov	al, BYTE PTR _aHeader$[ebp]
	mov	BYTE PTR ?header@?1??MQTTPacket_header_only@@9@9, al
; Line 450
	mov	eax, OFFSET ?header@?1??MQTTPacket_header_only@@9@9
; Line 451
	pop	ebp
	ret	0
_MQTTPacket_header_only ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_send_disconnect
; Function compile flags: /Odtp
_TEXT	SEGMENT
_header$ = -8						; size = 4
_rc$ = -4						; size = 4
_net$ = 8						; size = 4
_clientID$ = 12						; size = 4
_MQTTPacket_send_disconnect PROC
; Line 460
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 462
	mov	DWORD PTR _rc$[ebp], 0
; Line 464
	push	3
	push	464					; 000001d0H
	push	OFFSET $SG84633
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 465
	mov	BYTE PTR _header$[ebp], 0
; Line 466
	mov	eax, DWORD PTR _header$[ebp]
	and	eax, -241				; ffffff0fH
	or	eax, 224				; 000000e0H
	mov	DWORD PTR _header$[ebp], eax
; Line 467
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _net$[ebp]
	push	edx
	call	_MQTTPacket_send
	add	esp, 20					; 00000014H
	mov	DWORD PTR _rc$[ebp], eax
; Line 468
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clientID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _net$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	push	28					; 0000001cH
	push	4
	call	_Log
	add	esp, 24					; 00000018H
; Line 469
	push	3
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	469					; 000001d5H
	push	OFFSET $SG84636
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 470
	mov	eax, DWORD PTR _rc$[ebp]
; Line 471
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_send_disconnect ENDP
; Function compile flags: /Odtp
tv73 = -16						; size = 4
_enddata$ = -12						; size = 4
_curdata$ = -8						; size = 4
_pack$ = -4						; size = 4
_aHeader$ = 8						; size = 1
_data$ = 12						; size = 4
_datalen$ = 16						; size = 4
_MQTTPacket_publish PROC
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 483
	push	24					; 00000018H
	push	483					; 000001e3H
	push	OFFSET $SG84646
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pack$[ebp], eax
; Line 484
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _curdata$[ebp], eax
; Line 485
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _datalen$[ebp]
	mov	DWORD PTR _enddata$[ebp], ecx
; Line 487
	push	3
	push	487					; 000001e7H
	push	OFFSET $SG84649
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 488
	mov	edx, DWORD PTR _pack$[ebp]
	mov	al, BYTE PTR _aHeader$[ebp]
	mov	BYTE PTR [edx], al
; Line 489
	mov	ecx, DWORD PTR _pack$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _enddata$[ebp]
	push	edx
	lea	eax, DWORD PTR _curdata$[ebp]
	push	eax
	call	_readUTFlen
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR [ecx+4], edx
	cmp	DWORD PTR tv73[ebp], 0
	jne	SHORT $LN3@MQTTPacket@7
; Line 491
	mov	eax, DWORD PTR _pack$[ebp]
	push	eax
	push	491					; 000001ebH
	push	OFFSET $SG84652
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 492
	mov	DWORD PTR _pack$[ebp], 0
; Line 493
	jmp	SHORT $exit$84654
$LN3@MQTTPacket@7:
; Line 495
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 1
	and	edx, 3
	jbe	SHORT $LN2@MQTTPacket@7
; Line 496
	lea	eax, DWORD PTR _curdata$[ebp]
	push	eax
	call	_readInt
	add	esp, 4
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 497
	jmp	SHORT $LN1@MQTTPacket@7
$LN2@MQTTPacket@7:
; Line 498
	mov	edx, DWORD PTR _pack$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN1@MQTTPacket@7:
; Line 499
	mov	eax, DWORD PTR _pack$[ebp]
	mov	ecx, DWORD PTR _curdata$[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 500
	mov	edx, DWORD PTR _curdata$[ebp]
	sub	edx, DWORD PTR _data$[ebp]
	mov	eax, DWORD PTR _datalen$[ebp]
	sub	eax, edx
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	DWORD PTR [ecx+20], eax
$exit$84654:
; Line 502
	push	3
	push	0
	push	502					; 000001f6H
	push	OFFSET $SG84658
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 503
	mov	eax, DWORD PTR _pack$[ebp]
; Line 504
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_publish ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_freePublish
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pack$ = 8						; size = 4
_MQTTPacket_freePublish PROC
; Line 512
	push	ebp
	mov	ebp, esp
; Line 513
	push	3
	push	513					; 00000201H
	push	OFFSET $SG84662
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 514
	mov	eax, DWORD PTR _pack$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@MQTTPacket@8
; Line 515
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	515					; 00000203H
	push	OFFSET $SG84665
	call	_myfree
	add	esp, 12					; 0000000cH
$LN1@MQTTPacket@8:
; Line 516
	mov	eax, DWORD PTR _pack$[ebp]
	push	eax
	push	516					; 00000204H
	push	OFFSET $SG84666
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 517
	push	3
	push	0
	push	517					; 00000205H
	push	OFFSET $SG84668
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 518
	pop	ebp
	ret	0
_MQTTPacket_freePublish ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_send_ack
; Function compile flags: /Odtp
_TEXT	SEGMENT
_header$ = -16						; size = 4
_buf$ = -12						; size = 4
_ptr$ = -8						; size = 4
_rc$ = -4						; size = 4
_type$ = 8						; size = 4
_msgid$ = 12						; size = 4
_dup$ = 16						; size = 4
_net$ = 20						; size = 4
_MQTTPacket_send_ack PROC
; Line 530
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 533
	push	2
	push	533					; 00000215H
	push	OFFSET $SG84682
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$[ebp], eax
; Line 534
	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 536
	push	3
	push	536					; 00000218H
	push	OFFSET $SG84684
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 537
	mov	BYTE PTR _header$[ebp], 0
; Line 538
	mov	ecx, DWORD PTR _type$[ebp]
	and	ecx, 15					; 0000000fH
	shl	ecx, 4
	mov	edx, DWORD PTR _header$[ebp]
	and	edx, -241				; ffffff0fH
	or	edx, ecx
	mov	DWORD PTR _header$[ebp], edx
; Line 539
	mov	eax, DWORD PTR _dup$[ebp]
	and	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _header$[ebp]
	and	ecx, -9					; fffffff7H
	or	ecx, eax
	mov	DWORD PTR _header$[ebp], ecx
; Line 540
	cmp	DWORD PTR _type$[ebp], 6
	jne	SHORT $LN2@MQTTPacket@9
; Line 541
	mov	edx, DWORD PTR _header$[ebp]
	and	edx, -7					; fffffff9H
	or	edx, 2
	mov	DWORD PTR _header$[ebp], edx
$LN2@MQTTPacket@9:
; Line 542
	mov	eax, DWORD PTR _msgid$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	call	_writeInt
	add	esp, 8
; Line 543
	push	1
	push	2
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _net$[ebp]
	push	ecx
	call	_MQTTPacket_send
	add	esp, 20					; 00000014H
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], -22		; ffffffeaH
	je	SHORT $LN1@MQTTPacket@9
; Line 544
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	push	544					; 00000220H
	push	OFFSET $SG84687
	call	_myfree
	add	esp, 12					; 0000000cH
$LN1@MQTTPacket@9:
; Line 545
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	545					; 00000221H
	push	OFFSET $SG84688
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 546
	mov	eax, DWORD PTR _rc$[ebp]
; Line 547
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_send_ack ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_send_puback
; Function compile flags: /Odtp
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_msgid$ = 8						; size = 4
_net$ = 12						; size = 4
_clientID$ = 16						; size = 4
_MQTTPacket_send_puback PROC
; Line 558
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 559
	mov	DWORD PTR _rc$[ebp], 0
; Line 561
	push	3
	push	561					; 00000231H
	push	OFFSET $SG84697
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 562
	mov	eax, DWORD PTR _net$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _msgid$[ebp]
	push	ecx
	push	4
	call	_MQTTPacket_send_ack
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
; Line 563
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, DWORD PTR _msgid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clientID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _net$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	push	12					; 0000000cH
	push	4
	call	_Log
	add	esp, 28					; 0000001cH
; Line 564
	push	3
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	564					; 00000234H
	push	OFFSET $SG84699
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 565
	mov	eax, DWORD PTR _rc$[ebp]
; Line 566
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_send_puback ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_freeSuback
EXTRN	_ListFree:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pack$ = 8						; size = 4
_MQTTPacket_freeSuback PROC
; Line 574
	push	ebp
	mov	ebp, esp
; Line 575
	push	3
	push	575					; 0000023fH
	push	OFFSET $SG84703
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 576
	mov	eax, DWORD PTR _pack$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@MQTTPacket@10
; Line 577
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_ListFree
	add	esp, 4
$LN1@MQTTPacket@10:
; Line 578
	mov	eax, DWORD PTR _pack$[ebp]
	push	eax
	push	578					; 00000242H
	push	OFFSET $SG84706
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 579
	push	3
	push	0
	push	579					; 00000243H
	push	OFFSET $SG84708
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 580
	pop	ebp
	ret	0
_MQTTPacket_freeSuback ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_send_pubrec
; Function compile flags: /Odtp
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_msgid$ = 8						; size = 4
_net$ = 12						; size = 4
_clientID$ = 16						; size = 4
_MQTTPacket_send_pubrec PROC
; Line 591
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 592
	mov	DWORD PTR _rc$[ebp], 0
; Line 594
	push	3
	push	594					; 00000252H
	push	OFFSET $SG84717
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 595
	mov	eax, DWORD PTR _net$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _msgid$[ebp]
	push	ecx
	push	5
	call	_MQTTPacket_send_ack
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
; Line 596
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, DWORD PTR _msgid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clientID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _net$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	push	13					; 0000000dH
	push	4
	call	_Log
	add	esp, 28					; 0000001cH
; Line 597
	push	3
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	597					; 00000255H
	push	OFFSET $SG84719
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 598
	mov	eax, DWORD PTR _rc$[ebp]
; Line 599
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_send_pubrec ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_send_pubrel
; Function compile flags: /Odtp
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_msgid$ = 8						; size = 4
_dup$ = 12						; size = 4
_net$ = 16						; size = 4
_clientID$ = 20						; size = 4
_MQTTPacket_send_pubrel PROC
; Line 611
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 612
	mov	DWORD PTR _rc$[ebp], 0
; Line 614
	push	3
	push	614					; 00000266H
	push	OFFSET $SG84730
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 615
	mov	eax, DWORD PTR _net$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dup$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msgid$[ebp]
	push	edx
	push	6
	call	_MQTTPacket_send_ack
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
; Line 616
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msgid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _clientID$[ebp]
	push	edx
	mov	eax, DWORD PTR _net$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	push	16					; 00000010H
	push	4
	call	_Log
	add	esp, 28					; 0000001cH
; Line 617
	push	3
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	push	617					; 00000269H
	push	OFFSET $SG84732
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 618
	mov	eax, DWORD PTR _rc$[ebp]
; Line 619
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_send_pubrel ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_send_pubcomp
; Function compile flags: /Odtp
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_msgid$ = 8						; size = 4
_net$ = 12						; size = 4
_clientID$ = 16						; size = 4
_MQTTPacket_send_pubcomp PROC
; Line 630
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 631
	mov	DWORD PTR _rc$[ebp], 0
; Line 633
	push	3
	push	633					; 00000279H
	push	OFFSET $SG84741
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 634
	mov	eax, DWORD PTR _net$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _msgid$[ebp]
	push	ecx
	push	7
	call	_MQTTPacket_send_ack
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
; Line 635
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, DWORD PTR _msgid$[ebp]
	push	eax
	mov	ecx, DWORD PTR _clientID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _net$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	push	18					; 00000012H
	push	4
	call	_Log
	add	esp, 28					; 0000001cH
; Line 636
	push	3
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	636					; 0000027cH
	push	OFFSET $SG84743
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 637
	mov	eax, DWORD PTR _rc$[ebp]
; Line 638
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_send_pubcomp ENDP
; Function compile flags: /Odtp
_curdata$ = -8						; size = 4
_pack$ = -4						; size = 4
_aHeader$ = 8						; size = 1
_data$ = 12						; size = 4
_datalen$ = 16						; size = 4
_MQTTPacket_ack PROC
; Line 649
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 650
	push	8
	push	650					; 0000028aH
	push	OFFSET $SG84753
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pack$[ebp], eax
; Line 651
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _curdata$[ebp], eax
; Line 653
	push	3
	push	653					; 0000028dH
	push	OFFSET $SG84755
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 654
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	dl, BYTE PTR _aHeader$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 655
	lea	eax, DWORD PTR _curdata$[ebp]
	push	eax
	call	_readInt
	add	esp, 4
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 656
	push	3
	push	0
	push	656					; 00000290H
	push	OFFSET $SG84757
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 657
	mov	eax, DWORD PTR _pack$[ebp]
; Line 658
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_ack ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_MQTTPacket_send_publish
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv209 = -116						; size = 4
_lens$84788 = -112					; size = 12
_bufs$84787 = -100					; size = 12
_ptr$84786 = -88					; size = 4
_frees$84789 = -84					; size = 12
_lens$84781 = -72					; size = 16
_buf$84777 = -56					; size = 4
_bufs$84780 = -52					; size = 16
_ptr$84779 = -36					; size = 4
_frees$84782 = -32					; size = 16
__$ArrayPad$ = -16					; size = 4
_header$ = -12						; size = 4
_topiclen$ = -8						; size = 4
_rc$ = -4						; size = 4
_pack$ = 8						; size = 4
_dup$ = 12						; size = 4
_qos$ = 16						; size = 4
_retained$ = 20						; size = 4
_net$ = 24						; size = 4
_clientID$ = 28						; size = 4
_MQTTPacket_send_publish PROC
; Line 672
	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 675
	mov	DWORD PTR _rc$[ebp], -1
; Line 677
	push	3
	push	677					; 000002a5H
	push	OFFSET $SG84774
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 678
	push	2
	push	678					; 000002a6H
	push	OFFSET $SG84775
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _topiclen$[ebp], eax
; Line 680
	mov	eax, DWORD PTR _header$[ebp]
	and	eax, -241				; ffffff0fH
	or	eax, 48					; 00000030H
	mov	DWORD PTR _header$[ebp], eax
; Line 681
	mov	ecx, DWORD PTR _dup$[ebp]
	and	ecx, 1
	shl	ecx, 3
	mov	edx, DWORD PTR _header$[ebp]
	and	edx, -9					; fffffff7H
	or	edx, ecx
	mov	DWORD PTR _header$[ebp], edx
; Line 682
	mov	eax, DWORD PTR _qos$[ebp]
	and	eax, 3
	shl	eax, 1
	mov	ecx, DWORD PTR _header$[ebp]
	and	ecx, -7					; fffffff9H
	or	ecx, eax
	mov	DWORD PTR _header$[ebp], ecx
; Line 683
	mov	edx, DWORD PTR _retained$[ebp]
	and	edx, 1
	mov	eax, DWORD PTR _header$[ebp]
	and	eax, -2					; fffffffeH
	or	eax, edx
	mov	DWORD PTR _header$[ebp], eax
; Line 684
	cmp	DWORD PTR _qos$[ebp], 0
	jle	$LN6@MQTTPacket@11
; Line 686
	push	2
	push	686					; 000002aeH
	push	OFFSET $SG84778
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$84777[ebp], eax
; Line 687
	mov	ecx, DWORD PTR _buf$84777[ebp]
	mov	DWORD PTR _ptr$84779[ebp], ecx
; Line 688
	mov	edx, DWORD PTR _topiclen$[ebp]
	mov	DWORD PTR _bufs$84780[ebp], edx
	mov	eax, DWORD PTR _pack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _bufs$84780[ebp+4], ecx
	mov	edx, DWORD PTR _buf$84777[ebp]
	mov	DWORD PTR _bufs$84780[ebp+8], edx
	mov	eax, DWORD PTR _pack$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _bufs$84780[ebp+12], ecx
; Line 689
	mov	DWORD PTR _lens$84781[ebp], 2
	mov	edx, DWORD PTR _pack$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _lens$84781[ebp+4], eax
	mov	DWORD PTR _lens$84781[ebp+8], 2
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _lens$84781[ebp+12], edx
; Line 690
	mov	DWORD PTR _frees$84782[ebp], 1
	mov	DWORD PTR _frees$84782[ebp+4], 0
	mov	DWORD PTR _frees$84782[ebp+8], 1
	mov	DWORD PTR _frees$84782[ebp+12], 0
; Line 692
	mov	eax, DWORD PTR _pack$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	lea	edx, DWORD PTR _ptr$84779[ebp]
	push	edx
	call	_writeInt
	add	esp, 8
; Line 693
	mov	eax, DWORD PTR _topiclen$[ebp]
	mov	DWORD PTR _ptr$84779[ebp], eax
; Line 694
	mov	ecx, DWORD PTR _lens$84781[ebp+4]
	push	ecx
	lea	edx, DWORD PTR _ptr$84779[ebp]
	push	edx
	call	_writeInt
	add	esp, 8
; Line 695
	lea	eax, DWORD PTR _frees$84782[ebp]
	push	eax
	lea	ecx, DWORD PTR _lens$84781[ebp]
	push	ecx
	lea	edx, DWORD PTR _bufs$84780[ebp]
	push	edx
	push	4
	mov	eax, DWORD PTR _header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _net$[ebp]
	push	ecx
	call	_MQTTPacket_sends
	add	esp, 24					; 00000018H
	mov	DWORD PTR _rc$[ebp], eax
; Line 696
	cmp	DWORD PTR _rc$[ebp], -22		; ffffffeaH
	je	SHORT $LN5@MQTTPacket@11
; Line 697
	mov	edx, DWORD PTR _buf$84777[ebp]
	push	edx
	push	697					; 000002b9H
	push	OFFSET $SG84784
	call	_myfree
	add	esp, 12					; 0000000cH
$LN5@MQTTPacket@11:
; Line 699
	jmp	$LN4@MQTTPacket@11
$LN6@MQTTPacket@11:
; Line 701
	mov	eax, DWORD PTR _topiclen$[ebp]
	mov	DWORD PTR _ptr$84786[ebp], eax
; Line 702
	mov	ecx, DWORD PTR _topiclen$[ebp]
	mov	DWORD PTR _bufs$84787[ebp], ecx
	mov	edx, DWORD PTR _pack$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _bufs$84787[ebp+4], eax
	mov	ecx, DWORD PTR _pack$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _bufs$84787[ebp+8], edx
; Line 703
	mov	DWORD PTR _lens$84788[ebp], 2
	mov	eax, DWORD PTR _pack$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _lens$84788[ebp+4], eax
	mov	edx, DWORD PTR _pack$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _lens$84788[ebp+8], eax
; Line 704
	mov	DWORD PTR _frees$84789[ebp], 1
	mov	DWORD PTR _frees$84789[ebp+4], 0
	mov	DWORD PTR _frees$84789[ebp+8], 0
; Line 706
	mov	ecx, DWORD PTR _lens$84788[ebp+4]
	push	ecx
	lea	edx, DWORD PTR _ptr$84786[ebp]
	push	edx
	call	_writeInt
	add	esp, 8
; Line 707
	lea	eax, DWORD PTR _frees$84789[ebp]
	push	eax
	lea	ecx, DWORD PTR _lens$84788[ebp]
	push	ecx
	lea	edx, DWORD PTR _bufs$84787[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _net$[ebp]
	push	ecx
	call	_MQTTPacket_sends
	add	esp, 24					; 00000018H
	mov	DWORD PTR _rc$[ebp], eax
$LN4@MQTTPacket@11:
; Line 709
	cmp	DWORD PTR _rc$[ebp], -22		; ffffffeaH
	je	SHORT $LN3@MQTTPacket@11
; Line 710
	mov	edx, DWORD PTR _topiclen$[ebp]
	push	edx
	push	710					; 000002c6H
	push	OFFSET $SG84791
	call	_myfree
	add	esp, 12					; 0000000cH
$LN3@MQTTPacket@11:
; Line 711
	cmp	DWORD PTR _qos$[ebp], 0
	jne	SHORT $LN2@MQTTPacket@11
; Line 712
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _retained$[ebp]
	push	ecx
	mov	edx, DWORD PTR _clientID$[ebp]
	push	edx
	mov	eax, DWORD PTR _net$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	0
	push	27					; 0000001bH
	push	4
	call	_Log
	add	esp, 28					; 0000001cH
; Line 713
	jmp	SHORT $LN1@MQTTPacket@11
$LN2@MQTTPacket@11:
; Line 715
	mov	edx, DWORD PTR _pack$[ebp]
	cmp	DWORD PTR [edx+20], 20			; 00000014H
	jle	SHORT $LN9@MQTTPacket@11
	mov	DWORD PTR tv209[ebp], 20		; 00000014H
	jmp	SHORT $LN10@MQTTPacket@11
$LN9@MQTTPacket@11:
	mov	eax, DWORD PTR _pack$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv209[ebp], ecx
$LN10@MQTTPacket@11:
	mov	edx, DWORD PTR _pack$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR tv209[ebp]
	push	ecx
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, DWORD PTR _retained$[ebp]
	push	eax
	mov	ecx, DWORD PTR _qos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pack$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _clientID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _net$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	0
	push	10					; 0000000aH
	push	4
	call	_Log
	add	esp, 44					; 0000002cH
$LN1@MQTTPacket@11:
; Line 716
	push	3
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	716					; 000002ccH
	push	OFFSET $SG84796
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 717
	mov	eax, DWORD PTR _rc$[ebp]
; Line 718
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPacket_send_publish ENDP
_TEXT	ENDS
PUBLIC	_MQTTPacket_free_packet
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pack$ = 8						; size = 4
_MQTTPacket_free_packet PROC
; Line 726
	push	ebp
	mov	ebp, esp
; Line 727
	push	3
	push	727					; 000002d7H
	push	OFFSET $SG84800
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 728
	mov	eax, DWORD PTR _pack$[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 4
	and	ecx, 15					; 0000000fH
	cmp	ecx, 3
	jne	SHORT $LN2@MQTTPacket@12
; Line 729
	mov	edx, DWORD PTR _pack$[ebp]
	push	edx
	call	_MQTTPacket_freePublish
	add	esp, 4
; Line 734
	jmp	SHORT $LN1@MQTTPacket@12
$LN2@MQTTPacket@12:
; Line 735
	mov	eax, DWORD PTR _pack$[ebp]
	push	eax
	push	735					; 000002dfH
	push	OFFSET $SG84804
	call	_myfree
	add	esp, 12					; 0000000cH
$LN1@MQTTPacket@12:
; Line 736
	push	3
	push	0
	push	736					; 000002e0H
	push	OFFSET $SG84806
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 737
	pop	ebp
	ret	0
_MQTTPacket_free_packet ENDP
_TEXT	ENDS
END
