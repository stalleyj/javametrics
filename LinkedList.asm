; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspaces\newagent2\Paho\org.eclipse.paho.mqtt.c\src\LinkedList.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG4998	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5021	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5033	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5101	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5103	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5130	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5134	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5147	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5176	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5177	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5182	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5191	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
	ORG $+3
$SG5192	DB	'../Paho/org.eclipse.paho.mqtt.c/src/LinkedList.c', 00H
_DATA	ENDS
PUBLIC	_ListZero
EXTRN	_memset:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_newl$ = 8						; size = 4
_ListZero PROC
; File c:\workspaces\newagent2\paho\org.eclipse.paho.mqtt.c\src\linkedlist.c
; Line 41
	push	ebp
	mov	ebp, esp
; Line 42
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _newl$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 47
	pop	ebp
	ret	0
_ListZero ENDP
_TEXT	ENDS
PUBLIC	_ListInitialize
EXTRN	_mymalloc:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_newl$ = -4						; size = 4
_ListInitialize PROC
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 56
	push	20					; 00000014H
	push	56					; 00000038H
	push	OFFSET $SG4998
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newl$[ebp], eax
; Line 57
	mov	eax, DWORD PTR _newl$[ebp]
	push	eax
	call	_ListZero
	add	esp, 4
; Line 58
	mov	eax, DWORD PTR _newl$[ebp]
; Line 59
	mov	esp, ebp
	pop	ebp
	ret	0
_ListInitialize ENDP
_TEXT	ENDS
PUBLIC	_ListAppendNoMalloc
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aList$ = 8						; size = 4
_content$ = 12						; size = 4
_newel$ = 16						; size = 4
_size$ = 20						; size = 4
_ListAppendNoMalloc PROC
; Line 71
	push	ebp
	mov	ebp, esp
; Line 72
	mov	eax, DWORD PTR _newel$[ebp]
	mov	ecx, DWORD PTR _content$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 73
	mov	edx, DWORD PTR _newel$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 74
	mov	eax, DWORD PTR _newel$[ebp]
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 75
	mov	eax, DWORD PTR _aList$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@ListAppend
; Line 76
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR _newel$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 77
	jmp	SHORT $LN1@ListAppend
$LN2@ListAppend:
; Line 78
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _newel$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN1@ListAppend:
; Line 79
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR _newel$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 80
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 1
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 81
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 82
	pop	ebp
	ret	0
_ListAppendNoMalloc ENDP
_TEXT	ENDS
PUBLIC	_ListAppend
; Function compile flags: /Odtp
_TEXT	SEGMENT
_newel$ = -4						; size = 4
_aList$ = 8						; size = 4
_content$ = 12						; size = 4
_size$ = 16						; size = 4
_ListAppend PROC
; Line 92
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 93
	push	12					; 0000000cH
	push	93					; 0000005dH
	push	OFFSET $SG5021
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newel$[ebp], eax
; Line 94
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _content$[ebp]
	push	edx
	mov	eax, DWORD PTR _aList$[ebp]
	push	eax
	call	_ListAppendNoMalloc
	add	esp, 16					; 00000010H
; Line 95
	mov	esp, ebp
	pop	ebp
	ret	0
_ListAppend ENDP
_TEXT	ENDS
PUBLIC	_ListInsert
; Function compile flags: /Odtp
_TEXT	SEGMENT
_newel$ = -4						; size = 4
_aList$ = 8						; size = 4
_content$ = 12						; size = 4
_size$ = 16						; size = 4
_index$ = 20						; size = 4
_ListInsert PROC
; Line 107
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 108
	push	12					; 0000000cH
	push	108					; 0000006cH
	push	OFFSET $SG5033
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newel$[ebp], eax
; Line 110
	cmp	DWORD PTR _index$[ebp], 0
	jne	SHORT $LN4@ListInsert
; Line 111
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _content$[ebp]
	push	edx
	mov	eax, DWORD PTR _aList$[ebp]
	push	eax
	call	_ListAppendNoMalloc
	add	esp, 16					; 00000010H
; Line 112
	jmp	SHORT $LN5@ListInsert
$LN4@ListInsert:
; Line 114
	mov	ecx, DWORD PTR _newel$[ebp]
	mov	edx, DWORD PTR _content$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 115
	mov	eax, DWORD PTR _newel$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 116
	mov	edx, DWORD PTR _newel$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 118
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _newel$[ebp]
	mov	DWORD PTR [edx], eax
; Line 119
	mov	ecx, DWORD PTR _newel$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@ListInsert
; Line 120
	mov	edx, DWORD PTR _newel$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _newel$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 121
	jmp	SHORT $LN1@ListInsert
$LN2@ListInsert:
; Line 122
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR _newel$[ebp]
	mov	DWORD PTR [edx], eax
$LN1@ListInsert:
; Line 124
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [eax+12], edx
; Line 125
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [eax+16], edx
$LN5@ListInsert:
; Line 127
	mov	esp, ebp
	pop	ebp
	ret	0
_ListInsert ENDP
_TEXT	ENDS
PUBLIC	_ListFindItem
PUBLIC	_ListFind
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aList$ = 8						; size = 4
_content$ = 12						; size = 4
_ListFind PROC
; Line 137
	push	ebp
	mov	ebp, esp
; Line 138
	push	0
	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aList$[ebp]
	push	ecx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
; Line 139
	pop	ebp
	ret	0
_ListFind ENDP
_TEXT	ENDS
PUBLIC	_ListNextElement
; Function compile flags: /Odtp
_TEXT	SEGMENT
_current$5064 = -8					; size = 4
_rc$ = -4						; size = 4
_aList$ = 8						; size = 4
_content$ = 12						; size = 4
_callback$ = 16						; size = 4
_ListFindItem PROC
; Line 151
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 152
	mov	DWORD PTR _rc$[ebp], 0
; Line 155
	mov	eax, DWORD PTR _aList$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN11@ListFindIt
	cmp	DWORD PTR _callback$[ebp], 0
	jne	SHORT $LN9@ListFindIt
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _content$[ebp]
	je	SHORT $LN10@ListFindIt
$LN9@ListFindIt:
	cmp	DWORD PTR _callback$[ebp], 0
	je	SHORT $LN11@ListFindIt
	mov	ecx, DWORD PTR _content$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _callback$[ebp]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@ListFindIt
$LN10@ListFindIt:
; Line 156
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _rc$[ebp], eax
; Line 157
	jmp	SHORT $LN8@ListFindIt
$LN11@ListFindIt:
; Line 159
	mov	DWORD PTR _current$5064[ebp], 0
$LN7@ListFindIt:
; Line 162
	lea	ecx, DWORD PTR _current$5064[ebp]
	push	ecx
	mov	edx, DWORD PTR _aList$[ebp]
	push	edx
	call	_ListNextElement
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@ListFindIt
; Line 164
	cmp	DWORD PTR _callback$[ebp], 0
	jne	SHORT $LN5@ListFindIt
; Line 166
	mov	eax, DWORD PTR _current$5064[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _content$[ebp]
	jne	SHORT $LN4@ListFindIt
; Line 168
	mov	edx, DWORD PTR _current$5064[ebp]
	mov	DWORD PTR _rc$[ebp], edx
; Line 169
	jmp	SHORT $LN6@ListFindIt
$LN4@ListFindIt:
; Line 172
	jmp	SHORT $LN3@ListFindIt
$LN5@ListFindIt:
; Line 174
	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _current$5064[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _callback$[ebp]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@ListFindIt
; Line 176
	mov	eax, DWORD PTR _current$5064[ebp]
	mov	DWORD PTR _rc$[ebp], eax
; Line 177
	jmp	SHORT $LN6@ListFindIt
$LN3@ListFindIt:
; Line 180
	jmp	SHORT $LN7@ListFindIt
$LN6@ListFindIt:
; Line 181
	cmp	DWORD PTR _rc$[ebp], 0
	je	SHORT $LN8@ListFindIt
; Line 182
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR _rc$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN8@ListFindIt:
; Line 184
	mov	eax, DWORD PTR _rc$[ebp]
; Line 185
	mov	esp, ebp
	pop	ebp
	ret	0
_ListFindItem ENDP
_TEXT	ENDS
PUBLIC	_ListUnlink
EXTRN	_myfree:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_next$ = -12						; size = 4
_saveddeleted$ = -8					; size = 4
_saved$ = -4						; size = 4
_aList$ = 8						; size = 4
_content$ = 12						; size = 4
_callback$ = 16						; size = 4
_freeContent$ = 20					; size = 4
_ListUnlink PROC
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 199
	mov	DWORD PTR _next$[ebp], 0
; Line 200
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _saved$[ebp], ecx
; Line 201
	mov	DWORD PTR _saveddeleted$[ebp], 0
; Line 203
	mov	edx, DWORD PTR _callback$[ebp]
	push	edx
	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aList$[ebp]
	push	ecx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN9@ListUnlink
; Line 204
	xor	eax, eax
	jmp	$LN10@ListUnlink
$LN9@ListUnlink:
; Line 206
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN8@ListUnlink
; Line 208
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], ecx
; Line 209
	jmp	SHORT $LN7@ListUnlink
$LN8@ListUnlink:
; Line 210
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
$LN7@ListUnlink:
; Line 212
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN6@ListUnlink
; Line 213
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], edx
; Line 214
	jmp	SHORT $LN5@ListUnlink
$LN6@ListUnlink:
; Line 215
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
$LN5@ListUnlink:
; Line 217
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _next$[ebp], eax
; Line 218
	cmp	DWORD PTR _freeContent$[ebp], 0
	je	SHORT $LN4@ListUnlink
; Line 219
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	219					; 000000dbH
	push	OFFSET $SG5101
	call	_myfree
	add	esp, 12					; 0000000cH
$LN4@ListUnlink:
; Line 220
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR _saved$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@ListUnlink
; Line 221
	mov	DWORD PTR _saveddeleted$[ebp], 1
$LN3@ListUnlink:
; Line 222
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	222					; 000000deH
	push	OFFSET $SG5103
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 223
	cmp	DWORD PTR _saveddeleted$[ebp], 0
	je	SHORT $LN2@ListUnlink
; Line 224
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 225
	jmp	SHORT $LN1@ListUnlink
$LN2@ListUnlink:
; Line 226
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR _saved$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN1@ListUnlink:
; Line 227
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 228
	mov	eax, 1
$LN10@ListUnlink:
; Line 229
	mov	esp, ebp
	pop	ebp
	ret	0
_ListUnlink ENDP
_TEXT	ENDS
PUBLIC	_ListDetach
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aList$ = 8						; size = 4
_content$ = 12						; size = 4
_ListDetach PROC
; Line 239
	push	ebp
	mov	ebp, esp
; Line 240
	push	0
	push	0
	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aList$[ebp]
	push	ecx
	call	_ListUnlink
	add	esp, 16					; 00000010H
; Line 241
	pop	ebp
	ret	0
_ListDetach ENDP
_TEXT	ENDS
PUBLIC	_ListRemove
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aList$ = 8						; size = 4
_content$ = 12						; size = 4
_ListRemove PROC
; Line 251
	push	ebp
	mov	ebp, esp
; Line 252
	push	1
	push	0
	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aList$[ebp]
	push	ecx
	call	_ListUnlink
	add	esp, 16					; 00000010H
; Line 253
	pop	ebp
	ret	0
_ListRemove ENDP
_TEXT	ENDS
PUBLIC	_ListDetachHead
; Function compile flags: /Odtp
_TEXT	SEGMENT
_first$5124 = -8					; size = 4
_content$ = -4						; size = 4
_aList$ = 8						; size = 4
_ListDetachHead PROC
; Line 262
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 263
	mov	DWORD PTR _content$[ebp], 0
; Line 264
	mov	eax, DWORD PTR _aList$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jle	$LN4@ListDetach
; Line 266
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _first$5124[ebp], edx
; Line 267
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _first$5124[ebp]
	jne	SHORT $LN3@ListDetach
; Line 268
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR _first$5124[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+8], ecx
$LN3@ListDetach:
; Line 269
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _first$5124[ebp]
	jne	SHORT $LN2@ListDetach
; Line 270
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN2@ListDetach:
; Line 271
	mov	edx, DWORD PTR _first$5124[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _content$[ebp], eax
; Line 272
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], ecx
; Line 273
	mov	edx, DWORD PTR _aList$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@ListDetach
; Line 274
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0
$LN1@ListDetach:
; Line 275
	mov	edx, DWORD PTR _first$5124[ebp]
	push	edx
	push	275					; 00000113H
	push	OFFSET $SG5130
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 276
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN4@ListDetach:
; Line 278
	mov	eax, DWORD PTR _content$[ebp]
; Line 279
	mov	esp, ebp
	pop	ebp
	ret	0
_ListDetachHead ENDP
_TEXT	ENDS
PUBLIC	_ListRemoveHead
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aList$ = 8						; size = 4
_ListRemoveHead PROC
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	mov	eax, DWORD PTR _aList$[ebp]
	push	eax
	call	_ListDetachHead
	add	esp, 4
	push	eax
	push	289					; 00000121H
	push	OFFSET $SG5134
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 290
	xor	eax, eax
; Line 291
	pop	ebp
	ret	0
_ListRemoveHead ENDP
_TEXT	ENDS
PUBLIC	_ListPopTail
; Function compile flags: /Odtp
_TEXT	SEGMENT
_last$5141 = -8						; size = 4
_content$ = -4						; size = 4
_aList$ = 8						; size = 4
_ListPopTail PROC
; Line 300
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 301
	mov	DWORD PTR _content$[ebp], 0
; Line 302
	mov	eax, DWORD PTR _aList$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jle	$LN4@ListPopTai
; Line 304
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _last$5141[ebp], edx
; Line 305
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _last$5141[ebp]
	jne	SHORT $LN3@ListPopTai
; Line 306
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR _last$5141[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+8], ecx
$LN3@ListPopTai:
; Line 307
	mov	edx, DWORD PTR _aList$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _last$5141[ebp]
	jne	SHORT $LN2@ListPopTai
; Line 308
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@ListPopTai:
; Line 309
	mov	edx, DWORD PTR _last$5141[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _content$[ebp], eax
; Line 310
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+4], ecx
; Line 311
	mov	edx, DWORD PTR _aList$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@ListPopTai
; Line 312
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], 0
$LN1@ListPopTai:
; Line 313
	mov	edx, DWORD PTR _last$5141[ebp]
	push	edx
	push	313					; 00000139H
	push	OFFSET $SG5147
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 314
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN4@ListPopTai:
; Line 316
	mov	eax, DWORD PTR _content$[ebp]
; Line 317
	mov	esp, ebp
	pop	ebp
	ret	0
_ListPopTail ENDP
_TEXT	ENDS
PUBLIC	_ListDetachItem
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aList$ = 8						; size = 4
_content$ = 12						; size = 4
_callback$ = 16						; size = 4
_ListDetachItem PROC
; Line 329
	push	ebp
	mov	ebp, esp
; Line 330
	push	0
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _content$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aList$[ebp]
	push	edx
	call	_ListUnlink
	add	esp, 16					; 00000010H
; Line 331
	pop	ebp
	ret	0
_ListDetachItem ENDP
_TEXT	ENDS
PUBLIC	_ListRemoveItem
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aList$ = 8						; size = 4
_content$ = 12						; size = 4
_callback$ = 16						; size = 4
_ListRemoveItem PROC
; Line 343
	push	ebp
	mov	ebp, esp
; Line 344
	push	1
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _content$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aList$[ebp]
	push	edx
	call	_ListUnlink
	add	esp, 16					; 00000010H
; Line 345
	pop	ebp
	ret	0
_ListRemoveItem ENDP
_TEXT	ENDS
PUBLIC	_ListEmpty
; Function compile flags: /Odtp
_TEXT	SEGMENT
_first$5173 = -4					; size = 4
_aList$ = 8						; size = 4
_ListEmpty PROC
; Line 353
	push	ebp
	mov	ebp, esp
	push	ecx
$LN3@ListEmpty:
; Line 354
	mov	eax, DWORD PTR _aList$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@ListEmpty
; Line 356
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _first$5173[ebp], edx
; Line 357
	mov	eax, DWORD PTR _first$5173[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@ListEmpty
; Line 358
	mov	ecx, DWORD PTR _first$5173[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	358					; 00000166H
	push	OFFSET $SG5176
	call	_myfree
	add	esp, 12					; 0000000cH
$LN1@ListEmpty:
; Line 359
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR _first$5173[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 360
	mov	eax, DWORD PTR _first$5173[ebp]
	push	eax
	push	360					; 00000168H
	push	OFFSET $SG5177
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 361
	jmp	SHORT $LN3@ListEmpty
$LN2@ListEmpty:
; Line 362
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	edx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 363
	mov	eax, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [ecx], 0
	mov	edx, DWORD PTR _aList$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 364
	mov	esp, ebp
	pop	ebp
	ret	0
_ListEmpty ENDP
_TEXT	ENDS
PUBLIC	_ListFree
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aList$ = 8						; size = 4
_ListFree PROC
; Line 371
	push	ebp
	mov	ebp, esp
; Line 372
	mov	eax, DWORD PTR _aList$[ebp]
	push	eax
	call	_ListEmpty
	add	esp, 4
; Line 373
	mov	ecx, DWORD PTR _aList$[ebp]
	push	ecx
	push	373					; 00000175H
	push	OFFSET $SG5182
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 374
	pop	ebp
	ret	0
_ListFree ENDP
_TEXT	ENDS
PUBLIC	_ListFreeNoContent
; Function compile flags: /Odtp
_TEXT	SEGMENT
_first$5190 = -4					; size = 4
_aList$ = 8						; size = 4
_ListFreeNoContent PROC
; Line 382
	push	ebp
	mov	ebp, esp
	push	ecx
$LN2@ListFreeNo:
; Line 383
	mov	eax, DWORD PTR _aList$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@ListFreeNo
; Line 385
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _first$5190[ebp], edx
; Line 386
	mov	eax, DWORD PTR _aList$[ebp]
	mov	ecx, DWORD PTR _first$5190[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
; Line 387
	mov	eax, DWORD PTR _first$5190[ebp]
	push	eax
	push	387					; 00000183H
	push	OFFSET $SG5191
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 388
	jmp	SHORT $LN2@ListFreeNo
$LN1@ListFreeNo:
; Line 389
	mov	ecx, DWORD PTR _aList$[ebp]
	push	ecx
	push	389					; 00000185H
	push	OFFSET $SG5192
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 390
	mov	esp, ebp
	pop	ebp
	ret	0
_ListFreeNoContent ENDP
; Function compile flags: /Odtp
tv66 = -4						; size = 4
_aList$ = 8						; size = 4
_pos$ = 12						; size = 4
_ListNextElement PROC
; Line 401
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 402
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@ListNextEl
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv66[ebp], edx
	jmp	SHORT $LN4@ListNextEl
$LN3@ListNextEl:
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv66[ebp], edx
$LN4@ListNextEl:
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR tv66[ebp]
; Line 403
	mov	esp, ebp
	pop	ebp
	ret	0
_ListNextElement ENDP
_TEXT	ENDS
PUBLIC	_ListPrevElement
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = -4						; size = 4
_aList$ = 8						; size = 4
_pos$ = 12						; size = 4
_ListPrevElement PROC
; Line 414
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 415
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@ListPrevEl
	mov	ecx, DWORD PTR _aList$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv67[ebp], edx
	jmp	SHORT $LN4@ListPrevEl
$LN3@ListPrevEl:
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv67[ebp], edx
$LN4@ListPrevEl:
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR tv67[ebp]
; Line 416
	mov	esp, ebp
	pop	ebp
	ret	0
_ListPrevElement ENDP
_TEXT	ENDS
PUBLIC	_intcompare
; Function compile flags: /Odtp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_intcompare PROC
; Line 426
	push	ebp
	mov	ebp, esp
; Line 427
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al
; Line 428
	pop	ebp
	ret	0
_intcompare ENDP
_TEXT	ENDS
PUBLIC	_stringcompare
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_stringcompare PROC
; Line 438
	push	ebp
	mov	ebp, esp
; Line 439
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 440
	pop	ebp
	ret	0
_stringcompare ENDP
_TEXT	ENDS
END
