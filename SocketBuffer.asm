; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspaces\newagent2\Paho\org.eclipse.paho.mqtt.c\src\SocketBuffer.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_Log_levels:DWORD
$SG82722 DB	'../Paho/org.eclipse.paho.mqtt.c/src/SocketBuffer.c', 00H
	ORG $+1
$SG82723 DB	'../Paho/org.eclipse.paho.mqtt.c/src/SocketBuffer.c', 00H
	ORG $+1
$SG82726 DB	'SocketBuffer_initialize', 00H
$SG82728 DB	'SocketBuffer_initialize', 00H
$SG82732 DB	'../Paho/org.eclipse.paho.mqtt.c/src/SocketBuffer.c', 00H
	ORG $+1
$SG82733 DB	'../Paho/org.eclipse.paho.mqtt.c/src/SocketBuffer.c', 00H
	ORG $+1
$SG82738 DB	'SocketBuffer_terminate', 00H
	ORG $+1
$SG82743 DB	'../Paho/org.eclipse.paho.mqtt.c/src/SocketBuffer.c', 00H
	ORG $+1
$SG82745 DB	'SocketBuffer_terminate', 00H
	ORG $+1
$SG82749 DB	'SocketBuffer_cleanup', 00H
	ORG $+3
$SG82752 DB	'../Paho/org.eclipse.paho.mqtt.c/src/SocketBuffer.c', 00H
	ORG $+1
$SG82755 DB	'SocketBuffer_cleanup', 00H
	ORG $+3
$SG82765 DB	'SocketBuffer_getQueuedData', 00H
	ORG $+1
$SG82772 DB	'../Paho/org.eclipse.paho.mqtt.c/src/SocketBuffer.c', 00H
	ORG $+1
$SG82773 DB	'../Paho/org.eclipse.paho.mqtt.c/src/SocketBuffer.c', 00H
	ORG $+1
$SG82775 DB	'../Paho/org.eclipse.paho.mqtt.c/src/SocketBuffer.c', 00H
	ORG $+1
$SG82777 DB	'SocketBuffer_getQueuedData', 00H
	ORG $+1
$SG82784 DB	'SocketBuffer_getQueuedChar', 00H
	ORG $+1
$SG82789 DB	'index is now %d, headerlen %d', 00H
	ORG $+2
$SG82793 DB	'header is already at full length', 00H
	ORG $+3
$SG82794 DB	'SocketBuffer_getQueuedChar', 00H
	ORG $+1
$SG82802 DB	'SocketBuffer_interrupted', 00H
	ORG $+3
$SG82808 DB	'SocketBuffer_interrupted', 00H
	ORG $+3
$SG82812 DB	'SocketBuffer_complete', 00H
	ORG $+2
$SG82817 DB	'SocketBuffer_complete', 00H
	ORG $+2
$SG82825 DB	'SocketBuffer_queueChar', 00H
	ORG $+1
$SG82832 DB	'attempt to reuse socket queue', 00H
	ORG $+2
$SG82834 DB	'socket queue fixed_header field full', 00H
	ORG $+3
$SG82836 DB	'queueChar: index is now %d, headerlen %d', 00H
	ORG $+3
$SG82838 DB	'SocketBuffer_queueChar', 00H
	ORG $+1
$SG82855 DB	'SocketBuffer_pendingWrite', 00H
	ORG $+2
$SG82857 DB	'../Paho/org.eclipse.paho.mqtt.c/src/SocketBuffer.c', 00H
	ORG $+1
$SG82862 DB	'SocketBuffer_pendingWrite', 00H
	ORG $+2
$SG82891 DB	'SocketBuffer_updateWrite', 00H
	ORG $+3
$SG82897 DB	'SocketBuffer_updateWrite', 00H
_DATA	ENDS
PUBLIC	_socketcompare
; Function compile flags: /Odtp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_socketcompare PROC
; File c:\workspaces\newagent2\paho\org.eclipse.paho.mqtt.c\src\socketbuffer.c
; Line 63
	push	ebp
	mov	ebp, esp
; Line 64
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al
; Line 65
	pop	ebp
	ret	0
_socketcompare ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_newDefQ
EXTRN	_mymalloc:PROC
_BSS	SEGMENT
_def_queue DD	01H DUP (?)
; Function compile flags: /Odtp
_BSS	ENDS
_TEXT	SEGMENT
_SocketBuffer_newDefQ PROC
; Line 72
	push	ebp
	mov	ebp, esp
; Line 73
	push	32					; 00000020H
	push	73					; 00000049H
	push	OFFSET $SG82722
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _def_queue, eax
; Line 74
	mov	eax, DWORD PTR _def_queue
	mov	DWORD PTR [eax+20], 1000		; 000003e8H
; Line 75
	mov	ecx, DWORD PTR _def_queue
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	push	75					; 0000004bH
	push	OFFSET $SG82723
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _def_queue
	mov	DWORD PTR [ecx+28], eax
; Line 76
	mov	edx, DWORD PTR _def_queue
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _def_queue
	mov	DWORD PTR [eax+20], 0
	mov	ecx, DWORD PTR _def_queue
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _def_queue
	mov	DWORD PTR [edx], 0
; Line 77
	pop	ebp
	ret	0
_SocketBuffer_newDefQ ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_initialize
EXTRN	_StackTrace_exit:PROC
EXTRN	_ListZero:PROC
EXTRN	_ListInitialize:PROC
EXTRN	_StackTrace_entry:PROC
_BSS	SEGMENT
_writes	DB	014H DUP (?)
_queues	DD	01H DUP (?)
; Function compile flags: /Odtp
_BSS	ENDS
_TEXT	SEGMENT
_SocketBuffer_initialize PROC
; Line 84
	push	ebp
	mov	ebp, esp
; Line 85
	push	3
	push	85					; 00000055H
	push	OFFSET $SG82726
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 86
	call	_SocketBuffer_newDefQ
; Line 87
	call	_ListInitialize
	mov	DWORD PTR _queues, eax
; Line 88
	push	OFFSET _writes
	call	_ListZero
	add	esp, 4
; Line 89
	push	3
	push	0
	push	89					; 00000059H
	push	OFFSET $SG82728
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 90
	pop	ebp
	ret	0
_SocketBuffer_initialize ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_freeDefQ
EXTRN	_myfree:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_SocketBuffer_freeDefQ PROC
; Line 97
	push	ebp
	mov	ebp, esp
; Line 98
	mov	eax, DWORD PTR _def_queue
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	push	98					; 00000062H
	push	OFFSET $SG82732
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 99
	mov	edx, DWORD PTR _def_queue
	push	edx
	push	99					; 00000063H
	push	OFFSET $SG82733
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 100
	pop	ebp
	ret	0
_SocketBuffer_freeDefQ ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_terminate
EXTRN	_ListFree:PROC
EXTRN	_ListNextElement:PROC
EXTRN	_ListEmpty:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_cur$ = -4						; size = 4
_SocketBuffer_terminate PROC
; Line 107
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 108
	mov	DWORD PTR _cur$[ebp], 0
; Line 109
	push	OFFSET _writes
	call	_ListEmpty
	add	esp, 4
; Line 111
	push	3
	push	111					; 0000006fH
	push	OFFSET $SG82738
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
$LN2@SocketBuff:
; Line 112
	lea	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _queues
	push	ecx
	call	_ListNextElement
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@SocketBuff
; Line 113
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	push	113					; 00000071H
	push	OFFSET $SG82743
	call	_myfree
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@SocketBuff
$LN1@SocketBuff:
; Line 114
	mov	edx, DWORD PTR _queues
	push	edx
	call	_ListFree
	add	esp, 4
; Line 115
	call	_SocketBuffer_freeDefQ
; Line 116
	push	3
	push	0
	push	116					; 00000074H
	push	OFFSET $SG82745
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 117
	mov	esp, ebp
	pop	ebp
	ret	0
_SocketBuffer_terminate ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_cleanup
EXTRN	_ListRemove:PROC
EXTRN	_ListFindItem:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_socket$ = 8						; size = 4
_SocketBuffer_cleanup PROC
; Line 125
	push	ebp
	mov	ebp, esp
; Line 126
	push	3
	push	126					; 0000007eH
	push	OFFSET $SG82749
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 127
	push	OFFSET _socketcompare
	lea	eax, DWORD PTR _socket$[ebp]
	push	eax
	mov	ecx, DWORD PTR _queues
	push	ecx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@SocketBuff@2
; Line 129
	mov	edx, DWORD PTR _queues
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	push	129					; 00000081H
	push	OFFSET $SG82752
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 130
	mov	eax, DWORD PTR _queues
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _queues
	push	eax
	call	_ListRemove
	add	esp, 8
$LN2@SocketBuff@2:
; Line 132
	mov	ecx, DWORD PTR _def_queue
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _socket$[ebp]
	jne	SHORT $LN1@SocketBuff@2
; Line 133
	mov	eax, DWORD PTR _def_queue
	mov	DWORD PTR [eax+24], 0
	mov	ecx, DWORD PTR _def_queue
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _def_queue
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _def_queue
	mov	DWORD PTR [eax], 0
$LN1@SocketBuff@2:
; Line 134
	push	3
	push	0
	push	134					; 00000086H
	push	OFFSET $SG82755
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 135
	pop	ebp
	ret	0
_SocketBuffer_cleanup ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_getQueuedData
EXTRN	_myrealloc:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_newmem$82771 = -8					; size = 4
_queue$ = -4						; size = 4
_socket$ = 8						; size = 4
_bytes$ = 12						; size = 4
_actual_len$ = 16					; size = 4
_SocketBuffer_getQueuedData PROC
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 147
	mov	DWORD PTR _queue$[ebp], 0
; Line 149
	push	3
	push	149					; 00000095H
	push	OFFSET $SG82765
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 150
	push	OFFSET _socketcompare
	lea	eax, DWORD PTR _socket$[ebp]
	push	eax
	mov	ecx, DWORD PTR _queues
	push	ecx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@SocketBuff@3
; Line 152
	mov	edx, DWORD PTR _queues
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _queue$[ebp], ecx
; Line 153
	mov	edx, DWORD PTR _actual_len$[ebp]
	mov	eax, DWORD PTR _queue$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx], ecx
; Line 155
	jmp	SHORT $LN4@SocketBuff@3
$LN5@SocketBuff@3:
; Line 157
	mov	edx, DWORD PTR _actual_len$[ebp]
	mov	DWORD PTR [edx], 0
; Line 158
	mov	eax, DWORD PTR _def_queue
	mov	DWORD PTR _queue$[ebp], eax
$LN4@SocketBuff@3:
; Line 160
	mov	ecx, DWORD PTR _queue$[ebp]
	mov	edx, DWORD PTR _bytes$[ebp]
	cmp	edx, DWORD PTR [ecx+20]
	jle	$LN3@SocketBuff@3
; Line 162
	mov	eax, DWORD PTR _queue$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jle	SHORT $LN2@SocketBuff@3
; Line 164
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	push	164					; 000000a4H
	push	OFFSET $SG82772
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newmem$82771[ebp], eax
; Line 165
	mov	edx, DWORD PTR _queue$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _queue$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _newmem$82771[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 166
	mov	ecx, DWORD PTR _queue$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	push	166					; 000000a6H
	push	OFFSET $SG82773
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 167
	mov	eax, DWORD PTR _queue$[ebp]
	mov	ecx, DWORD PTR _newmem$82771[ebp]
	mov	DWORD PTR [eax+28], ecx
; Line 169
	jmp	SHORT $LN1@SocketBuff@3
$LN2@SocketBuff@3:
; Line 170
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _queue$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	push	170					; 000000aaH
	push	OFFSET $SG82775
	call	_myrealloc
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _queue$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN1@SocketBuff@3:
; Line 171
	mov	eax, DWORD PTR _queue$[ebp]
	mov	ecx, DWORD PTR _bytes$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN3@SocketBuff@3:
; Line 174
	push	3
	push	0
	push	174					; 000000aeH
	push	OFFSET $SG82777
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 175
	mov	edx, DWORD PTR _queue$[ebp]
	mov	eax, DWORD PTR [edx+28]
; Line 176
	mov	esp, ebp
	pop	ebp
	ret	0
_SocketBuffer_getQueuedData ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_getQueuedChar
EXTRN	_Log:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_queue$82786 = -8					; size = 4
_rc$ = -4						; size = 4
_socket$ = 8						; size = 4
_c$ = 12						; size = 4
_SocketBuffer_getQueuedChar PROC
; Line 186
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 187
	mov	DWORD PTR _rc$[ebp], -22		; ffffffeaH
; Line 189
	push	3
	push	189					; 000000bdH
	push	OFFSET $SG82784
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 190
	push	OFFSET _socketcompare
	lea	eax, DWORD PTR _socket$[ebp]
	push	eax
	mov	ecx, DWORD PTR _queues
	push	ecx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$exit$82790
; Line 192
	mov	edx, DWORD PTR _queues
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _queue$82786[ebp], ecx
; Line 193
	mov	edx, DWORD PTR _queue$82786[ebp]
	mov	eax, DWORD PTR _queue$82786[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+8]
	jge	SHORT $LN3@SocketBuff@4
; Line 195
	mov	edx, DWORD PTR _queue$82786[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _queue$82786[ebp]
	mov	al, BYTE PTR [edx+eax+12]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _queue$82786[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _queue$82786[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 196
	mov	ecx, DWORD PTR _queue$82786[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _queue$82786[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET $SG82789
	push	-1
	push	1
	call	_Log
	add	esp, 20					; 00000014H
; Line 197
	mov	DWORD PTR _rc$[ebp], 0
; Line 198
	jmp	SHORT $exit$82790
	jmp	SHORT $exit$82790
$LN3@SocketBuff@4:
; Line 200
	mov	edx, DWORD PTR _queue$82786[ebp]
	cmp	DWORD PTR [edx+4], 4
	jle	SHORT $exit$82790
; Line 202
	push	OFFSET $SG82793
	push	-1
	push	7
	call	_Log
	add	esp, 12					; 0000000cH
; Line 203
	mov	DWORD PTR _rc$[ebp], -1
$exit$82790:
; Line 208
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	208					; 000000d0H
	push	OFFSET $SG82794
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 209
	mov	eax, DWORD PTR _rc$[ebp]
; Line 210
	mov	esp, ebp
	pop	ebp
	ret	0
_SocketBuffer_getQueuedChar ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_interrupted
EXTRN	_ListAppend:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_queue$ = -4						; size = 4
_socket$ = 8						; size = 4
_actual_len$ = 12					; size = 4
_SocketBuffer_interrupted PROC
; Line 219
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 220
	mov	DWORD PTR _queue$[ebp], 0
; Line 222
	push	3
	push	222					; 000000deH
	push	OFFSET $SG82802
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 223
	push	OFFSET _socketcompare
	lea	eax, DWORD PTR _socket$[ebp]
	push	eax
	mov	ecx, DWORD PTR _queues
	push	ecx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@SocketBuff@5
; Line 224
	mov	edx, DWORD PTR _queues
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _queue$[ebp], ecx
; Line 225
	jmp	SHORT $LN1@SocketBuff@5
$LN2@SocketBuff@5:
; Line 227
	mov	edx, DWORD PTR _def_queue
	mov	DWORD PTR _queue$[ebp], edx
; Line 228
	mov	eax, DWORD PTR _def_queue
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _def_queue
	push	edx
	mov	eax, DWORD PTR _queues
	push	eax
	call	_ListAppend
	add	esp, 12					; 0000000cH
; Line 229
	call	_SocketBuffer_newDefQ
$LN1@SocketBuff@5:
; Line 231
	mov	ecx, DWORD PTR _queue$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 232
	mov	edx, DWORD PTR _queue$[ebp]
	mov	eax, DWORD PTR _actual_len$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 233
	push	3
	push	0
	push	233					; 000000e9H
	push	OFFSET $SG82808
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 234
	mov	esp, ebp
	pop	ebp
	ret	0
_SocketBuffer_interrupted ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_complete
EXTRN	_ListDetach:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_queue$82814 = -4					; size = 4
_socket$ = 8						; size = 4
_SocketBuffer_complete PROC
; Line 243
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 244
	push	3
	push	244					; 000000f4H
	push	OFFSET $SG82812
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 245
	push	OFFSET _socketcompare
	lea	eax, DWORD PTR _socket$[ebp]
	push	eax
	mov	ecx, DWORD PTR _queues
	push	ecx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@SocketBuff@6
; Line 247
	mov	edx, DWORD PTR _queues
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _queue$82814[ebp], ecx
; Line 248
	call	_SocketBuffer_freeDefQ
; Line 249
	mov	edx, DWORD PTR _queue$82814[ebp]
	mov	DWORD PTR _def_queue, edx
; Line 250
	mov	eax, DWORD PTR _queue$82814[ebp]
	push	eax
	mov	ecx, DWORD PTR _queues
	push	ecx
	call	_ListDetach
	add	esp, 8
$LN1@SocketBuff@6:
; Line 252
	mov	edx, DWORD PTR _def_queue
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _def_queue
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _def_queue
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _def_queue
	mov	DWORD PTR [edx], 0
; Line 253
	push	3
	push	0
	push	253					; 000000fdH
	push	OFFSET $SG82817
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 254
	mov	eax, DWORD PTR _def_queue
	mov	eax, DWORD PTR [eax+28]
; Line 255
	mov	esp, ebp
	pop	ebp
	ret	0
_SocketBuffer_complete ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_queueChar
; Function compile flags: /Odtp
_TEXT	SEGMENT
_error$ = -8						; size = 4
_curq$ = -4						; size = 4
_socket$ = 8						; size = 4
_c$ = 12						; size = 1
_SocketBuffer_queueChar PROC
; Line 264
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 265
	mov	DWORD PTR _error$[ebp], 0
; Line 266
	mov	eax, DWORD PTR _def_queue
	mov	DWORD PTR _curq$[ebp], eax
; Line 268
	push	3
	push	268					; 0000010cH
	push	OFFSET $SG82825
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 269
	push	OFFSET _socketcompare
	lea	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	mov	edx, DWORD PTR _queues
	push	edx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN7@SocketBuff@7
; Line 270
	mov	eax, DWORD PTR _queues
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _curq$[ebp], edx
	jmp	SHORT $LN6@SocketBuff@7
$LN7@SocketBuff@7:
; Line 271
	mov	eax, DWORD PTR _def_queue
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@SocketBuff@7
; Line 273
	mov	ecx, DWORD PTR _def_queue
	mov	edx, DWORD PTR _socket$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 274
	mov	eax, DWORD PTR _def_queue
	mov	DWORD PTR [eax+24], 0
	mov	ecx, DWORD PTR _def_queue
	mov	DWORD PTR [ecx+4], 0
	jmp	SHORT $LN6@SocketBuff@7
$LN5@SocketBuff@7:
; Line 276
	mov	edx, DWORD PTR _def_queue
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _socket$[ebp]
	je	SHORT $LN6@SocketBuff@7
; Line 278
	push	OFFSET $SG82832
	push	-1
	push	7
	call	_Log
	add	esp, 12					; 0000000cH
; Line 279
	mov	DWORD PTR _error$[ebp], 1
$LN6@SocketBuff@7:
; Line 281
	mov	ecx, DWORD PTR _curq$[ebp]
	cmp	DWORD PTR [ecx+4], 4
	jle	SHORT $LN2@SocketBuff@7
; Line 283
	push	OFFSET $SG82834
	push	-1
	push	7
	call	_Log
	add	esp, 12					; 0000000cH
; Line 284
	mov	DWORD PTR _error$[ebp], 1
$LN2@SocketBuff@7:
; Line 286
	cmp	DWORD PTR _error$[ebp], 0
	jne	SHORT $LN1@SocketBuff@7
; Line 288
	mov	edx, DWORD PTR _curq$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _curq$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx+eax+12], dl
	mov	eax, DWORD PTR _curq$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _curq$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 289
	mov	eax, DWORD PTR _curq$[ebp]
	mov	ecx, DWORD PTR _curq$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN1@SocketBuff@7:
; Line 291
	mov	eax, DWORD PTR _curq$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _curq$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	OFFSET $SG82836
	push	-1
	push	1
	call	_Log
	add	esp, 20					; 00000014H
; Line 292
	push	3
	push	0
	push	292					; 00000124H
	push	OFFSET $SG82838
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 293
	mov	esp, ebp
	pop	ebp
	ret	0
_SocketBuffer_queueChar ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_pendingWrite
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pw$ = -8						; size = 4
_i$ = -4						; size = 4
_socket$ = 8						; size = 4
_count$ = 12						; size = 4
_iovecs$ = 16						; size = 4
_frees$ = 20						; size = 4
_total$ = 24						; size = 4
_bytes$ = 28						; size = 4
_SocketBuffer_pendingWrite PROC
; Line 309
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
; Line 310
	mov	DWORD PTR _i$[ebp], 0
; Line 311
	mov	DWORD PTR _pw$[ebp], 0
; Line 313
	push	3
	push	313					; 00000139H
	push	OFFSET $SG82855
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 315
	push	76					; 0000004cH
	push	315					; 0000013bH
	push	OFFSET $SG82857
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pw$[ebp], eax
; Line 316
	mov	eax, DWORD PTR _pw$[ebp]
	mov	ecx, DWORD PTR _socket$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 320
	mov	edx, DWORD PTR _pw$[ebp]
	mov	eax, DWORD PTR _bytes$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 321
	mov	ecx, DWORD PTR _pw$[ebp]
	mov	edx, DWORD PTR _total$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 322
	mov	eax, DWORD PTR _pw$[ebp]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 323
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SocketBuff@8
$LN2@SocketBuff@8:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@SocketBuff@8:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jge	SHORT $LN1@SocketBuff@8
; Line 325
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _iovecs$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	mov	ecx, DWORD PTR [edx+ecx*8+4]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _pw$[ebp]
	mov	DWORD PTR [esi+edx*8+16], eax
	mov	DWORD PTR [esi+edx*8+20], ecx
; Line 326
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pw$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _frees$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4+56], edx
; Line 327
	jmp	SHORT $LN2@SocketBuff@8
$LN1@SocketBuff@8:
; Line 328
	mov	eax, DWORD PTR _total$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _pw$[ebp]
	push	ecx
	push	OFFSET _writes
	call	_ListAppend
	add	esp, 12					; 0000000cH
; Line 329
	push	3
	push	0
	push	329					; 00000149H
	push	OFFSET $SG82862
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 330
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_SocketBuffer_pendingWrite ENDP
_TEXT	ENDS
PUBLIC	_pending_socketcompare
; Function compile flags: /Odtp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_pending_socketcompare PROC
; Line 340
	push	ebp
	mov	ebp, esp
; Line 341
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx]
	sete	al
; Line 342
	pop	ebp
	ret	0
_pending_socketcompare ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_getWrite
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = -8						; size = 4
_le$ = -4						; size = 4
_socket$ = 8						; size = 4
_SocketBuffer_getWrite PROC
; Line 351
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 352
	push	OFFSET _pending_socketcompare
	lea	eax, DWORD PTR _socket$[ebp]
	push	eax
	push	OFFSET _writes
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _le$[ebp], eax
; Line 353
	cmp	DWORD PTR _le$[ebp], 0
	je	SHORT $LN3@SocketBuff@9
	mov	ecx, DWORD PTR _le$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@SocketBuff@9
$LN3@SocketBuff@9:
	mov	DWORD PTR tv70[ebp], 0
$LN4@SocketBuff@9:
	mov	eax, DWORD PTR tv70[ebp]
; Line 354
	mov	esp, ebp
	pop	ebp
	ret	0
_SocketBuffer_getWrite ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_writeComplete
EXTRN	_ListRemoveItem:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_socket$ = 8						; size = 4
_SocketBuffer_writeComplete PROC
; Line 363
	push	ebp
	mov	ebp, esp
; Line 364
	push	OFFSET _pending_socketcompare
	lea	eax, DWORD PTR _socket$[ebp]
	push	eax
	push	OFFSET _writes
	call	_ListRemoveItem
	add	esp, 12					; 0000000cH
; Line 365
	pop	ebp
	ret	0
_SocketBuffer_writeComplete ENDP
_TEXT	ENDS
PUBLIC	_SocketBuffer_updateWrite
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pw$ = -8						; size = 4
_le$ = -4						; size = 4
_socket$ = 8						; size = 4
_topic$ = 12						; size = 4
_payload$ = 16						; size = 4
_SocketBuffer_updateWrite PROC
; Line 376
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 377
	mov	DWORD PTR _pw$[ebp], 0
; Line 378
	mov	DWORD PTR _le$[ebp], 0
; Line 380
	push	3
	push	380					; 0000017cH
	push	OFFSET $SG82891
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 381
	push	OFFSET _pending_socketcompare
	lea	eax, DWORD PTR _socket$[ebp]
	push	eax
	push	OFFSET _writes
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _le$[ebp], eax
	cmp	DWORD PTR _le$[ebp], 0
	je	SHORT $LN2@SocketBuff@10
; Line 383
	mov	ecx, DWORD PTR _le$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pw$[ebp], edx
; Line 384
	mov	eax, DWORD PTR _pw$[ebp]
	cmp	DWORD PTR [eax+8], 4
	jne	SHORT $LN2@SocketBuff@10
; Line 386
	mov	ecx, DWORD PTR _pw$[ebp]
	mov	edx, DWORD PTR _topic$[ebp]
	mov	DWORD PTR [ecx+36], edx
; Line 387
	mov	eax, DWORD PTR _pw$[ebp]
	mov	ecx, DWORD PTR _payload$[ebp]
	mov	DWORD PTR [eax+44], ecx
$LN2@SocketBuff@10:
; Line 391
	push	3
	push	0
	push	391					; 00000187H
	push	OFFSET $SG82897
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 392
	mov	eax, DWORD PTR _pw$[ebp]
; Line 393
	mov	esp, ebp
	pop	ebp
	ret	0
_SocketBuffer_updateWrite ENDP
_TEXT	ENDS
END
