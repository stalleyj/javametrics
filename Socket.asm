; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspaces\newagent2\Paho\org.eclipse.paho.mqtt.c\src\Socket.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_s:BYTE:0320H
COMM	_Log_levels:DWORD
_DATA	ENDS
_BSS	SEGMENT
?zero@?1??Socket_getReadySocket@@9@9 DQ 01H DUP (?)	; `Socket_getReadySocket'::`2'::zero
_writecomplete DD 01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG83494 DB	'Socket_setnonblocking', 00H
	ORG $+2
$SG83497 DB	'Socket_setnonblocking', 00H
	ORG $+2
$SG83505 DB	'Socket_error', 00H
	ORG $+3
$SG83509 DB	'shutdown', 00H
	ORG $+3
$SG83510 DB	'Socket error %s in %s for socket %d', 00H
$SG83511 DB	'Socket_error', 00H
	ORG $+3
$SG83515 DB	'Socket_outInitialize', 00H
	ORG $+3
$SG83522 DB	'Socket_outInitialize', 00H
	ORG $+3
$SG83524 DB	'Socket_outTerminate', 00H
$SG83526 DB	'Socket_outTerminate', 00H
$SG83532 DB	'Socket_addSocket', 00H
	ORG $+3
$SG83537 DB	'../Paho/org.eclipse.paho.mqtt.c/src/Socket.c', 00H
	ORG $+3
$SG83555 DB	'addSocket: socket %d already in the list', 00H
	ORG $+3
$SG83556 DB	'Socket_addSocket', 00H
	ORG $+3
$SG83566 DB	'isReady', 00H
$SG83575 DB	'isReady', 00H
?one@?1??Socket_getReadySocket@@9@9 DD 01H		; `Socket_getReadySocket'::`2'::one
	DD	00H
$SG83587 DB	'Socket_getReadySocket', 00H
	ORG $+2
$SG83609 DB	'read select', 00H
$SG83610 DB	'Return code %d from read select', 00H
$SG83617 DB	'write select', 00H
	ORG $+3
$SG83618 DB	'Return code %d from write select', 00H
	ORG $+3
$SG83631 DB	'Socket_getReadySocket', 00H
	ORG $+2
$SG83638 DB	'Socket_getch', 00H
	ORG $+3
$SG83644 DB	'recv - getch', 00H
	ORG $+3
$SG83651 DB	'Socket_getch', 00H
	ORG $+3
$SG83661 DB	'Socket_getdata', 00H
	ORG $+1
$SG83666 DB	'recv - getdata', 00H
	ORG $+1
$SG83675 DB	'%d bytes expected but %d bytes now received', 00H
$SG83677 DB	'Socket_getdata', 00H
	ORG $+1
$SG83694 DB	'Socket_writev', 00H
	ORG $+2
$SG83700 DB	'WSASend - putdatas', 00H
	ORG $+1
$SG83703 DB	'Socket_writev', 00H
	ORG $+2
$SG83725 DB	'Socket_putdatas', 00H
	ORG $+4
$SG83727 DB	'Trying to write to socket %d for which there is already '
	DB	'pending output', 00H
	ORG $+1
$SG83741 DB	'../Paho/org.eclipse.paho.mqtt.c/src/Socket.c', 00H
	ORG $+3
$SG83742 DB	'Partial write: %ld bytes of %d actually written on socke'
	DB	't %d', 00H
	ORG $+3
$SG83760 DB	'Socket_putdatas', 00H
$SG83807 DB	'Socket_close_only', 00H
	ORG $+2
$SG83809 DB	'shutdown', 00H
	ORG $+3
$SG83811 DB	'close', 00H
	ORG $+2
$SG83812 DB	'Socket_close_only', 00H
	ORG $+2
$SG83816 DB	'Socket_close', 00H
	ORG $+3
$SG83858 DB	'Removed socket %d', 00H
	ORG $+2
$SG83860 DB	'Failed to remove socket %d', 00H
	ORG $+1
$SG83869 DB	'Reset max fdp1 to %d', 00H
	ORG $+3
$SG83871 DB	'Socket_close', 00H
	ORG $+3
$SG83890 DB	'Socket_new', 00H
	ORG $+1
$SG83909 DB	'getaddrinfo failed for addr %s with rc %d', 00H
	ORG $+2
$SG83911 DB	'%s is not a valid IP address', 00H
	ORG $+3
$SG83915 DB	'socket', 00H
	ORG $+1
$SG83917 DB	'New socket %d for %s, port %d', 00H
	ORG $+2
$SG83919 DB	'setnonblocking', 00H
	ORG $+1
$SG83926 DB	'connect', 00H
$SG83932 DB	'../Paho/org.eclipse.paho.mqtt.c/src/Socket.c', 00H
	ORG $+3
$SG83934 DB	'Connect pending', 00H
$SG83935 DB	'Socket_new', 00H
	ORG $+1
$SG83952 DB	'Socket_continueWrite', 00H
	ORG $+3
$SG83966 DB	'../Paho/org.eclipse.paho.mqtt.c/src/Socket.c', 00H
	ORG $+3
$SG83967 DB	'ContinueWrite: partial write now complete for socket %d', 00H
$SG83969 DB	'ContinueWrite wrote +%lu bytes on socket %d', 00H
$SG83970 DB	'Socket_continueWrite', 00H
	ORG $+3
$SG83976 DB	'Socket_continueWrites', 00H
	ORG $+2
$SG83986 DB	'Failed to remove pending write from socket buffer list', 00H
	ORG $+1
$SG84005 DB	'Failed to remove pending write from list', 00H
	ORG $+3
$SG84008 DB	'Socket_continueWrites', 00H
	ORG $+2
$SG84023 DB	'WSAAddressToString', 00H
	ORG $+1
$SG84033 DB	'getpeername', 00H
$SG84034 DB	'unknown', 00H
_DATA	ENDS
PUBLIC	_Socket_setnonblocking
EXTRN	_StackTrace_exit:PROC
EXTRN	__imp__ioctlsocket@12:PROC
EXTRN	_StackTrace_entry:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_flag$ = -8						; size = 4
_rc$ = -4						; size = 4
_sock$ = 8						; size = 4
_Socket_setnonblocking PROC
; File c:\workspaces\newagent2\paho\org.eclipse.paho.mqtt.c\src\socket.c
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 65
	mov	DWORD PTR _flag$[ebp], 1
; Line 67
	push	3
	push	67					; 00000043H
	push	OFFSET $SG83494
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 68
	lea	eax, DWORD PTR _flag$[ebp]
	push	eax
	push	-2147195266				; 8004667eH
	mov	ecx, DWORD PTR _sock$[ebp]
	push	ecx
	call	DWORD PTR __imp__ioctlsocket@12
	mov	DWORD PTR _rc$[ebp], eax
; Line 77
	push	3
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	push	77					; 0000004dH
	push	OFFSET $SG83497
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 78
	mov	eax, DWORD PTR _rc$[ebp]
; Line 79
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_setnonblocking ENDP
_TEXT	ENDS
PUBLIC	_Socket_error
EXTRN	_Log:PROC
EXTRN	__imp__strerror:PROC
EXTRN	_strcmp:PROC
EXTRN	__imp___errno:PROC
EXTRN	__imp__WSAGetLastError@0:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aString$ = 8						; size = 4
_sock$ = 12						; size = 4
_Socket_error PROC
; Line 89
	push	ebp
	mov	ebp, esp
	push	esi
; Line 94
	push	3
	push	94					; 0000005eH
	push	OFFSET $SG83505
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 96
	call	DWORD PTR __imp__WSAGetLastError@0
	mov	esi, eax
	call	DWORD PTR __imp___errno
	mov	DWORD PTR [eax], esi
; Line 98
	call	DWORD PTR __imp___errno
	cmp	DWORD PTR [eax], 10004			; 00002714H
	je	$LN3@Socket_err
	call	DWORD PTR __imp___errno
	cmp	DWORD PTR [eax], 10035			; 00002733H
	je	SHORT $LN3@Socket_err
	call	DWORD PTR __imp___errno
	cmp	DWORD PTR [eax], 10036			; 00002734H
	je	SHORT $LN3@Socket_err
	call	DWORD PTR __imp___errno
	cmp	DWORD PTR [eax], 10035			; 00002733H
	je	SHORT $LN3@Socket_err
; Line 100
	push	OFFSET $SG83509
	mov	eax, DWORD PTR _aString$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@Socket_err
	call	DWORD PTR __imp___errno
	cmp	DWORD PTR [eax], 10057			; 00002749H
	je	SHORT $LN3@Socket_err
	call	DWORD PTR __imp___errno
	cmp	DWORD PTR [eax], 10054			; 00002746H
	je	SHORT $LN3@Socket_err
$LN1@Socket_err:
; Line 101
	mov	ecx, DWORD PTR _sock$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aString$[ebp]
	push	edx
	call	DWORD PTR __imp___errno
	mov	eax, DWORD PTR [eax]
	push	eax
	call	DWORD PTR __imp__strerror
	add	esp, 4
	push	eax
	push	OFFSET $SG83510
	push	-1
	push	3
	call	_Log
	add	esp, 24					; 00000018H
$LN3@Socket_err:
; Line 103
	push	3
	call	DWORD PTR __imp___errno
	push	eax
	push	103					; 00000067H
	push	OFFSET $SG83511
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 104
	call	DWORD PTR __imp___errno
	mov	eax, DWORD PTR [eax]
; Line 105
	pop	esi
	pop	ebp
	ret	0
_Socket_error ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Socket_outInitialize
EXTRN	_memcpy:PROC
EXTRN	_ListInitialize:PROC
EXTRN	_SocketBuffer_initialize:PROC
EXTRN	__imp__WSAStartup@8:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_wsd$ = -408						; size = 400
__$ArrayPad$ = -8					; size = 4
_winsockVer$ = -4					; size = 2
_Socket_outInitialize PROC
; Line 112
	push	ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 114
	mov	eax, 514				; 00000202H
	mov	WORD PTR _winsockVer$[ebp], ax
; Line 117
	push	3
	push	117					; 00000075H
	push	OFFSET $SG83515
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 118
	lea	ecx, DWORD PTR _wsd$[ebp]
	push	ecx
	movzx	edx, WORD PTR _winsockVer$[ebp]
	push	edx
	call	DWORD PTR __imp__WSAStartup@8
; Line 124
	call	_SocketBuffer_initialize
; Line 125
	call	_ListInitialize
	mov	DWORD PTR _s+524, eax
; Line 126
	call	_ListInitialize
	mov	DWORD PTR _s+532, eax
; Line 127
	call	_ListInitialize
	mov	DWORD PTR _s+536, eax
; Line 128
	mov	DWORD PTR _s+528, 0
; Line 129
	mov	DWORD PTR _s, 0
; Line 130
	mov	DWORD PTR _s+540, 0
; Line 131
	mov	DWORD PTR _s+520, 0
; Line 132
	push	260					; 00000104H
	push	OFFSET _s
	push	OFFSET _s+260
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 133
	push	3
	push	0
	push	133					; 00000085H
	push	OFFSET $SG83522
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 134
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_outInitialize ENDP
_TEXT	ENDS
PUBLIC	_Socket_outTerminate
EXTRN	__imp__WSACleanup@0:PROC
EXTRN	_SocketBuffer_terminate:PROC
EXTRN	_ListFree:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Socket_outTerminate PROC
; Line 141
	push	ebp
	mov	ebp, esp
; Line 142
	push	3
	push	142					; 0000008eH
	push	OFFSET $SG83524
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 143
	mov	eax, DWORD PTR _s+532
	push	eax
	call	_ListFree
	add	esp, 4
; Line 144
	mov	ecx, DWORD PTR _s+536
	push	ecx
	call	_ListFree
	add	esp, 4
; Line 145
	mov	edx, DWORD PTR _s+524
	push	edx
	call	_ListFree
	add	esp, 4
; Line 146
	call	_SocketBuffer_terminate
; Line 148
	call	DWORD PTR __imp__WSACleanup@0
; Line 150
	push	3
	push	0
	push	150					; 00000096H
	push	OFFSET $SG83526
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 151
	pop	ebp
	ret	0
_Socket_outTerminate ENDP
_TEXT	ENDS
PUBLIC	_Socket_addSocket
EXTRN	_ListAppend:PROC
EXTRN	_mymalloc:PROC
EXTRN	_ListFindItem:PROC
EXTRN	_intcompare:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv93 = -16						; size = 4
___i$83541 = -12					; size = 4
_pnewSd$83535 = -8					; size = 4
_rc$ = -4						; size = 4
_newSd$ = 8						; size = 4
_Socket_addSocket PROC
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 160
	mov	DWORD PTR _rc$[ebp], 0
; Line 162
	push	3
	push	162					; 000000a2H
	push	OFFSET $SG83532
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 163
	push	OFFSET _intcompare
	lea	eax, DWORD PTR _newSd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s+524
	push	ecx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN11@Socket_add
; Line 165
	push	4
	push	165					; 000000a5H
	push	OFFSET $SG83537
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pnewSd$83535[ebp], eax
; Line 166
	mov	edx, DWORD PTR _pnewSd$83535[ebp]
	mov	eax, DWORD PTR _newSd$[ebp]
	mov	DWORD PTR [edx], eax
; Line 167
	push	4
	mov	ecx, DWORD PTR _pnewSd$83535[ebp]
	push	ecx
	mov	edx, DWORD PTR _s+524
	push	edx
	call	_ListAppend
	add	esp, 12					; 0000000cH
$LN10@Socket_add:
; Line 168
	mov	DWORD PTR ___i$83541[ebp], 0
	jmp	SHORT $LN7@Socket_add
$LN6@Socket_add:
	mov	eax, DWORD PTR ___i$83541[ebp]
	add	eax, 1
	mov	DWORD PTR ___i$83541[ebp], eax
$LN7@Socket_add:
	mov	ecx, DWORD PTR ___i$83541[ebp]
	cmp	ecx, DWORD PTR _s+260
	jae	SHORT $LN5@Socket_add
	mov	edx, DWORD PTR ___i$83541[ebp]
	mov	eax, DWORD PTR _s[edx*4+264]
	cmp	eax, DWORD PTR _newSd$[ebp]
	jne	SHORT $LN4@Socket_add
	jmp	SHORT $LN5@Socket_add
$LN4@Socket_add:
	jmp	SHORT $LN6@Socket_add
$LN5@Socket_add:
	mov	ecx, DWORD PTR ___i$83541[ebp]
	cmp	ecx, DWORD PTR _s+260
	jne	SHORT $LN9@Socket_add
	cmp	DWORD PTR _s+260, 64			; 00000040H
	jae	SHORT $LN9@Socket_add
	mov	edx, DWORD PTR ___i$83541[ebp]
	mov	eax, DWORD PTR _newSd$[ebp]
	mov	DWORD PTR _s[edx*4+264], eax
	mov	ecx, DWORD PTR _s+260
	add	ecx, 1
	mov	DWORD PTR _s+260, ecx
$LN9@Socket_add:
	xor	edx, edx
	jne	SHORT $LN10@Socket_add
; Line 169
	mov	eax, DWORD PTR _newSd$[ebp]
	add	eax, 1
	cmp	DWORD PTR _s+520, eax
	jle	SHORT $LN14@Socket_add
	mov	ecx, DWORD PTR _s+520
	mov	DWORD PTR tv93[ebp], ecx
	jmp	SHORT $LN15@Socket_add
$LN14@Socket_add:
	mov	edx, DWORD PTR _newSd$[ebp]
	add	edx, 1
	mov	DWORD PTR tv93[ebp], edx
$LN15@Socket_add:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR _s+520, eax
; Line 170
	mov	ecx, DWORD PTR _newSd$[ebp]
	push	ecx
	call	_Socket_setnonblocking
	add	esp, 4
	mov	DWORD PTR _rc$[ebp], eax
; Line 172
	jmp	SHORT $LN1@Socket_add
$LN11@Socket_add:
; Line 173
	mov	edx, DWORD PTR _newSd$[ebp]
	push	edx
	push	OFFSET $SG83555
	push	-1
	push	5
	call	_Log
	add	esp, 16					; 00000010H
$LN1@Socket_add:
; Line 175
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	175					; 000000afH
	push	OFFSET $SG83556
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 176
	mov	eax, DWORD PTR _rc$[ebp]
; Line 177
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_addSocket ENDP
_TEXT	ENDS
PUBLIC	_Socket_noPendingWrites
PUBLIC	_isReady
EXTRN	_ListRemoveItem:PROC
EXTRN	___WSAFDIsSet@8:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv90 = -8						; size = 4
_rc$ = -4						; size = 4
_socket$ = 8						; size = 4
_read_set$ = 12						; size = 4
_write_set$ = 16					; size = 4
_isReady PROC
; Line 189
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 190
	mov	DWORD PTR _rc$[ebp], 1
; Line 192
	push	3
	push	192					; 000000c0H
	push	OFFSET $SG83566
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 193
	push	OFFSET _intcompare
	lea	eax, DWORD PTR _socket$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s+532
	push	ecx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN2@isReady
	mov	edx, DWORD PTR _write_set$[ebp]
	push	edx
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	___WSAFDIsSet@8
	test	eax, eax
	je	SHORT $LN2@isReady
; Line 194
	push	OFFSET _intcompare
	lea	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s+532
	push	edx
	call	_ListRemoveItem
	add	esp, 12					; 0000000cH
; Line 195
	jmp	SHORT $LN1@isReady
$LN2@isReady:
; Line 196
	mov	eax, DWORD PTR _read_set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	call	___WSAFDIsSet@8
	test	eax, eax
	je	SHORT $LN5@isReady
	mov	edx, DWORD PTR _write_set$[ebp]
	push	edx
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	___WSAFDIsSet@8
	test	eax, eax
	je	SHORT $LN5@isReady
	mov	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	call	_Socket_noPendingWrites
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@isReady
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN6@isReady
$LN5@isReady:
	mov	DWORD PTR tv90[ebp], 0
$LN6@isReady:
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _rc$[ebp], edx
$LN1@isReady:
; Line 197
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	197					; 000000c5H
	push	OFFSET $SG83575
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 198
	mov	eax, DWORD PTR _rc$[ebp]
; Line 199
	mov	esp, ebp
	pop	ebp
	ret	0
_isReady ENDP
_TEXT	ENDS
PUBLIC	_Socket_continueWrites
PUBLIC	__$ArrayPad$
PUBLIC	_Socket_getReadySocket
EXTRN	__imp__select@20:PROC
EXTRN	_ListNextElement:PROC
_BSS	SEGMENT
_wset	DB	0104H DUP (?)
; Function compile flags: /Odtp
_BSS	ENDS
_TEXT	SEGMENT
_cursock$83624 = -292					; size = 4
_pwset$83602 = -288					; size = 260
__$ArrayPad$ = -20					; size = 4
_rc1$83601 = -16					; size = 4
_timeout$ = -12						; size = 8
_rc$ = -4						; size = 4
_more_work$ = 8						; size = 4
_tp$ = 12						; size = 4
_Socket_getReadySocket PROC
; Line 210
	push	ebp
	mov	ebp, esp
	sub	esp, 292				; 00000124H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 211
	mov	DWORD PTR _rc$[ebp], 0
; Line 214
	mov	eax, DWORD PTR ?one@?1??Socket_getReadySocket@@9@9
	mov	DWORD PTR _timeout$[ebp], eax
	mov	ecx, DWORD PTR ?one@?1??Socket_getReadySocket@@9@9+4
	mov	DWORD PTR _timeout$[ebp+4], ecx
; Line 216
	push	3
	push	216					; 000000d8H
	push	OFFSET $SG83587
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 217
	mov	edx, DWORD PTR _s+524
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN17@Socket_get
; Line 218
	jmp	$exit$83589
$LN17@Socket_get:
; Line 220
	cmp	DWORD PTR _more_work$[ebp], 0
	je	SHORT $LN16@Socket_get
; Line 221
	mov	eax, DWORD PTR ?zero@?1??Socket_getReadySocket@@9@9
	mov	DWORD PTR _timeout$[ebp], eax
	mov	ecx, DWORD PTR ?zero@?1??Socket_getReadySocket@@9@9+4
	mov	DWORD PTR _timeout$[ebp+4], ecx
	jmp	SHORT $LN13@Socket_get
$LN16@Socket_get:
; Line 222
	cmp	DWORD PTR _tp$[ebp], 0
	je	SHORT $LN13@Socket_get
; Line 223
	mov	edx, DWORD PTR _tp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _timeout$[ebp], eax
	mov	DWORD PTR _timeout$[ebp+4], ecx
$LN13@Socket_get:
; Line 225
	cmp	DWORD PTR _s+528, 0
	je	SHORT $LN12@Socket_get
; Line 227
	push	OFFSET _wset
	push	OFFSET _s
	mov	edx, DWORD PTR _s+528
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_isReady
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN11@Socket_get
; Line 228
	jmp	SHORT $LN12@Socket_get
$LN11@Socket_get:
; Line 229
	push	OFFSET _s+528
	mov	edx, DWORD PTR _s+524
	push	edx
	call	_ListNextElement
	add	esp, 8
; Line 230
	jmp	SHORT $LN13@Socket_get
$LN12@Socket_get:
; Line 232
	cmp	DWORD PTR _s+528, 0
	jne	$LN10@Socket_get
; Line 237
	push	260					; 00000104H
	push	OFFSET _s+260
	push	OFFSET _s
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 238
	push	260					; 00000104H
	push	OFFSET _s+540
	lea	eax, DWORD PTR _pwset$83602[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 239
	lea	ecx, DWORD PTR _timeout$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _pwset$83602[ebp]
	push	edx
	push	OFFSET _s
	mov	eax, DWORD PTR _s+520
	push	eax
	call	DWORD PTR __imp__select@20
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], -1
	jne	SHORT $LN9@Socket_get
; Line 241
	push	0
	push	OFFSET $SG83609
	call	_Socket_error
	add	esp, 8
; Line 242
	jmp	$exit$83589
$LN9@Socket_get:
; Line 244
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	OFFSET $SG83610
	push	-1
	push	1
	call	_Log
	add	esp, 16					; 00000010H
; Line 246
	lea	edx, DWORD PTR _pwset$83602[ebp]
	push	edx
	call	_Socket_continueWrites
	add	esp, 4
	cmp	eax, -1
	jne	SHORT $LN8@Socket_get
; Line 248
	mov	DWORD PTR _rc$[ebp], 0
; Line 249
	jmp	$exit$83589
$LN8@Socket_get:
; Line 252
	push	260					; 00000104H
	push	OFFSET _s+260
	push	OFFSET _wset
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 253
	push	OFFSET ?zero@?1??Socket_getReadySocket@@9@9
	push	0
	push	OFFSET _wset
	push	0
	mov	eax, DWORD PTR _s+520
	push	eax
	call	DWORD PTR __imp__select@20
	mov	DWORD PTR _rc1$83601[ebp], eax
	cmp	DWORD PTR _rc1$83601[ebp], -1
	jne	SHORT $LN7@Socket_get
; Line 255
	push	0
	push	OFFSET $SG83617
	call	_Socket_error
	add	esp, 8
; Line 256
	mov	ecx, DWORD PTR _rc1$83601[ebp]
	mov	DWORD PTR _rc$[ebp], ecx
; Line 257
	jmp	$exit$83589
$LN7@Socket_get:
; Line 259
	mov	edx, DWORD PTR _rc1$83601[ebp]
	push	edx
	push	OFFSET $SG83618
	push	-1
	push	1
	call	_Log
	add	esp, 16					; 00000010H
; Line 261
	cmp	DWORD PTR _rc$[ebp], 0
	jne	SHORT $LN6@Socket_get
	cmp	DWORD PTR _rc1$83601[ebp], 0
	jne	SHORT $LN6@Socket_get
; Line 262
	jmp	$exit$83589
$LN6@Socket_get:
; Line 264
	mov	eax, DWORD PTR _s+524
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s+528, ecx
$LN5@Socket_get:
; Line 265
	cmp	DWORD PTR _s+528, 0
	je	SHORT $LN10@Socket_get
; Line 267
	mov	edx, DWORD PTR _s+528
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cursock$83624[ebp], ecx
; Line 268
	push	OFFSET _wset
	push	OFFSET _s
	mov	edx, DWORD PTR _cursock$83624[ebp]
	push	edx
	call	_isReady
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN3@Socket_get
; Line 269
	jmp	SHORT $LN10@Socket_get
$LN3@Socket_get:
; Line 270
	push	OFFSET _s+528
	mov	eax, DWORD PTR _s+524
	push	eax
	call	_ListNextElement
	add	esp, 8
; Line 271
	jmp	SHORT $LN5@Socket_get
$LN10@Socket_get:
; Line 274
	cmp	DWORD PTR _s+528, 0
	jne	SHORT $LN2@Socket_get
; Line 275
	mov	DWORD PTR _rc$[ebp], 0
; Line 276
	jmp	SHORT $exit$83589
$LN2@Socket_get:
; Line 278
	mov	ecx, DWORD PTR _s+528
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _rc$[ebp], eax
; Line 279
	push	OFFSET _s+528
	mov	ecx, DWORD PTR _s+524
	push	ecx
	call	_ListNextElement
	add	esp, 8
$exit$83589:
; Line 282
	push	3
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	push	282					; 0000011aH
	push	OFFSET $SG83631
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 283
	mov	eax, DWORD PTR _rc$[ebp]
; Line 284
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_getReadySocket ENDP
_TEXT	ENDS
PUBLIC	_Socket_getch
EXTRN	_SocketBuffer_queueChar:PROC
EXTRN	_SocketBuffer_interrupted:PROC
EXTRN	__imp__recv@16:PROC
EXTRN	_SocketBuffer_getQueuedChar:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_err$83643 = -8						; size = 4
_rc$ = -4						; size = 4
_socket$ = 8						; size = 4
_c$ = 12						; size = 4
_Socket_getch PROC
; Line 294
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 295
	mov	DWORD PTR _rc$[ebp], -1
; Line 297
	push	3
	push	297					; 00000129H
	push	OFFSET $SG83638
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 298
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	call	_SocketBuffer_getQueuedChar
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], -22		; ffffffeaH
	je	SHORT $LN8@Socket_get@2
; Line 299
	jmp	$exit$83640
$LN8@Socket_get@2:
; Line 301
	push	0
	push	1
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	DWORD PTR __imp__recv@16
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], -1
	jne	SHORT $LN7@Socket_get@2
; Line 303
	mov	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	push	OFFSET $SG83644
	call	_Socket_error
	add	esp, 8
	mov	DWORD PTR _err$83643[ebp], eax
; Line 304
	cmp	DWORD PTR _err$83643[ebp], 10035	; 00002733H
	je	SHORT $LN5@Socket_get@2
	cmp	DWORD PTR _err$83643[ebp], 10035	; 00002733H
	jne	SHORT $LN6@Socket_get@2
$LN5@Socket_get@2:
; Line 306
	mov	DWORD PTR _rc$[ebp], -22		; ffffffeaH
; Line 307
	push	0
	mov	edx, DWORD PTR _socket$[ebp]
	push	edx
	call	_SocketBuffer_interrupted
	add	esp, 8
$LN6@Socket_get@2:
; Line 308
	jmp	SHORT $exit$83640
$LN7@Socket_get@2:
; Line 310
	cmp	DWORD PTR _rc$[ebp], 0
	jne	SHORT $LN3@Socket_get@2
; Line 311
	mov	DWORD PTR _rc$[ebp], -1
	jmp	SHORT $exit$83640
$LN3@Socket_get@2:
; Line 312
	cmp	DWORD PTR _rc$[ebp], 1
	jne	SHORT $exit$83640
; Line 314
	mov	eax, DWORD PTR _c$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _socket$[ebp]
	push	edx
	call	_SocketBuffer_queueChar
	add	esp, 8
; Line 315
	mov	DWORD PTR _rc$[ebp], 0
$exit$83640:
; Line 318
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	318					; 0000013eH
	push	OFFSET $SG83651
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 319
	mov	eax, DWORD PTR _rc$[ebp]
; Line 320
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_getch ENDP
_TEXT	ENDS
PUBLIC	_Socket_getdata
EXTRN	_SocketBuffer_getQueuedData:PROC
EXTRN	_SocketBuffer_complete:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_buf$ = -8						; size = 4
_rc$ = -4						; size = 4
_socket$ = 8						; size = 4
_bytes$ = 12						; size = 4
_actual_len$ = 16					; size = 4
_Socket_getdata PROC
; Line 332
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 336
	push	3
	push	336					; 00000150H
	push	OFFSET $SG83661
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 337
	cmp	DWORD PTR _bytes$[ebp], 0
	jne	SHORT $LN8@Socket_get@3
; Line 339
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	_SocketBuffer_complete
	add	esp, 4
	mov	DWORD PTR _buf$[ebp], eax
; Line 340
	jmp	$exit$83663
$LN8@Socket_get@3:
; Line 343
	mov	ecx, DWORD PTR _actual_len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	_SocketBuffer_getQueuedData
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$[ebp], eax
; Line 345
	push	0
	mov	ecx, DWORD PTR _actual_len$[ebp]
	mov	edx, DWORD PTR _bytes$[ebp]
	sub	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _actual_len$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _socket$[ebp]
	push	edx
	call	DWORD PTR __imp__recv@16
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], -1
	jne	SHORT $LN7@Socket_get@3
; Line 347
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	push	OFFSET $SG83666
	call	_Socket_error
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
; Line 348
	cmp	DWORD PTR _rc$[ebp], 10035		; 00002733H
	je	SHORT $LN6@Socket_get@3
	cmp	DWORD PTR _rc$[ebp], 10035		; 00002733H
	je	SHORT $LN6@Socket_get@3
; Line 350
	mov	DWORD PTR _buf$[ebp], 0
; Line 351
	jmp	SHORT $exit$83663
$LN6@Socket_get@3:
; Line 352
	jmp	SHORT $LN5@Socket_get@3
$LN7@Socket_get@3:
; Line 354
	cmp	DWORD PTR _rc$[ebp], 0
	jne	SHORT $LN4@Socket_get@3
; Line 356
	mov	DWORD PTR _buf$[ebp], 0
; Line 357
	jmp	SHORT $exit$83663
; Line 359
	jmp	SHORT $LN5@Socket_get@3
$LN4@Socket_get@3:
; Line 360
	mov	ecx, DWORD PTR _actual_len$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _rc$[ebp]
	mov	eax, DWORD PTR _actual_len$[ebp]
	mov	DWORD PTR [eax], edx
$LN5@Socket_get@3:
; Line 362
	mov	ecx, DWORD PTR _actual_len$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _bytes$[ebp]
	jne	SHORT $LN2@Socket_get@3
; Line 363
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	_SocketBuffer_complete
	add	esp, 4
; Line 364
	jmp	SHORT $exit$83663
$LN2@Socket_get@3:
; Line 366
	mov	ecx, DWORD PTR _actual_len$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	_SocketBuffer_interrupted
	add	esp, 8
; Line 367
	mov	ecx, DWORD PTR _actual_len$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	push	OFFSET $SG83675
	push	-1
	push	1
	call	_Log
	add	esp, 20					; 00000014H
$exit$83663:
; Line 370
	push	3
	push	0
	push	370					; 00000172H
	push	OFFSET $SG83677
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 371
	mov	eax, DWORD PTR _buf$[ebp]
; Line 372
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_getdata ENDP
; Function compile flags: /Odtp
_cursock$ = -4						; size = 4
_socket$ = 8						; size = 4
_Socket_noPendingWrites PROC
; Line 380
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 381
	mov	eax, DWORD PTR _socket$[ebp]
	mov	DWORD PTR _cursock$[ebp], eax
; Line 382
	push	OFFSET _intcompare
	lea	ecx, DWORD PTR _cursock$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s+536
	push	edx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 383
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_noPendingWrites ENDP
_TEXT	ENDS
PUBLIC	_Socket_writev
EXTRN	__imp__WSASend@28:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_err$83699 = -8						; size = 4
_rc$ = -4						; size = 4
_socket$ = 8						; size = 4
_iovecs$ = 12						; size = 4
_count$ = 16						; size = 4
_bytes$ = 20						; size = 4
_Socket_writev PROC
; Line 396
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 399
	push	3
	push	399					; 0000018fH
	push	OFFSET $SG83694
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 401
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iovecs$[ebp]
	push	edx
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	DWORD PTR __imp__WSASend@28
	mov	DWORD PTR _rc$[ebp], eax
; Line 402
	cmp	DWORD PTR _rc$[ebp], -1
	jne	SHORT $LN3@Socket_wri
; Line 404
	mov	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	push	OFFSET $SG83700
	call	_Socket_error
	add	esp, 8
	mov	DWORD PTR _err$83699[ebp], eax
; Line 405
	cmp	DWORD PTR _err$83699[ebp], 10035	; 00002733H
	je	SHORT $LN1@Socket_wri
	cmp	DWORD PTR _err$83699[ebp], 10035	; 00002733H
	jne	SHORT $LN3@Socket_wri
$LN1@Socket_wri:
; Line 406
	mov	DWORD PTR _rc$[ebp], -22		; ffffffeaH
$LN3@Socket_wri:
; Line 420
	push	3
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	push	420					; 000001a4H
	push	OFFSET $SG83703
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 421
	mov	eax, DWORD PTR _rc$[ebp]
; Line 422
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_writev ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Socket_putdatas
EXTRN	_SocketBuffer_pendingWrite:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
___i$83747 = -88					; size = 4
_sockmem$83738 = -84					; size = 4
_frees1$ = -80						; size = 20
_bytes$ = -60						; size = 4
_total$ = -56						; size = 4
_iovecs$ = -52						; size = 40
__$ArrayPad$ = -12					; size = 4
_i$ = -8						; size = 4
_rc$ = -4						; size = 4
_socket$ = 8						; size = 4
_buf0$ = 12						; size = 4
_buf0len$ = 16						; size = 4
_count$ = 20						; size = 4
_buffers$ = 24						; size = 4
_buflens$ = 28						; size = 4
_frees$ = 32						; size = 4
_Socket_putdatas PROC
; Line 437
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 438
	mov	DWORD PTR _bytes$[ebp], 0
; Line 441
	mov	DWORD PTR _rc$[ebp], -22		; ffffffeaH
	mov	eax, DWORD PTR _buf0len$[ebp]
	mov	DWORD PTR _total$[ebp], eax
; Line 443
	push	3
	push	443					; 000001bbH
	push	OFFSET $SG83725
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 444
	mov	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	call	_Socket_noPendingWrites
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN19@Socket_put
; Line 446
	mov	edx, DWORD PTR _socket$[ebp]
	push	edx
	push	OFFSET $SG83727
	push	-1
	push	6
	call	_Log
	add	esp, 16					; 00000010H
; Line 447
	mov	DWORD PTR _rc$[ebp], -1
; Line 448
	jmp	$exit$83728
$LN19@Socket_put:
; Line 451
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@Socket_put
$LN17@Socket_put:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@Socket_put:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jge	SHORT $LN16@Socket_put
; Line 452
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _buflens$[ebp]
	mov	ecx, DWORD PTR _total$[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _total$[ebp], ecx
	jmp	SHORT $LN17@Socket_put
$LN16@Socket_put:
; Line 454
	mov	edx, DWORD PTR _buf0$[ebp]
	mov	DWORD PTR _iovecs$[ebp+4], edx
; Line 455
	mov	eax, DWORD PTR _buf0len$[ebp]
	mov	DWORD PTR _iovecs$[ebp], eax
; Line 456
	mov	DWORD PTR _frees1$[ebp], 1
; Line 457
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@Socket_put
$LN14@Socket_put:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN15@Socket_put:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _count$[ebp]
	jge	SHORT $LN13@Socket_put
; Line 459
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _buffers$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _iovecs$[ebp+eax*8+12], ecx
; Line 460
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _buflens$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _iovecs$[ebp+edx*8+8], eax
; Line 461
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _frees$[ebp]
	mov	edx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _frees1$[ebp+ecx*4+4], edx
; Line 462
	jmp	SHORT $LN14@Socket_put
$LN13@Socket_put:
; Line 464
	lea	eax, DWORD PTR _bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	push	ecx
	lea	edx, DWORD PTR _iovecs$[ebp]
	push	edx
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	_Socket_writev
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], -1
	je	$exit$83728
; Line 466
	mov	ecx, DWORD PTR _bytes$[ebp]
	cmp	ecx, DWORD PTR _total$[ebp]
	jne	SHORT $LN11@Socket_put
; Line 467
	mov	DWORD PTR _rc$[ebp], 0
; Line 468
	jmp	$exit$83728
$LN11@Socket_put:
; Line 470
	push	4
	push	470					; 000001d6H
	push	OFFSET $SG83741
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sockmem$83738[ebp], eax
; Line 472
	mov	edx, DWORD PTR _socket$[ebp]
	push	edx
	mov	eax, DWORD PTR _total$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bytes$[ebp]
	push	ecx
	push	OFFSET $SG83742
	push	-1
	push	3
	call	_Log
	add	esp, 24					; 00000018H
; Line 476
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _total$[ebp]
	push	eax
	lea	ecx, DWORD PTR _frees1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _iovecs$[ebp]
	push	edx
	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	call	_SocketBuffer_pendingWrite
	add	esp, 24					; 00000018H
; Line 478
	mov	edx, DWORD PTR _sockmem$83738[ebp]
	mov	eax, DWORD PTR _socket$[ebp]
	mov	DWORD PTR [edx], eax
; Line 479
	push	4
	mov	ecx, DWORD PTR _sockmem$83738[ebp]
	push	ecx
	mov	edx, DWORD PTR _s+536
	push	edx
	call	_ListAppend
	add	esp, 12					; 0000000cH
$LN9@Socket_put:
; Line 480
	mov	DWORD PTR ___i$83747[ebp], 0
	jmp	SHORT $LN6@Socket_put
$LN5@Socket_put:
	mov	eax, DWORD PTR ___i$83747[ebp]
	add	eax, 1
	mov	DWORD PTR ___i$83747[ebp], eax
$LN6@Socket_put:
	mov	ecx, DWORD PTR ___i$83747[ebp]
	cmp	ecx, DWORD PTR _s+540
	jae	SHORT $LN4@Socket_put
	mov	edx, DWORD PTR ___i$83747[ebp]
	mov	eax, DWORD PTR _s[edx*4+544]
	cmp	eax, DWORD PTR _socket$[ebp]
	jne	SHORT $LN3@Socket_put
	jmp	SHORT $LN4@Socket_put
$LN3@Socket_put:
	jmp	SHORT $LN5@Socket_put
$LN4@Socket_put:
	mov	ecx, DWORD PTR ___i$83747[ebp]
	cmp	ecx, DWORD PTR _s+540
	jne	SHORT $LN8@Socket_put
	cmp	DWORD PTR _s+540, 64			; 00000040H
	jae	SHORT $LN8@Socket_put
	mov	edx, DWORD PTR ___i$83747[ebp]
	mov	eax, DWORD PTR _socket$[ebp]
	mov	DWORD PTR _s[edx*4+544], eax
	mov	ecx, DWORD PTR _s+540
	add	ecx, 1
	mov	DWORD PTR _s+540, ecx
$LN8@Socket_put:
	xor	edx, edx
	jne	SHORT $LN9@Socket_put
; Line 481
	mov	DWORD PTR _rc$[ebp], -22		; ffffffeaH
$exit$83728:
; Line 485
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	485					; 000001e5H
	push	OFFSET $SG83760
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 486
	mov	eax, DWORD PTR _rc$[ebp]
; Line 487
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_putdatas ENDP
_TEXT	ENDS
PUBLIC	_Socket_addPendingWrite
; Function compile flags: /Odtp
_TEXT	SEGMENT
___i$83767 = -4						; size = 4
_socket$ = 8						; size = 4
_Socket_addPendingWrite PROC
; Line 497
	push	ebp
	mov	ebp, esp
	push	ecx
$LN9@Socket_add@2:
; Line 498
	mov	DWORD PTR ___i$83767[ebp], 0
	jmp	SHORT $LN6@Socket_add@2
$LN5@Socket_add@2:
	mov	eax, DWORD PTR ___i$83767[ebp]
	add	eax, 1
	mov	DWORD PTR ___i$83767[ebp], eax
$LN6@Socket_add@2:
	mov	ecx, DWORD PTR ___i$83767[ebp]
	cmp	ecx, DWORD PTR _s+540
	jae	SHORT $LN4@Socket_add@2
	mov	edx, DWORD PTR ___i$83767[ebp]
	mov	eax, DWORD PTR _s[edx*4+544]
	cmp	eax, DWORD PTR _socket$[ebp]
	jne	SHORT $LN3@Socket_add@2
	jmp	SHORT $LN4@Socket_add@2
$LN3@Socket_add@2:
	jmp	SHORT $LN5@Socket_add@2
$LN4@Socket_add@2:
	mov	ecx, DWORD PTR ___i$83767[ebp]
	cmp	ecx, DWORD PTR _s+540
	jne	SHORT $LN8@Socket_add@2
	cmp	DWORD PTR _s+540, 64			; 00000040H
	jae	SHORT $LN8@Socket_add@2
	mov	edx, DWORD PTR ___i$83767[ebp]
	mov	eax, DWORD PTR _socket$[ebp]
	mov	DWORD PTR _s[edx*4+544], eax
	mov	ecx, DWORD PTR _s+540
	add	ecx, 1
	mov	DWORD PTR _s+540, ecx
$LN8@Socket_add@2:
	xor	edx, edx
	jne	SHORT $LN9@Socket_add@2
; Line 499
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_addPendingWrite ENDP
_TEXT	ENDS
PUBLIC	_Socket_clearPendingWrite
; Function compile flags: /Odtp
_TEXT	SEGMENT
___i$83789 = -4						; size = 4
_socket$ = 8						; size = 4
_Socket_clearPendingWrite PROC
; Line 507
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 508
	push	OFFSET _s+540
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	___WSAFDIsSet@8
	test	eax, eax
	je	SHORT $LN11@Socket_cle
$LN9@Socket_cle:
; Line 509
	mov	DWORD PTR ___i$83789[ebp], 0
	jmp	SHORT $LN6@Socket_cle
$LN5@Socket_cle:
	mov	ecx, DWORD PTR ___i$83789[ebp]
	add	ecx, 1
	mov	DWORD PTR ___i$83789[ebp], ecx
$LN6@Socket_cle:
	mov	edx, DWORD PTR ___i$83789[ebp]
	cmp	edx, DWORD PTR _s+540
	jae	SHORT $LN8@Socket_cle
	mov	eax, DWORD PTR ___i$83789[ebp]
	mov	ecx, DWORD PTR _s[eax*4+544]
	cmp	ecx, DWORD PTR _socket$[ebp]
	jne	SHORT $LN3@Socket_cle
$LN2@Socket_cle:
	mov	edx, DWORD PTR _s+540
	sub	edx, 1
	cmp	DWORD PTR ___i$83789[ebp], edx
	jae	SHORT $LN1@Socket_cle
	mov	eax, DWORD PTR ___i$83789[ebp]
	mov	ecx, DWORD PTR ___i$83789[ebp]
	mov	edx, DWORD PTR _s[ecx*4+548]
	mov	DWORD PTR _s[eax*4+544], edx
	mov	eax, DWORD PTR ___i$83789[ebp]
	add	eax, 1
	mov	DWORD PTR ___i$83789[ebp], eax
	jmp	SHORT $LN2@Socket_cle
$LN1@Socket_cle:
	mov	ecx, DWORD PTR _s+540
	sub	ecx, 1
	mov	DWORD PTR _s+540, ecx
	jmp	SHORT $LN8@Socket_cle
$LN3@Socket_cle:
	jmp	SHORT $LN5@Socket_cle
$LN8@Socket_cle:
	xor	edx, edx
	jne	SHORT $LN9@Socket_cle
$LN11@Socket_cle:
; Line 510
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_clearPendingWrite ENDP
_TEXT	ENDS
PUBLIC	_Socket_close_only
EXTRN	__imp__closesocket@4:PROC
EXTRN	__imp__shutdown@8:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_socket$ = 8						; size = 4
_Socket_close_only PROC
; Line 519
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 522
	push	3
	push	522					; 0000020aH
	push	OFFSET $SG83807
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 524
	push	2
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	DWORD PTR __imp__shutdown@8
	cmp	eax, -1
	jne	SHORT $LN2@Socket_clo
; Line 525
	mov	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	push	OFFSET $SG83809
	call	_Socket_error
	add	esp, 8
$LN2@Socket_clo:
; Line 526
	mov	edx, DWORD PTR _socket$[ebp]
	push	edx
	call	DWORD PTR __imp__closesocket@4
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], -1
	jne	SHORT $LN1@Socket_clo
; Line 527
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	push	OFFSET $SG83811
	call	_Socket_error
	add	esp, 8
$LN1@Socket_clo:
; Line 536
	push	3
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	536					; 00000218H
	push	OFFSET $SG83812
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 537
	mov	eax, DWORD PTR _rc$[ebp]
; Line 538
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_close_only ENDP
_TEXT	ENDS
PUBLIC	_Socket_close
EXTRN	_SocketBuffer_cleanup:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv170 = -16						; size = 4
_cur_clientsds$83862 = -12				; size = 4
___i$83840 = -8						; size = 4
___i$83820 = -4						; size = 4
_socket$ = 8						; size = 4
_Socket_close PROC
; Line 547
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 548
	push	3
	push	548					; 00000224H
	push	OFFSET $SG83816
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 549
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	_Socket_close_only
	add	esp, 4
$LN25@Socket_clo@2:
; Line 550
	mov	DWORD PTR ___i$83820[ebp], 0
	jmp	SHORT $LN22@Socket_clo@2
$LN21@Socket_clo@2:
	mov	ecx, DWORD PTR ___i$83820[ebp]
	add	ecx, 1
	mov	DWORD PTR ___i$83820[ebp], ecx
$LN22@Socket_clo@2:
	mov	edx, DWORD PTR ___i$83820[ebp]
	cmp	edx, DWORD PTR _s+260
	jae	SHORT $LN24@Socket_clo@2
	mov	eax, DWORD PTR ___i$83820[ebp]
	mov	ecx, DWORD PTR _s[eax*4+264]
	cmp	ecx, DWORD PTR _socket$[ebp]
	jne	SHORT $LN19@Socket_clo@2
$LN18@Socket_clo@2:
	mov	edx, DWORD PTR _s+260
	sub	edx, 1
	cmp	DWORD PTR ___i$83820[ebp], edx
	jae	SHORT $LN17@Socket_clo@2
	mov	eax, DWORD PTR ___i$83820[ebp]
	mov	ecx, DWORD PTR ___i$83820[ebp]
	mov	edx, DWORD PTR _s[ecx*4+268]
	mov	DWORD PTR _s[eax*4+264], edx
	mov	eax, DWORD PTR ___i$83820[ebp]
	add	eax, 1
	mov	DWORD PTR ___i$83820[ebp], eax
	jmp	SHORT $LN18@Socket_clo@2
$LN17@Socket_clo@2:
	mov	ecx, DWORD PTR _s+260
	sub	ecx, 1
	mov	DWORD PTR _s+260, ecx
	jmp	SHORT $LN24@Socket_clo@2
$LN19@Socket_clo@2:
	jmp	SHORT $LN21@Socket_clo@2
$LN24@Socket_clo@2:
	xor	edx, edx
	jne	SHORT $LN25@Socket_clo@2
; Line 551
	push	OFFSET _s+540
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	___WSAFDIsSet@8
	test	eax, eax
	je	SHORT $LN16@Socket_clo@2
$LN15@Socket_clo@2:
; Line 552
	mov	DWORD PTR ___i$83840[ebp], 0
	jmp	SHORT $LN12@Socket_clo@2
$LN11@Socket_clo@2:
	mov	ecx, DWORD PTR ___i$83840[ebp]
	add	ecx, 1
	mov	DWORD PTR ___i$83840[ebp], ecx
$LN12@Socket_clo@2:
	mov	edx, DWORD PTR ___i$83840[ebp]
	cmp	edx, DWORD PTR _s+540
	jae	SHORT $LN14@Socket_clo@2
	mov	eax, DWORD PTR ___i$83840[ebp]
	mov	ecx, DWORD PTR _s[eax*4+544]
	cmp	ecx, DWORD PTR _socket$[ebp]
	jne	SHORT $LN9@Socket_clo@2
$LN8@Socket_clo@2:
	mov	edx, DWORD PTR _s+540
	sub	edx, 1
	cmp	DWORD PTR ___i$83840[ebp], edx
	jae	SHORT $LN7@Socket_clo@2
	mov	eax, DWORD PTR ___i$83840[ebp]
	mov	ecx, DWORD PTR ___i$83840[ebp]
	mov	edx, DWORD PTR _s[ecx*4+548]
	mov	DWORD PTR _s[eax*4+544], edx
	mov	eax, DWORD PTR ___i$83840[ebp]
	add	eax, 1
	mov	DWORD PTR ___i$83840[ebp], eax
	jmp	SHORT $LN8@Socket_clo@2
$LN7@Socket_clo@2:
	mov	ecx, DWORD PTR _s+540
	sub	ecx, 1
	mov	DWORD PTR _s+540, ecx
	jmp	SHORT $LN14@Socket_clo@2
$LN9@Socket_clo@2:
	jmp	SHORT $LN11@Socket_clo@2
$LN14@Socket_clo@2:
	xor	edx, edx
	jne	SHORT $LN15@Socket_clo@2
$LN16@Socket_clo@2:
; Line 553
	cmp	DWORD PTR _s+528, 0
	je	SHORT $LN6@Socket_clo@2
	mov	eax, DWORD PTR _s+528
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _socket$[ebp]
	jne	SHORT $LN6@Socket_clo@2
; Line 554
	mov	eax, DWORD PTR _s+528
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _s+528, ecx
$LN6@Socket_clo@2:
; Line 555
	push	OFFSET _intcompare
	lea	edx, DWORD PTR _socket$[ebp]
	push	edx
	mov	eax, DWORD PTR _s+532
	push	eax
	call	_ListRemoveItem
	add	esp, 12					; 0000000cH
; Line 556
	push	OFFSET _intcompare
	lea	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s+536
	push	edx
	call	_ListRemoveItem
	add	esp, 12					; 0000000cH
; Line 557
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	_SocketBuffer_cleanup
	add	esp, 4
; Line 559
	push	OFFSET _intcompare
	lea	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s+524
	push	edx
	call	_ListRemoveItem
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN5@Socket_clo@2
; Line 560
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	push	OFFSET $SG83858
	push	-1
	push	3
	call	_Log
	add	esp, 16					; 00000010H
; Line 561
	jmp	SHORT $LN4@Socket_clo@2
$LN5@Socket_clo@2:
; Line 562
	mov	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	push	OFFSET $SG83860
	push	-1
	push	5
	call	_Log
	add	esp, 16					; 00000010H
$LN4@Socket_clo@2:
; Line 563
	mov	edx, DWORD PTR _socket$[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _s+520
	jl	SHORT $LN3@Socket_clo@2
; Line 566
	mov	DWORD PTR _cur_clientsds$83862[ebp], 0
; Line 568
	mov	DWORD PTR _s+520, 0
$LN2@Socket_clo@2:
; Line 569
	lea	eax, DWORD PTR _cur_clientsds$83862[ebp]
	push	eax
	mov	ecx, DWORD PTR _s+524
	push	ecx
	call	_ListNextElement
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@Socket_clo@2
; Line 570
	mov	edx, DWORD PTR _cur_clientsds$83862[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _s+520
	jle	SHORT $LN28@Socket_clo@2
	mov	edx, DWORD PTR _cur_clientsds$83862[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv170[ebp], ecx
	jmp	SHORT $LN29@Socket_clo@2
$LN28@Socket_clo@2:
	mov	edx, DWORD PTR _s+520
	mov	DWORD PTR tv170[ebp], edx
$LN29@Socket_clo@2:
	mov	eax, DWORD PTR tv170[ebp]
	mov	DWORD PTR _s+520, eax
	jmp	SHORT $LN2@Socket_clo@2
$LN1@Socket_clo@2:
; Line 571
	mov	ecx, DWORD PTR _s+520
	add	ecx, 1
	mov	DWORD PTR _s+520, ecx
; Line 572
	mov	edx, DWORD PTR _s+520
	push	edx
	push	OFFSET $SG83869
	push	-1
	push	1
	call	_Log
	add	esp, 16					; 00000010H
$LN3@Socket_clo@2:
; Line 574
	push	3
	push	0
	push	574					; 0000023eH
	push	OFFSET $SG83871
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 575
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_close ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Socket_new
EXTRN	__imp__connect@12:PROC
EXTRN	__imp__socket@12:PROC
EXTRN	__imp__freeaddrinfo@4:PROC
EXTRN	__imp__htons@4:PROC
EXTRN	__imp__getaddrinfo@16:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pnewSd$83929 = -104					; size = 4
_res$83894 = -100					; size = 4
_address$ = -96						; size = 16
_result$ = -80						; size = 4
_hints$ = -76						; size = 32
_family$ = -44						; size = 2
_address6$ = -40					; size = 28
__$ArrayPad$ = -12					; size = 4
_type$ = -8						; size = 4
_rc$ = -4						; size = 4
_addr$ = 8						; size = 4
_port$ = 12						; size = 4
_sock$ = 16						; size = 4
_Socket_new PROC
; Line 586
	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 587
	mov	DWORD PTR _type$[ebp], 1
; Line 592
	mov	DWORD PTR _rc$[ebp], -1
; Line 598
	mov	DWORD PTR _result$[ebp], 0
; Line 599
	mov	DWORD PTR _hints$[ebp], 0
	mov	DWORD PTR _hints$[ebp+4], 0
	mov	DWORD PTR _hints$[ebp+8], 1
	mov	DWORD PTR _hints$[ebp+12], 6
	mov	DWORD PTR _hints$[ebp+16], 0
	mov	DWORD PTR _hints$[ebp+20], 0
	mov	DWORD PTR _hints$[ebp+24], 0
	mov	DWORD PTR _hints$[ebp+28], 0
; Line 601
	push	3
	push	601					; 00000259H
	push	OFFSET $SG83890
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 602
	mov	eax, DWORD PTR _sock$[ebp]
	mov	DWORD PTR [eax], -1
; Line 604
	mov	ecx, DWORD PTR _addr$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 91					; 0000005bH
	jne	SHORT $LN23@Socket_new
; Line 605
	mov	eax, DWORD PTR _addr$[ebp]
	add	eax, 1
	mov	DWORD PTR _addr$[ebp], eax
$LN23@Socket_new:
; Line 607
	lea	ecx, DWORD PTR _result$[ebp]
	push	ecx
	lea	edx, DWORD PTR _hints$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	call	DWORD PTR __imp__getaddrinfo@16
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], 0
	jne	$LN22@Socket_new
; Line 609
	mov	ecx, DWORD PTR _result$[ebp]
	mov	DWORD PTR _res$83894[ebp], ecx
$LN21@Socket_new:
; Line 612
	cmp	DWORD PTR _res$83894[ebp], 0
	je	SHORT $LN20@Socket_new
; Line 614
	mov	edx, DWORD PTR _res$83894[ebp]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN19@Socket_new
; Line 616
	mov	eax, DWORD PTR _res$83894[ebp]
	mov	DWORD PTR _result$[ebp], eax
; Line 617
	jmp	SHORT $LN20@Socket_new
$LN19@Socket_new:
; Line 619
	mov	ecx, DWORD PTR _res$83894[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _res$83894[ebp], edx
; Line 620
	jmp	SHORT $LN21@Socket_new
$LN20@Socket_new:
; Line 622
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN18@Socket_new
; Line 623
	mov	DWORD PTR _rc$[ebp], -1
; Line 624
	jmp	$LN17@Socket_new
$LN18@Socket_new:
; Line 626
	mov	eax, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [eax+4], 23			; 00000017H
	jne	SHORT $LN16@Socket_new
; Line 628
	movzx	ecx, WORD PTR _port$[ebp]
	push	ecx
	call	DWORD PTR __imp__htons@4
	mov	WORD PTR _address6$[ebp+2], ax
; Line 629
	mov	edx, 23					; 00000017H
	mov	WORD PTR _family$[ebp], dx
	mov	ax, WORD PTR _family$[ebp]
	mov	WORD PTR _address6$[ebp], ax
; Line 630
	mov	ecx, DWORD PTR _result$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 8
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _address6$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _address6$[ebp+12], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _address6$[ebp+16], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _address6$[ebp+20], ecx
; Line 632
	jmp	SHORT $LN17@Socket_new
$LN16@Socket_new:
; Line 634
	mov	edx, DWORD PTR _result$[ebp]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN14@Socket_new
; Line 636
	movzx	eax, WORD PTR _port$[ebp]
	push	eax
	call	DWORD PTR __imp__htons@4
	mov	WORD PTR _address$[ebp+2], ax
; Line 637
	mov	ecx, 2
	mov	WORD PTR _family$[ebp], cx
	mov	dx, WORD PTR _family$[ebp]
	mov	WORD PTR _address$[ebp], dx
; Line 638
	mov	eax, DWORD PTR _result$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _address$[ebp+4], edx
; Line 640
	jmp	SHORT $LN17@Socket_new
$LN14@Socket_new:
; Line 641
	mov	DWORD PTR _rc$[ebp], -1
$LN17@Socket_new:
; Line 643
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	call	DWORD PTR __imp__freeaddrinfo@4
; Line 645
	jmp	SHORT $LN12@Socket_new
$LN22@Socket_new:
; Line 646
	mov	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _addr$[ebp]
	push	edx
	push	OFFSET $SG83909
	push	-1
	push	5
	call	_Log
	add	esp, 20					; 00000014H
$LN12@Socket_new:
; Line 648
	cmp	DWORD PTR _rc$[ebp], 0
	je	SHORT $LN11@Socket_new
; Line 649
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	push	OFFSET $SG83911
	push	-1
	push	5
	call	_Log
	add	esp, 16					; 00000010H
; Line 650
	jmp	$LN10@Socket_new
$LN11@Socket_new:
; Line 652
	push	0
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	movsx	edx, WORD PTR _family$[ebp]
	push	edx
	call	DWORD PTR __imp__socket@12
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 653
	mov	edx, DWORD PTR _sock$[ebp]
	cmp	DWORD PTR [edx], -1
	jne	SHORT $LN9@Socket_new
; Line 654
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET $SG83915
	call	_Socket_error
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
; Line 655
	jmp	$LN10@Socket_new
$LN9@Socket_new:
; Line 664
	mov	edx, DWORD PTR _port$[ebp]
	push	edx
	mov	eax, DWORD PTR _addr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sock$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG83917
	push	-1
	push	3
	call	_Log
	add	esp, 24					; 00000018H
; Line 665
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_Socket_addSocket
	add	esp, 4
	cmp	eax, -1
	jne	SHORT $LN7@Socket_new
; Line 666
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG83919
	call	_Socket_error
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
; Line 667
	jmp	$LN10@Socket_new
$LN7@Socket_new:
; Line 670
	movsx	ecx, WORD PTR _family$[ebp]
	cmp	ecx, 2
	jne	SHORT $LN5@Socket_new
; Line 671
	push	16					; 00000010H
	lea	edx, DWORD PTR _address$[ebp]
	push	edx
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__connect@12
	mov	DWORD PTR _rc$[ebp], eax
; Line 673
	jmp	SHORT $LN4@Socket_new
$LN5@Socket_new:
; Line 674
	push	28					; 0000001cH
	lea	edx, DWORD PTR _address6$[ebp]
	push	edx
	mov	eax, DWORD PTR _sock$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__connect@12
	mov	DWORD PTR _rc$[ebp], eax
$LN4@Socket_new:
; Line 676
	cmp	DWORD PTR _rc$[ebp], -1
	jne	SHORT $LN3@Socket_new
; Line 677
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG83926
	call	_Socket_error
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
$LN3@Socket_new:
; Line 678
	cmp	DWORD PTR _rc$[ebp], 10036		; 00002734H
	je	SHORT $LN1@Socket_new
	cmp	DWORD PTR _rc$[ebp], 10035		; 00002733H
	jne	SHORT $LN10@Socket_new
$LN1@Socket_new:
; Line 680
	push	4
	push	680					; 000002a8H
	push	OFFSET $SG83932
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pnewSd$83929[ebp], eax
; Line 681
	mov	ecx, DWORD PTR _pnewSd$83929[ebp]
	mov	edx, DWORD PTR _sock$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
; Line 682
	push	4
	mov	ecx, DWORD PTR _pnewSd$83929[ebp]
	push	ecx
	mov	edx, DWORD PTR _s+532
	push	edx
	call	_ListAppend
	add	esp, 12					; 0000000cH
; Line 683
	push	OFFSET $SG83934
	push	15					; 0000000fH
	push	3
	call	_Log
	add	esp, 12					; 0000000cH
$LN10@Socket_new:
; Line 688
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	688					; 000002b0H
	push	OFFSET $SG83935
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 689
	mov	eax, DWORD PTR _rc$[ebp]
; Line 690
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_new ENDP
_TEXT	ENDS
PUBLIC	_Socket_setWriteCompleteCallback
; Function compile flags: /Odtp
_TEXT	SEGMENT
_mywritecomplete$ = 8					; size = 4
_Socket_setWriteCompleteCallback PROC
; Line 696
	push	ebp
	mov	ebp, esp
; Line 697
	mov	eax, DWORD PTR _mywritecomplete$[ebp]
	mov	DWORD PTR _writecomplete, eax
; Line 698
	pop	ebp
	ret	0
_Socket_setWriteCompleteCallback ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Socket_continueWrite
EXTRN	_myfree:PROC
EXTRN	_SocketBuffer_getWrite:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_offset$83959 = -72					; size = 4
_curbuf$ = -68						; size = 4
_pw$ = -64						; size = 4
_bytes$ = -60						; size = 4
_iovecs1$ = -56						; size = 40
__$ArrayPad$ = -16					; size = 4
_i$ = -12						; size = 4
_rc$ = -8						; size = 4
_curbuflen$ = -4					; size = 4
_socket$ = 8						; size = 4
_Socket_continueWrite PROC
; Line 706
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 707
	mov	DWORD PTR _rc$[ebp], 0
; Line 709
	mov	DWORD PTR _curbuflen$[ebp], 0
; Line 711
	mov	DWORD PTR _curbuf$[ebp], -1
; Line 714
	push	3
	push	714					; 000002caH
	push	OFFSET $SG83952
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 715
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	call	_SocketBuffer_getWrite
	add	esp, 4
	mov	DWORD PTR _pw$[ebp], eax
; Line 725
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@Socket_con
$LN12@Socket_con:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@Socket_con:
	mov	edx, DWORD PTR _pw$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jge	$LN11@Socket_con
; Line 727
	mov	ecx, DWORD PTR _pw$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _curbuflen$[ebp]
	ja	SHORT $LN10@Socket_con
; Line 730
	mov	eax, DWORD PTR _curbuf$[ebp]
	add	eax, 1
	mov	DWORD PTR _curbuf$[ebp], eax
	mov	ecx, DWORD PTR _curbuf$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _pw$[ebp]
	mov	edx, DWORD PTR [eax+edx*8+16]
	mov	DWORD PTR _iovecs1$[ebp+ecx*8], edx
; Line 731
	mov	eax, DWORD PTR _curbuf$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pw$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8+20]
	mov	DWORD PTR _iovecs1$[ebp+eax*8+4], ecx
	jmp	SHORT $LN9@Socket_con
$LN10@Socket_con:
; Line 733
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _pw$[ebp]
	mov	ecx, DWORD PTR _curbuflen$[ebp]
	add	ecx, DWORD PTR [eax+edx*8+16]
	mov	edx, DWORD PTR _pw$[ebp]
	cmp	DWORD PTR [edx+12], ecx
	jae	SHORT $LN9@Socket_con
; Line 736
	mov	eax, DWORD PTR _pw$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _curbuflen$[ebp]
	mov	DWORD PTR _offset$83959[ebp], ecx
; Line 737
	mov	edx, DWORD PTR _curbuf$[ebp]
	add	edx, 1
	mov	DWORD PTR _curbuf$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pw$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+16]
	sub	edx, DWORD PTR _offset$83959[ebp]
	mov	eax, DWORD PTR _curbuf$[ebp]
	mov	DWORD PTR _iovecs1$[ebp+eax*8], edx
; Line 738
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pw$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+20]
	add	eax, DWORD PTR _offset$83959[ebp]
	mov	ecx, DWORD PTR _curbuf$[ebp]
	mov	DWORD PTR _iovecs1$[ebp+ecx*8+4], eax
; Line 739
	jmp	SHORT $LN11@Socket_con
$LN9@Socket_con:
; Line 741
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _pw$[ebp]
	mov	ecx, DWORD PTR _curbuflen$[ebp]
	add	ecx, DWORD PTR [eax+edx*8+16]
	mov	DWORD PTR _curbuflen$[ebp], ecx
; Line 742
	jmp	$LN12@Socket_con
$LN11@Socket_con:
; Line 744
	lea	edx, DWORD PTR _bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR _curbuf$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _iovecs1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _socket$[ebp]
	push	edx
	call	_Socket_writev
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], -1
	je	$LN7@Socket_con
; Line 746
	mov	eax, DWORD PTR _pw$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _bytes$[ebp]
	mov	edx, DWORD PTR _pw$[ebp]
	mov	DWORD PTR [edx+12], ecx
; Line 747
	mov	eax, DWORD PTR _pw$[ebp]
	mov	ecx, DWORD PTR _pw$[ebp]
	mov	edx, DWORD PTR [eax+12]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+4]
	sete	al
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], 0
	je	SHORT $LN6@Socket_con
; Line 749
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@Socket_con
$LN4@Socket_con:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@Socket_con:
	mov	edx, DWORD PTR _pw$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jge	SHORT $LN3@Socket_con
; Line 751
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _pw$[ebp]
	cmp	DWORD PTR [edx+ecx*4+56], 0
	je	SHORT $LN2@Socket_con
; Line 752
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pw$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+20]
	push	edx
	push	752					; 000002f0H
	push	OFFSET $SG83966
	call	_myfree
	add	esp, 12					; 0000000cH
$LN2@Socket_con:
; Line 753
	jmp	SHORT $LN4@Socket_con
$LN3@Socket_con:
; Line 754
	mov	eax, DWORD PTR _socket$[ebp]
	push	eax
	push	OFFSET $SG83967
	push	-1
	push	3
	call	_Log
	add	esp, 16					; 00000010H
; Line 756
	jmp	SHORT $LN7@Socket_con
$LN6@Socket_con:
; Line 757
	mov	ecx, DWORD PTR _socket$[ebp]
	push	ecx
	mov	edx, DWORD PTR _bytes$[ebp]
	push	edx
	push	OFFSET $SG83969
	push	-1
	push	3
	call	_Log
	add	esp, 20					; 00000014H
$LN7@Socket_con:
; Line 762
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	762					; 000002faH
	push	OFFSET $SG83970
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 763
	mov	eax, DWORD PTR _rc$[ebp]
; Line 764
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_continueWrite ENDP
_TEXT	ENDS
EXTRN	_ListRemove:PROC
EXTRN	_SocketBuffer_writeComplete:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
___i$83990 = -16					; size = 4
_socket$83980 = -12					; size = 4
_curpending$ = -8					; size = 4
_rc1$ = -4						; size = 4
_pwset$ = 8						; size = 4
_Socket_continueWrites PROC
; Line 773
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 774
	mov	DWORD PTR _rc1$[ebp], 0
; Line 775
	mov	eax, DWORD PTR _s+536
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curpending$[ebp], ecx
; Line 777
	push	3
	push	777					; 00000309H
	push	OFFSET $SG83976
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
$LN16@Socket_con@2:
; Line 778
	cmp	DWORD PTR _curpending$[ebp], 0
	je	$LN15@Socket_con@2
; Line 780
	mov	edx, DWORD PTR _curpending$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _socket$83980[ebp], ecx
; Line 781
	mov	edx, DWORD PTR _pwset$[ebp]
	push	edx
	mov	eax, DWORD PTR _socket$83980[ebp]
	push	eax
	call	___WSAFDIsSet@8
	test	eax, eax
	je	$LN14@Socket_con@2
	mov	ecx, DWORD PTR _socket$83980[ebp]
	push	ecx
	call	_Socket_continueWrite
	add	esp, 4
	test	eax, eax
	je	$LN14@Socket_con@2
; Line 783
	mov	edx, DWORD PTR _socket$83980[ebp]
	push	edx
	call	_SocketBuffer_writeComplete
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN12@Socket_con@2
; Line 784
	push	OFFSET $SG83986
	push	-1
	push	6
	call	_Log
	add	esp, 12					; 0000000cH
$LN12@Socket_con@2:
; Line 785
	mov	DWORD PTR ___i$83990[ebp], 0
	jmp	SHORT $LN9@Socket_con@2
$LN8@Socket_con@2:
	mov	eax, DWORD PTR ___i$83990[ebp]
	add	eax, 1
	mov	DWORD PTR ___i$83990[ebp], eax
$LN9@Socket_con@2:
	mov	ecx, DWORD PTR ___i$83990[ebp]
	cmp	ecx, DWORD PTR _s+540
	jae	SHORT $LN11@Socket_con@2
	mov	edx, DWORD PTR ___i$83990[ebp]
	mov	eax, DWORD PTR _s[edx*4+544]
	cmp	eax, DWORD PTR _socket$83980[ebp]
	jne	SHORT $LN6@Socket_con@2
$LN5@Socket_con@2:
	mov	ecx, DWORD PTR _s+540
	sub	ecx, 1
	cmp	DWORD PTR ___i$83990[ebp], ecx
	jae	SHORT $LN4@Socket_con@2
	mov	edx, DWORD PTR ___i$83990[ebp]
	mov	eax, DWORD PTR ___i$83990[ebp]
	mov	ecx, DWORD PTR _s[eax*4+548]
	mov	DWORD PTR _s[edx*4+544], ecx
	mov	edx, DWORD PTR ___i$83990[ebp]
	add	edx, 1
	mov	DWORD PTR ___i$83990[ebp], edx
	jmp	SHORT $LN5@Socket_con@2
$LN4@Socket_con@2:
	mov	eax, DWORD PTR _s+540
	sub	eax, 1
	mov	DWORD PTR _s+540, eax
	jmp	SHORT $LN11@Socket_con@2
$LN6@Socket_con@2:
	jmp	SHORT $LN8@Socket_con@2
$LN11@Socket_con@2:
	xor	ecx, ecx
	jne	SHORT $LN12@Socket_con@2
; Line 786
	mov	edx, DWORD PTR _curpending$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _s+536
	push	ecx
	call	_ListRemove
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@Socket_con@2
; Line 788
	push	OFFSET $SG84005
	push	-1
	push	6
	call	_Log
	add	esp, 12					; 0000000cH
; Line 789
	lea	edx, DWORD PTR _curpending$[ebp]
	push	edx
	mov	eax, DWORD PTR _s+536
	push	eax
	call	_ListNextElement
	add	esp, 8
$LN3@Socket_con@2:
; Line 791
	mov	ecx, DWORD PTR _s+536
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _curpending$[ebp], edx
; Line 793
	cmp	DWORD PTR _writecomplete, 0
	je	SHORT $LN2@Socket_con@2
; Line 794
	mov	eax, DWORD PTR _socket$83980[ebp]
	push	eax
	call	DWORD PTR _writecomplete
	add	esp, 4
$LN2@Socket_con@2:
; Line 796
	jmp	SHORT $LN1@Socket_con@2
$LN14@Socket_con@2:
; Line 797
	lea	ecx, DWORD PTR _curpending$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s+536
	push	edx
	call	_ListNextElement
	add	esp, 8
$LN1@Socket_con@2:
; Line 798
	jmp	$LN16@Socket_con@2
$LN15@Socket_con@2:
; Line 799
	push	3
	lea	eax, DWORD PTR _rc1$[ebp]
	push	eax
	push	799					; 0000031fH
	push	OFFSET $SG84008
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 800
	mov	eax, DWORD PTR _rc1$[ebp]
; Line 801
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_continueWrites ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Socket_getaddrname
EXTRN	__imp__wcstombs:PROC
EXTRN	__imp__WSAAddressToStringA@20:PROC
_BSS	SEGMENT
?addr_string@?1??Socket_getaddrname@@9@9 DB 04cH DUP (?) ; `Socket_getaddrname'::`2'::addr_string
; Function compile flags: /Odtp
_BSS	ENDS
_TEXT	SEGMENT
_buf$ = -144						; size = 134
__$ArrayPad$ = -8					; size = 4
_buflen$ = -4						; size = 4
_sa$ = 8						; size = 4
_sock$ = 12						; size = 4
_Socket_getaddrname PROC
; Line 811
	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 823
	mov	DWORD PTR _buflen$[ebp], 67		; 00000043H
; Line 825
	lea	eax, DWORD PTR _buflen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	0
	push	28					; 0000001cH
	mov	edx, DWORD PTR _sa$[ebp]
	push	edx
	call	DWORD PTR __imp__WSAAddressToStringA@20
	cmp	eax, -1
	jne	SHORT $LN2@Socket_get@4
; Line 826
	mov	eax, DWORD PTR _sock$[ebp]
	push	eax
	push	OFFSET $SG84023
	call	_Socket_error
	add	esp, 8
; Line 827
	jmp	SHORT $LN1@Socket_get@4
$LN2@Socket_get@4:
; Line 828
	push	76					; 0000004cH
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	OFFSET ?addr_string@?1??Socket_getaddrname@@9@9
	call	DWORD PTR __imp__wcstombs
	add	esp, 12					; 0000000cH
$LN1@Socket_get@4:
; Line 836
	mov	eax, OFFSET ?addr_string@?1??Socket_getaddrname@@9@9
; Line 837
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_getaddrname ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Socket_getpeer
EXTRN	__imp__getpeername@12:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_sa$ = -40						; size = 28
__$ArrayPad$ = -12					; size = 4
_sal$ = -8						; size = 4
_rc$ = -4						; size = 4
_sock$ = 8						; size = 4
_Socket_getpeer PROC
; Line 846
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 848
	mov	DWORD PTR _sal$[ebp], 28		; 0000001cH
; Line 851
	lea	eax, DWORD PTR _sal$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sa$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sock$[ebp]
	push	edx
	call	DWORD PTR __imp__getpeername@12
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], -1
	jne	SHORT $LN1@Socket_get@5
; Line 853
	mov	eax, DWORD PTR _sock$[ebp]
	push	eax
	push	OFFSET $SG84033
	call	_Socket_error
	add	esp, 8
; Line 854
	mov	eax, OFFSET $SG84034
	jmp	SHORT $LN2@Socket_get@5
$LN1@Socket_get@5:
; Line 857
	mov	ecx, DWORD PTR _sock$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sa$[ebp]
	push	edx
	call	_Socket_getaddrname
	add	esp, 8
$LN2@Socket_get@5:
; Line 858
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_Socket_getpeer ENDP
_TEXT	ENDS
END
