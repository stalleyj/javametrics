; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspaces\newagent2\Paho\org.eclipse.paho.mqtt.c\src\MQTTPersistence.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_Log_levels:DWORD
$SG84626 DB	'MQTTPersistence_create', 00H
	ORG $+1
$SG84635 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84640 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84642 DB	'.', 00H
	ORG $+2
$SG84661 DB	'MQTTPersistence_create', 00H
	ORG $+1
$SG84668 DB	'MQTTPersistence_initialize', 00H
	ORG $+1
$SG84672 DB	'MQTTPersistence_initialize', 00H
	ORG $+1
$SG84677 DB	'MQTTPersistence_close', 00H
	ORG $+2
$SG84682 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84684 DB	'MQTTPersistence_close', 00H
	ORG $+2
$SG84689 DB	'MQTTPersistence_clear', 00H
	ORG $+2
$SG84692 DB	'MQTTPersistence_clear', 00H
	ORG $+2
$SG84706 DB	'MQTTPersistence_restore', 00H
$SG84712 DB	'c-', 00H
	ORG $+1
$SG84713 DB	'c-', 00H
	ORG $+1
$SG84716 DB	'q-', 00H
	ORG $+1
$SG84717 DB	'q-', 00H
	ORG $+1
$SG84725 DB	'r-', 00H
	ORG $+1
$SG84734 DB	's-', 00H
	ORG $+1
$SG84740 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84741 DB	'sc-', 00H
$SG84742 DB	'%s%d', 00H
	ORG $+3
$SG84745 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84749 DB	'sc-', 00H
$SG84753 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84754 DB	's-', 00H
	ORG $+1
$SG84755 DB	'%s%d', 00H
	ORG $+3
$SG84757 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84758 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84761 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84764 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84766 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84767 DB	'%d sent messages and %d received messages restored for c'
	DB	'lient %s', 0aH, 00H
	ORG $+2
$SG84768 DB	'MQTTPersistence_restore', 00H
$SG84783 DB	'MQTTPersistence_restorePacket', 00H
	ORG $+2
$SG84791 DB	'MQTTPersistence_restorePacket', 00H
	ORG $+2
$SG84803 DB	'MQTTPersistence_insertInOrder', 00H
	ORG $+2
$SG84813 DB	'MQTTPersistence_insertInOrder', 00H
	ORG $+2
$SG84844 DB	'MQTTPersistence_put', 00H
$SG84848 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84851 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84854 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84860 DB	's-', 00H
	ORG $+1
$SG84861 DB	'%s%d', 00H
	ORG $+3
$SG84863 DB	'sc-', 00H
$SG84864 DB	'%s%d', 00H
	ORG $+3
$SG84866 DB	'r-', 00H
	ORG $+1
$SG84867 DB	'%s%d', 00H
	ORG $+3
$SG84868 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84869 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84870 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84871 DB	'MQTTPersistence_put', 00H
$SG84882 DB	'MQTTPersistence_remove', 00H
	ORG $+1
$SG84886 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84888 DB	's-', 00H
	ORG $+1
$SG84889 DB	's-', 00H
	ORG $+1
$SG84890 DB	'%s%d', 00H
	ORG $+3
$SG84891 DB	'sc-', 00H
$SG84892 DB	'%s%d', 00H
	ORG $+3
$SG84894 DB	'%s%d', 00H
	ORG $+3
$SG84895 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84896 DB	'MQTTPersistence_remove', 00H
	ORG $+1
$SG84904 DB	'MQTTPersistence_wrapMsgID', 00H
	ORG $+2
$SG84926 DB	'MQTTPersistence_wrapMsgID', 00H
	ORG $+2
$SG84934 DB	'MQTTPersistence_unpersistQueueEntry', 00H
$SG84935 DB	'q-', 00H
	ORG $+1
$SG84936 DB	'%s%d', 00H
	ORG $+3
$SG84938 DB	'Error %d removing qEntry from persistence', 00H
	ORG $+2
$SG84939 DB	'MQTTPersistence_unpersistQueueEntry', 00H
$SG84953 DB	'MQTTPersistence_persistQueueEntry', 00H
	ORG $+2
$SG84956 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84958 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84959 DB	'q-', 00H
	ORG $+1
$SG84960 DB	'%s%d', 00H
	ORG $+3
$SG84963 DB	'Error persisting queue entry, rc %d', 00H
$SG84964 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84965 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84966 DB	'MQTTPersistence_persistQueueEntry', 00H
	ORG $+2
$SG84977 DB	'MQTTPersistence_restoreQueueEntry', 00H
	ORG $+2
$SG84979 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84982 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84986 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84995 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG84999 DB	'MQTTPersistence_restoreQueueEntry', 00H
	ORG $+2
$SG85012 DB	'MQTTPersistence_insertInSeqOrder', 00H
	ORG $+3
$SG85021 DB	'MQTTPersistence_insertInSeqOrder', 00H
	ORG $+3
$SG85030 DB	'MQTTPersistence_restoreMessageQueue', 00H
$SG85039 DB	'q-', 00H
	ORG $+1
$SG85040 DB	'q-', 00H
	ORG $+1
$SG85046 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG85048 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG85051 DB	'../Paho/org.eclipse.paho.mqtt.c/src/MQTTPersistence.c', 00H
	ORG $+2
$SG85052 DB	'%d queued messages restored for client %s', 00H
	ORG $+2
$SG85053 DB	'MQTTPersistence_restoreMessageQueue', 00H
_DATA	ENDS
PUBLIC	_MQTTPersistence_create
EXTRN	_StackTrace_exit:PROC
EXTRN	_pstcontainskey:PROC
EXTRN	_pstclear:PROC
EXTRN	_pstkeys:PROC
EXTRN	_pstremove:PROC
EXTRN	_pstget:PROC
EXTRN	_pstput:PROC
EXTRN	_pstclose:PROC
EXTRN	_pstopen:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_mymalloc:PROC
EXTRN	_StackTrace_entry:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = -12						; size = 4
_per$ = -8						; size = 4
_rc$ = -4						; size = 4
_persistence$ = 8					; size = 4
_type$ = 12						; size = 4
_pcontext$ = 16						; size = 4
_MQTTPersistence_create PROC
; File c:\workspaces\newagent2\paho\org.eclipse.paho.mqtt.c\src\mqttpersistence.c
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 45
	mov	DWORD PTR _rc$[ebp], 0
; Line 46
	mov	DWORD PTR _per$[ebp], 0
; Line 48
	push	3
	push	48					; 00000030H
	push	OFFSET $SG84626
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 50
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN10@MQTTPersis
	cmp	DWORD PTR tv67[ebp], 1
	je	SHORT $LN11@MQTTPersis
	cmp	DWORD PTR tv67[ebp], 2
	je	$LN5@MQTTPersis
	jmp	$LN1@MQTTPersis
$LN11@MQTTPersis:
; Line 53
	mov	DWORD PTR _per$[ebp], 0
; Line 54
	jmp	$LN12@MQTTPersis
$LN10@MQTTPersis:
; Line 56
	push	36					; 00000024H
	push	56					; 00000038H
	push	OFFSET $SG84635
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _per$[ebp], eax
; Line 57
	cmp	DWORD PTR _per$[ebp], 0
	je	$LN9@MQTTPersis
; Line 59
	cmp	DWORD PTR _pcontext$[ebp], 0
	je	SHORT $LN8@MQTTPersis
; Line 61
	mov	ecx, DWORD PTR _pcontext$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	push	eax
	push	61					; 0000003dH
	push	OFFSET $SG84640
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _per$[ebp]
	mov	DWORD PTR [edx], eax
; Line 62
	mov	eax, DWORD PTR _pcontext$[ebp]
	push	eax
	mov	ecx, DWORD PTR _per$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 64
	jmp	SHORT $LN7@MQTTPersis
$LN8@MQTTPersis:
; Line 65
	mov	eax, DWORD PTR _per$[ebp]
	mov	DWORD PTR [eax], OFFSET $SG84642
$LN7@MQTTPersis:
; Line 67
	mov	ecx, DWORD PTR _per$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET _pstopen
; Line 68
	mov	edx, DWORD PTR _per$[ebp]
	mov	DWORD PTR [edx+8], OFFSET _pstclose
; Line 69
	mov	eax, DWORD PTR _per$[ebp]
	mov	DWORD PTR [eax+12], OFFSET _pstput
; Line 70
	mov	ecx, DWORD PTR _per$[ebp]
	mov	DWORD PTR [ecx+16], OFFSET _pstget
; Line 71
	mov	edx, DWORD PTR _per$[ebp]
	mov	DWORD PTR [edx+20], OFFSET _pstremove
; Line 72
	mov	eax, DWORD PTR _per$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _pstkeys
; Line 73
	mov	ecx, DWORD PTR _per$[ebp]
	mov	DWORD PTR [ecx+28], OFFSET _pstclear
; Line 74
	mov	edx, DWORD PTR _per$[ebp]
	mov	DWORD PTR [edx+32], OFFSET _pstcontainskey
; Line 76
	jmp	SHORT $LN6@MQTTPersis
$LN9@MQTTPersis:
; Line 77
	mov	DWORD PTR _rc$[ebp], -2			; fffffffeH
$LN6@MQTTPersis:
; Line 78
	jmp	SHORT $LN12@MQTTPersis
$LN5@MQTTPersis:
; Line 80
	mov	eax, DWORD PTR _pcontext$[ebp]
	mov	DWORD PTR _per$[ebp], eax
; Line 83
	cmp	DWORD PTR _per$[ebp], 0
	je	SHORT $LN3@MQTTPersis
	cmp	DWORD PTR _per$[ebp], 0
	je	SHORT $LN4@MQTTPersis
	mov	ecx, DWORD PTR _per$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@MQTTPersis
	mov	edx, DWORD PTR _per$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN3@MQTTPersis
	mov	eax, DWORD PTR _per$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@MQTTPersis
	mov	ecx, DWORD PTR _per$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN3@MQTTPersis
	mov	edx, DWORD PTR _per$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN3@MQTTPersis
	mov	eax, DWORD PTR _per$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN3@MQTTPersis
	mov	ecx, DWORD PTR _per$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@MQTTPersis
	mov	edx, DWORD PTR _per$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN3@MQTTPersis
	mov	eax, DWORD PTR _per$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN4@MQTTPersis
$LN3@MQTTPersis:
; Line 84
	mov	DWORD PTR _rc$[ebp], -2			; fffffffeH
$LN4@MQTTPersis:
; Line 85
	jmp	SHORT $LN12@MQTTPersis
$LN1@MQTTPersis:
; Line 87
	mov	DWORD PTR _rc$[ebp], -2			; fffffffeH
$LN12@MQTTPersis:
; Line 92
	mov	ecx, DWORD PTR _persistence$[ebp]
	mov	edx, DWORD PTR _per$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 94
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	94					; 0000005eH
	push	OFFSET $SG84661
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 95
	mov	eax, DWORD PTR _rc$[ebp]
; Line 96
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_create ENDP
_TEXT	ENDS
PUBLIC	_MQTTPersistence_restore
PUBLIC	_MQTTPersistence_initialize
; Function compile flags: /Odtp
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_c$ = 8							; size = 4
_serverURI$ = 12					; size = 4
_MQTTPersistence_initialize PROC
; Line 106
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 107
	mov	DWORD PTR _rc$[ebp], 0
; Line 109
	push	3
	push	109					; 0000006dH
	push	OFFSET $SG84668
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 110
	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN2@MQTTPersis@2
; Line 112
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _serverURI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	add	ecx, 76					; 0000004cH
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
; Line 113
	cmp	DWORD PTR _rc$[ebp], 0
	jne	SHORT $LN2@MQTTPersis@2
; Line 114
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	_MQTTPersistence_restore
	add	esp, 4
	mov	DWORD PTR _rc$[ebp], eax
$LN2@MQTTPersis@2:
; Line 117
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	117					; 00000075H
	push	OFFSET $SG84672
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 118
	mov	eax, DWORD PTR _rc$[ebp]
; Line 119
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_initialize ENDP
_TEXT	ENDS
PUBLIC	_MQTTPersistence_close
EXTRN	_myfree:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_c$ = 8							; size = 4
_MQTTPersistence_close PROC
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 129
	mov	DWORD PTR _rc$[ebp], 0
; Line 131
	push	3
	push	131					; 00000083H
	push	OFFSET $SG84677
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 132
	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN2@MQTTPersis@3
; Line 134
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	add	esp, 4
	mov	DWORD PTR _rc$[ebp], eax
; Line 135
	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR [eax+76], 0
; Line 137
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	cmp	DWORD PTR [edx+4], OFFSET _pstopen
	jne	SHORT $LN1@MQTTPersis@3
; Line 138
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	push	138					; 0000008aH
	push	OFFSET $SG84682
	call	_myfree
	add	esp, 12					; 0000000cH
$LN1@MQTTPersis@3:
; Line 140
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [edx+80], 0
$LN2@MQTTPersis@3:
; Line 143
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	143					; 0000008fH
	push	OFFSET $SG84684
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 144
	mov	eax, DWORD PTR _rc$[ebp]
; Line 145
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_close ENDP
_TEXT	ENDS
PUBLIC	_MQTTPersistence_clear
; Function compile flags: /Odtp
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_c$ = 8							; size = 4
_MQTTPersistence_clear PROC
; Line 153
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 154
	mov	DWORD PTR _rc$[ebp], 0
; Line 156
	push	3
	push	156					; 0000009cH
	push	OFFSET $SG84689
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 157
	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN1@MQTTPersis@4
; Line 158
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	add	esp, 4
	mov	DWORD PTR _rc$[ebp], eax
$LN1@MQTTPersis@4:
; Line 160
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	160					; 000000a0H
	push	OFFSET $SG84692
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 161
	mov	eax, DWORD PTR _rc$[ebp]
; Line 162
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_clear ENDP
_TEXT	ENDS
PUBLIC	_MQTTPersistence_wrapMsgID
PUBLIC	_MQTTPersistence_insertInOrder
PUBLIC	_MQTTPersistence_restorePacket
EXTRN	_Log:PROC
EXTRN	__imp__sprintf:PROC
EXTRN	_MQTTPacket_freePublish:PROC
EXTRN	_ListAppend:PROC
EXTRN	_MQTTProtocol_createMessage:PROC
EXTRN	__imp__strstr:PROC
EXTRN	__imp__strncmp:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_pubrel$84750 = -64					; size = 4
_key$84752 = -60					; size = 4
_msg$84737 = -56					; size = 4
_key$84739 = -52					; size = 4
_publish$84735 = -48					; size = 4
_msg$84728 = -44					; size = 4
_publish$84726 = -40					; size = 4
_pack$84720 = -36					; size = 4
_msgs_rcvd$ = -32					; size = 4
_buffer$ = -28						; size = 4
_nkeys$ = -24						; size = 4
_msgkeys$ = -20						; size = 4
_i$ = -16						; size = 4
_msgs_sent$ = -12					; size = 4
_rc$ = -8						; size = 4
_buflen$ = -4						; size = 4
_c$ = 8							; size = 4
_MQTTPersistence_restore PROC
; Line 172
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
; Line 173
	mov	DWORD PTR _rc$[ebp], 0
; Line 174
	mov	DWORD PTR _msgkeys$[ebp], 0
; Line 175
	mov	DWORD PTR _buffer$[ebp], 0
; Line 177
	mov	DWORD PTR _i$[ebp], 0
; Line 178
	mov	DWORD PTR _msgs_sent$[ebp], 0
; Line 179
	mov	DWORD PTR _msgs_rcvd$[ebp], 0
; Line 181
	push	3
	push	181					; 000000b5H
	push	OFFSET $SG84706
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 182
	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	$LN20@MQTTPersis@5
	lea	ecx, DWORD PTR _nkeys$[ebp]
	push	ecx
	lea	edx, DWORD PTR _msgkeys$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], 0
	jne	$LN20@MQTTPersis@5
$LN19@MQTTPersis@5:
; Line 184
	cmp	DWORD PTR _rc$[ebp], 0
	jne	$LN18@MQTTPersis@5
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nkeys$[ebp]
	jge	$LN18@MQTTPersis@5
; Line 186
	push	OFFSET $SG84712
	call	_strlen
	add	esp, 4
	push	eax
	push	OFFSET $SG84713
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _msgkeys$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN17@MQTTPersis@5
	jmp	$LN16@MQTTPersis@5
$LN17@MQTTPersis@5:
; Line 188
	push	OFFSET $SG84716
	call	_strlen
	add	esp, 4
	push	eax
	push	OFFSET $SG84717
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _msgkeys$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN15@MQTTPersis@5
	jmp	$LN16@MQTTPersis@5
$LN15@MQTTPersis@5:
; Line 190
	lea	eax, DWORD PTR _buflen$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _msgkeys$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], 0
	jne	$LN16@MQTTPersis@5
; Line 192
	mov	ecx, DWORD PTR _buflen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_MQTTPersistence_restorePacket
	add	esp, 8
	mov	DWORD PTR _pack$84720[ebp], eax
; Line 193
	cmp	DWORD PTR _pack$84720[ebp], 0
	je	$LN12@MQTTPersis@5
; Line 195
	push	OFFSET $SG84725
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _msgkeys$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp__strstr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@MQTTPersis@5
; Line 197
	mov	eax, DWORD PTR _pack$84720[ebp]
	mov	DWORD PTR _publish$84726[ebp], eax
; Line 198
	mov	DWORD PTR _msg$84728[ebp], 0
; Line 199
	mov	ecx, DWORD PTR _publish$84726[ebp]
	mov	edx, DWORD PTR [ecx]
	and	edx, 1
	push	edx
	mov	eax, DWORD PTR _publish$84726[ebp]
	mov	ecx, DWORD PTR [eax]
	shr	ecx, 1
	and	ecx, 3
	push	ecx
	lea	edx, DWORD PTR _msg$84728[ebp]
	push	edx
	mov	eax, DWORD PTR _publish$84726[ebp]
	push	eax
	call	_MQTTProtocol_createMessage
	add	esp, 16					; 00000010H
	mov	DWORD PTR _msg$84728[ebp], eax
; Line 200
	mov	ecx, DWORD PTR _msg$84728[ebp]
	mov	BYTE PTR [ecx+24], 6
; Line 202
	mov	edx, DWORD PTR _msg$84728[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _msg$84728[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	call	_ListAppend
	add	esp, 12					; 0000000cH
; Line 203
	mov	ecx, DWORD PTR _publish$84726[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 204
	mov	edx, DWORD PTR _publish$84726[ebp]
	push	edx
	call	_MQTTPacket_freePublish
	add	esp, 4
; Line 205
	mov	eax, DWORD PTR _msgs_rcvd$[ebp]
	add	eax, 1
	mov	DWORD PTR _msgs_rcvd$[ebp], eax
	jmp	$LN10@MQTTPersis@5
$LN11@MQTTPersis@5:
; Line 207
	push	OFFSET $SG84734
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _msgkeys$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR __imp__strstr
	add	esp, 8
	test	eax, eax
	je	$LN9@MQTTPersis@5
; Line 209
	mov	ecx, DWORD PTR _pack$84720[ebp]
	mov	DWORD PTR _publish$84735[ebp], ecx
; Line 210
	mov	DWORD PTR _msg$84737[ebp], 0
; Line 211
	push	9
	push	211					; 000000d3H
	push	OFFSET $SG84740
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$84739[ebp], eax
; Line 212
	mov	edx, DWORD PTR _publish$84735[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG84741
	push	OFFSET $SG84742
	mov	ecx, DWORD PTR _key$84739[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
; Line 213
	mov	edx, DWORD PTR _publish$84735[ebp]
	mov	eax, DWORD PTR [edx]
	and	eax, 1
	push	eax
	mov	ecx, DWORD PTR _publish$84735[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 1
	and	edx, 3
	push	edx
	lea	eax, DWORD PTR _msg$84737[ebp]
	push	eax
	mov	ecx, DWORD PTR _publish$84735[ebp]
	push	ecx
	call	_MQTTProtocol_createMessage
	add	esp, 16					; 00000010H
	mov	DWORD PTR _msg$84737[ebp], eax
; Line 214
	mov	edx, DWORD PTR _key$84739[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@MQTTPersis@5
; Line 216
	mov	edx, DWORD PTR _msg$84737[ebp]
	mov	BYTE PTR [edx+24], 7
$LN8@MQTTPersis@5:
; Line 219
	mov	eax, DWORD PTR _msg$84737[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
; Line 220
	mov	ecx, DWORD PTR _msg$84737[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _msg$84737[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	_MQTTPersistence_insertInOrder
	add	esp, 12					; 0000000cH
; Line 221
	mov	eax, DWORD PTR _publish$84735[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 222
	mov	ecx, DWORD PTR _publish$84735[ebp]
	push	ecx
	call	_MQTTPacket_freePublish
	add	esp, 4
; Line 223
	mov	edx, DWORD PTR _key$84739[ebp]
	push	edx
	push	223					; 000000dfH
	push	OFFSET $SG84745
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 224
	mov	eax, DWORD PTR _msgs_sent$[ebp]
	add	eax, 1
	mov	DWORD PTR _msgs_sent$[ebp], eax
	jmp	$LN10@MQTTPersis@5
$LN9@MQTTPersis@5:
; Line 226
	push	OFFSET $SG84749
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _msgkeys$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR __imp__strstr
	add	esp, 8
	test	eax, eax
	je	$LN10@MQTTPersis@5
; Line 229
	mov	ecx, DWORD PTR _pack$84720[ebp]
	mov	DWORD PTR _pubrel$84750[ebp], ecx
; Line 230
	push	9
	push	230					; 000000e6H
	push	OFFSET $SG84753
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$84752[ebp], eax
; Line 231
	mov	edx, DWORD PTR _pubrel$84750[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	OFFSET $SG84754
	push	OFFSET $SG84755
	mov	ecx, DWORD PTR _key$84752[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
; Line 232
	mov	edx, DWORD PTR _key$84752[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax+32]
	call	ecx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@MQTTPersis@5
; Line 233
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _msgkeys$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
$LN5@MQTTPersis@5:
; Line 234
	mov	ecx, DWORD PTR _pubrel$84750[ebp]
	push	ecx
	push	234					; 000000eaH
	push	OFFSET $SG84757
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 235
	mov	edx, DWORD PTR _key$84752[ebp]
	push	edx
	push	235					; 000000ebH
	push	OFFSET $SG84758
	call	_myfree
	add	esp, 12					; 0000000cH
$LN10@MQTTPersis@5:
; Line 238
	jmp	SHORT $LN16@MQTTPersis@5
$LN12@MQTTPersis@5:
; Line 239
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _msgkeys$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
$LN16@MQTTPersis@5:
; Line 241
	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN3@MQTTPersis@5
; Line 243
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	push	243					; 000000f3H
	push	OFFSET $SG84761
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 244
	mov	DWORD PTR _buffer$[ebp], 0
$LN3@MQTTPersis@5:
; Line 246
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _msgkeys$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN2@MQTTPersis@5
; Line 247
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _msgkeys$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	push	247					; 000000f7H
	push	OFFSET $SG84764
	call	_myfree
	add	esp, 12					; 0000000cH
$LN2@MQTTPersis@5:
; Line 248
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
; Line 249
	jmp	$LN19@MQTTPersis@5
$LN18@MQTTPersis@5:
; Line 250
	cmp	DWORD PTR _msgkeys$[ebp], 0
	je	SHORT $LN20@MQTTPersis@5
; Line 251
	mov	eax, DWORD PTR _msgkeys$[ebp]
	push	eax
	push	251					; 000000fbH
	push	OFFSET $SG84766
	call	_myfree
	add	esp, 12					; 0000000cH
$LN20@MQTTPersis@5:
; Line 254
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _msgs_rcvd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msgs_sent$[ebp]
	push	ecx
	push	OFFSET $SG84767
	push	-1
	push	3
	call	_Log
	add	esp, 24					; 00000018H
; Line 255
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	_MQTTPersistence_wrapMsgID
	add	esp, 4
; Line 257
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	257					; 00000101H
	push	OFFSET $SG84768
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 258
	mov	eax, DWORD PTR _rc$[ebp]
; Line 259
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_restore ENDP
_TEXT	ENDS
EXTRN	_new_packets:BYTE
; Function compile flags: /Odtp
_TEXT	SEGMENT
_header$ = -28						; size = 4
_ptype$ = -24						; size = 4
_c$ = -17						; size = 1
_remaining_length$ = -16				; size = 4
_fixed_header_length$ = -12				; size = 4
_multiplier$ = -8					; size = 4
_pack$ = -4						; size = 4
_buffer$ = 8						; size = 4
_buflen$ = 12						; size = 4
_MQTTPersistence_restorePacket PROC
; Line 268
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 269
	mov	DWORD PTR _pack$[ebp], 0
; Line 271
	mov	DWORD PTR _fixed_header_length$[ebp], 1
	mov	DWORD PTR _remaining_length$[ebp], 0
; Line 273
	mov	DWORD PTR _multiplier$[ebp], 1
; Line 276
	push	3
	push	276					; 00000114H
	push	OFFSET $SG84783
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 277
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _header$[ebp], cl
$LN5@MQTTPersis@6:
; Line 281
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer$[ebp], edx
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
; Line 282
	movsx	edx, BYTE PTR _c$[ebp]
	and	edx, 127				; 0000007fH
	imul	edx, DWORD PTR _multiplier$[ebp]
	add	edx, DWORD PTR _remaining_length$[ebp]
	mov	DWORD PTR _remaining_length$[ebp], edx
; Line 283
	mov	eax, DWORD PTR _multiplier$[ebp]
	shl	eax, 7
	mov	DWORD PTR _multiplier$[ebp], eax
; Line 284
	mov	ecx, DWORD PTR _fixed_header_length$[ebp]
	add	ecx, 1
	mov	DWORD PTR _fixed_header_length$[ebp], ecx
; Line 285
	movsx	edx, BYTE PTR _c$[ebp]
	and	edx, 128				; 00000080H
	jne	SHORT $LN5@MQTTPersis@6
; Line 287
	mov	eax, DWORD PTR _fixed_header_length$[ebp]
	add	eax, DWORD PTR _remaining_length$[ebp]
	cmp	eax, DWORD PTR _buflen$[ebp]
	jne	SHORT $LN2@MQTTPersis@6
; Line 289
	mov	ecx, DWORD PTR _header$[ebp]
	shr	ecx, 4
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _ptype$[ebp], ecx
; Line 290
	cmp	DWORD PTR _ptype$[ebp], 1
	jl	SHORT $LN2@MQTTPersis@6
	cmp	DWORD PTR _ptype$[ebp], 14		; 0000000eH
	jg	SHORT $LN2@MQTTPersis@6
	mov	edx, DWORD PTR _ptype$[ebp]
	cmp	DWORD PTR _new_packets[edx*4], 0
	je	SHORT $LN2@MQTTPersis@6
; Line 291
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer$[ebp], eax
	mov	ecx, DWORD PTR _remaining_length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	movzx	eax, BYTE PTR _header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ptype$[ebp]
	mov	edx, DWORD PTR _new_packets[ecx*4]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pack$[ebp], eax
$LN2@MQTTPersis@6:
; Line 294
	push	3
	push	0
	push	294					; 00000126H
	push	OFFSET $SG84791
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 295
	mov	eax, DWORD PTR _pack$[ebp]
; Line 296
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_restorePacket ENDP
_TEXT	ENDS
EXTRN	_ListInsert:PROC
EXTRN	_ListNextElement:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_index$ = -8						; size = 4
_current$ = -4						; size = 4
_list$ = 8						; size = 4
_content$ = 12						; size = 4
_size$ = 16						; size = 4
_MQTTPersistence_insertInOrder PROC
; Line 306
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 307
	mov	DWORD PTR _index$[ebp], 0
; Line 308
	mov	DWORD PTR _current$[ebp], 0
; Line 310
	push	3
	push	310					; 00000136H
	push	OFFSET $SG84803
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
$LN3@MQTTPersis@7:
; Line 311
	lea	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_ListNextElement
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@MQTTPersis@7
	cmp	DWORD PTR _index$[ebp], 0
	jne	SHORT $LN2@MQTTPersis@7
; Line 313
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR [eax+8]
	jge	SHORT $LN1@MQTTPersis@7
; Line 314
	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR _index$[ebp], eax
$LN1@MQTTPersis@7:
; Line 315
	jmp	SHORT $LN3@MQTTPersis@7
$LN2@MQTTPersis@7:
; Line 317
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_ListInsert
	add	esp, 16					; 00000010H
; Line 318
	push	3
	push	0
	push	318					; 0000013eH
	push	OFFSET $SG84813
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 319
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_insertInOrder ENDP
_TEXT	ENDS
PUBLIC	_MQTTPersistence_put
EXTRN	_ListFindItem:PROC
EXTRN	_bstate:DWORD
EXTRN	_clientSocketCompare:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_client$ = -28						; size = 4
_lens$ = -24						; size = 4
_bufs$ = -20						; size = 4
_key$ = -16						; size = 4
_nbufs$ = -12						; size = 4
_i$ = -8						; size = 4
_rc$ = -4						; size = 4
_socket$ = 8						; size = 4
_buf0$ = 12						; size = 4
_buf0len$ = 16						; size = 4
_count$ = 20						; size = 4
_buffers$ = 24						; size = 4
_buflens$ = 28						; size = 4
_htype$ = 32						; size = 4
_msgId$ = 36						; size = 4
_scr$ = 40						; size = 4
_MQTTPersistence_put PROC
; Line 338
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
; Line 339
	mov	DWORD PTR _rc$[ebp], 0
; Line 342
	mov	DWORD PTR _lens$[ebp], 0
; Line 343
	mov	DWORD PTR _bufs$[ebp], 0
; Line 345
	mov	DWORD PTR _client$[ebp], 0
; Line 347
	push	3
	push	347					; 0000015bH
	push	OFFSET $SG84844
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 348
	push	OFFSET _clientSocketCompare
	lea	eax, DWORD PTR _socket$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bstate
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_ListFindItem
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _client$[ebp], eax
; Line 349
	mov	ecx, DWORD PTR _client$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	je	$LN8@MQTTPersis@8
; Line 351
	push	9
	push	351					; 0000015fH
	push	OFFSET $SG84848
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$[ebp], eax
; Line 352
	mov	edx, DWORD PTR _count$[ebp]
	add	edx, 1
	mov	DWORD PTR _nbufs$[ebp], edx
; Line 353
	mov	eax, DWORD PTR _nbufs$[ebp]
	shl	eax, 2
	push	eax
	push	353					; 00000161H
	push	OFFSET $SG84851
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _lens$[ebp], eax
; Line 354
	mov	ecx, DWORD PTR _nbufs$[ebp]
	shl	ecx, 2
	push	ecx
	push	354					; 00000162H
	push	OFFSET $SG84854
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bufs$[ebp], eax
; Line 355
	mov	edx, DWORD PTR _lens$[ebp]
	mov	eax, DWORD PTR _buf0len$[ebp]
	mov	DWORD PTR [edx], eax
; Line 356
	mov	ecx, DWORD PTR _bufs$[ebp]
	mov	edx, DWORD PTR _buf0$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 357
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@MQTTPersis@8
$LN6@MQTTPersis@8:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@MQTTPersis@8:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _count$[ebp]
	jge	SHORT $LN5@MQTTPersis@8
; Line 359
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _lens$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _buflens$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4+4], ecx
; Line 360
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _bufs$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _buffers$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4+4], ecx
; Line 361
	jmp	SHORT $LN6@MQTTPersis@8
$LN5@MQTTPersis@8:
; Line 364
	cmp	DWORD PTR _scr$[ebp], 0
	jne	SHORT $LN4@MQTTPersis@8
; Line 366
	cmp	DWORD PTR _htype$[ebp], 3
	jne	SHORT $LN3@MQTTPersis@8
; Line 367
	mov	edx, DWORD PTR _msgId$[ebp]
	push	edx
	push	OFFSET $SG84860
	push	OFFSET $SG84861
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
$LN3@MQTTPersis@8:
; Line 368
	cmp	DWORD PTR _htype$[ebp], 6
	jne	SHORT $LN4@MQTTPersis@8
; Line 369
	mov	ecx, DWORD PTR _msgId$[ebp]
	push	ecx
	push	OFFSET $SG84863
	push	OFFSET $SG84864
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
$LN4@MQTTPersis@8:
; Line 371
	cmp	DWORD PTR _scr$[ebp], 1
	jne	SHORT $LN1@MQTTPersis@8
; Line 372
	mov	eax, DWORD PTR _msgId$[ebp]
	push	eax
	push	OFFSET $SG84866
	push	OFFSET $SG84867
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
$LN1@MQTTPersis@8:
; Line 374
	mov	edx, DWORD PTR _lens$[ebp]
	push	edx
	mov	eax, DWORD PTR _bufs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nbufs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	eax, DWORD PTR _client$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _client$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _rc$[ebp], eax
; Line 376
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	push	376					; 00000178H
	push	OFFSET $SG84868
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 377
	mov	eax, DWORD PTR _lens$[ebp]
	push	eax
	push	377					; 00000179H
	push	OFFSET $SG84869
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 378
	mov	ecx, DWORD PTR _bufs$[ebp]
	push	ecx
	push	378					; 0000017aH
	push	OFFSET $SG84870
	call	_myfree
	add	esp, 12					; 0000000cH
$LN8@MQTTPersis@8:
; Line 381
	push	3
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	push	381					; 0000017dH
	push	OFFSET $SG84871
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 382
	mov	eax, DWORD PTR _rc$[ebp]
; Line 383
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_put ENDP
_TEXT	ENDS
PUBLIC	_MQTTPersistence_remove
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_key$84885 = -8						; size = 4
_rc$ = -4						; size = 4
_c$ = 8							; size = 4
_type$ = 12						; size = 4
_qos$ = 16						; size = 4
_msgId$ = 20						; size = 4
_MQTTPersistence_remove PROC
; Line 396
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 397
	mov	DWORD PTR _rc$[ebp], 0
; Line 399
	push	3
	push	399					; 0000018fH
	push	OFFSET $SG84882
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 400
	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	$LN3@MQTTPersis@9
; Line 402
	push	9
	push	402					; 00000192H
	push	OFFSET $SG84886
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _key$84885[ebp], eax
; Line 403
	push	OFFSET $SG84888
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@MQTTPersis@9
	cmp	DWORD PTR _qos$[ebp], 2
	jne	SHORT $LN2@MQTTPersis@9
; Line 405
	mov	edx, DWORD PTR _msgId$[ebp]
	push	edx
	push	OFFSET $SG84889
	push	OFFSET $SG84890
	mov	eax, DWORD PTR _key$84885[ebp]
	push	eax
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
; Line 406
	mov	ecx, DWORD PTR _key$84885[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
; Line 407
	mov	ecx, DWORD PTR _msgId$[ebp]
	push	ecx
	push	OFFSET $SG84891
	push	OFFSET $SG84892
	mov	edx, DWORD PTR _key$84885[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
; Line 408
	mov	eax, DWORD PTR _key$84885[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
; Line 410
	jmp	SHORT $LN1@MQTTPersis@9
$LN2@MQTTPersis@9:
; Line 412
	mov	eax, DWORD PTR _msgId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	OFFSET $SG84894
	mov	edx, DWORD PTR _key$84885[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
; Line 413
	mov	eax, DWORD PTR _key$84885[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
$LN1@MQTTPersis@9:
; Line 415
	mov	eax, DWORD PTR _key$84885[ebp]
	push	eax
	push	415					; 0000019fH
	push	OFFSET $SG84895
	call	_myfree
	add	esp, 12					; 0000000cH
$LN3@MQTTPersis@9:
; Line 418
	push	3
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	418					; 000001a2H
	push	OFFSET $SG84896
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 419
	mov	eax, DWORD PTR _rc$[ebp]
; Line 420
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_remove ENDP
; Function compile flags: /Odtp
_curPrevMsgID$84917 = -32				; size = 4
_curMsgID$84915 = -28					; size = 4
_curgap$84919 = -24					; size = 4
_lastMsgID$84908 = -20					; size = 4
_firstMsgID$84906 = -16					; size = 4
_gap$84910 = -12					; size = 4
_wrapel$ = -8						; size = 4
_current$ = -4						; size = 4
_client$ = 8						; size = 4
_MQTTPersistence_wrapMsgID PROC
; Line 429
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 430
	mov	DWORD PTR _wrapel$[ebp], 0
; Line 431
	mov	DWORD PTR _current$[ebp], 0
; Line 433
	push	3
	push	433					; 000001b1H
	push	OFFSET $SG84904
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 434
	mov	eax, DWORD PTR _client$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+12], 0
	jle	$LN5@MQTTPersis@10
; Line 436
	mov	edx, DWORD PTR _client$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _firstMsgID$84906[ebp], eax
; Line 437
	mov	ecx, DWORD PTR _client$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _lastMsgID$84908[ebp], edx
; Line 438
	mov	eax, 65535				; 0000ffffH
	sub	eax, DWORD PTR _lastMsgID$84908[ebp]
	add	eax, DWORD PTR _firstMsgID$84906[ebp]
	mov	DWORD PTR _gap$84910[ebp], eax
; Line 439
	lea	ecx, DWORD PTR _current$[ebp]
	push	ecx
	mov	edx, DWORD PTR _client$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	_ListNextElement
	add	esp, 8
	mov	DWORD PTR _current$[ebp], eax
$LN4@MQTTPersis@10:
; Line 441
	lea	ecx, DWORD PTR _current$[ebp]
	push	ecx
	mov	edx, DWORD PTR _client$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	_ListNextElement
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@MQTTPersis@10
; Line 443
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _curMsgID$84915[ebp], eax
; Line 444
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _curPrevMsgID$84917[ebp], ecx
; Line 445
	mov	edx, DWORD PTR _curMsgID$84915[ebp]
	sub	edx, DWORD PTR _curPrevMsgID$84917[ebp]
	mov	DWORD PTR _curgap$84919[ebp], edx
; Line 446
	mov	eax, DWORD PTR _curgap$84919[ebp]
	cmp	eax, DWORD PTR _gap$84910[ebp]
	jle	SHORT $LN2@MQTTPersis@10
; Line 448
	mov	ecx, DWORD PTR _curgap$84919[ebp]
	mov	DWORD PTR _gap$84910[ebp], ecx
; Line 449
	mov	edx, DWORD PTR _current$[ebp]
	mov	DWORD PTR _wrapel$[ebp], edx
$LN2@MQTTPersis@10:
; Line 451
	jmp	SHORT $LN4@MQTTPersis@10
$LN5@MQTTPersis@10:
; Line 454
	cmp	DWORD PTR _wrapel$[ebp], 0
	je	SHORT $LN1@MQTTPersis@10
; Line 457
	mov	eax, DWORD PTR _client$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _client$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
; Line 458
	mov	ecx, DWORD PTR _client$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _client$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax+4], ecx
; Line 459
	mov	edx, DWORD PTR _client$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _wrapel$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 460
	mov	edx, DWORD PTR _client$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _wrapel$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
; Line 461
	mov	eax, DWORD PTR _client$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx], 0
; Line 462
	mov	eax, DWORD PTR _client$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], 0
$LN1@MQTTPersis@10:
; Line 464
	push	3
	push	0
	push	464					; 000001d0H
	push	OFFSET $SG84926
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 465
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_wrapMsgID ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_MQTTPersistence_unpersistQueueEntry
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_key$ = -20						; size = 9
__$ArrayPad$ = -8					; size = 4
_rc$ = -4						; size = 4
_client$ = 8						; size = 4
_qe$ = 12						; size = 4
_MQTTPersistence_unpersistQueueEntry PROC
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 471
	mov	DWORD PTR _rc$[ebp], 0
; Line 474
	push	3
	push	474					; 000001daH
	push	OFFSET $SG84934
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 475
	mov	eax, DWORD PTR _qe$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	OFFSET $SG84935
	push	OFFSET $SG84936
	lea	edx, DWORD PTR _key$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
; Line 476
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _client$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _client$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], 0
	je	SHORT $LN1@MQTTPersis@11
; Line 477
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	OFFSET $SG84938
	push	0
	push	5
	call	_Log
	add	esp, 16					; 00000010H
$LN1@MQTTPersis@11:
; Line 478
	push	3
	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	push	478					; 000001deH
	push	OFFSET $SG84939
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 479
	mov	eax, DWORD PTR _rc$[ebp]
; Line 480
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_unpersistQueueEntry ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_MQTTPersistence_persistQueueEntry
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv165 = -40						; size = 4
_lens$ = -36						; size = 4
_bufindex$ = -32					; size = 4
_bufs$ = -28						; size = 4
_key$ = -24						; size = 9
__$ArrayPad$ = -12					; size = 4
_nbufs$ = -8						; size = 4
_rc$ = -4						; size = 4
_aclient$ = 8						; size = 4
_qe$ = 12						; size = 4
_MQTTPersistence_persistQueueEntry PROC
; Line 484
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 485
	mov	DWORD PTR _rc$[ebp], 0
; Line 486
	mov	DWORD PTR _nbufs$[ebp], 8
; Line 487
	mov	DWORD PTR _bufindex$[ebp], 0
; Line 489
	mov	DWORD PTR _lens$[ebp], 0
; Line 490
	mov	DWORD PTR _bufs$[ebp], 0
; Line 492
	push	3
	push	492					; 000001ecH
	push	OFFSET $SG84953
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 493
	mov	eax, DWORD PTR _nbufs$[ebp]
	shl	eax, 2
	push	eax
	push	493					; 000001edH
	push	OFFSET $SG84956
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _lens$[ebp], eax
; Line 494
	mov	ecx, DWORD PTR _nbufs$[ebp]
	shl	ecx, 2
	push	ecx
	push	494					; 000001eeH
	push	OFFSET $SG84958
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bufs$[ebp], eax
; Line 496
	mov	edx, DWORD PTR _qe$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 8
	mov	ecx, DWORD PTR _bufindex$[ebp]
	mov	edx, DWORD PTR _bufs$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 497
	mov	eax, DWORD PTR _bufindex$[ebp]
	mov	ecx, DWORD PTR _lens$[ebp]
	mov	DWORD PTR [ecx+eax*4], 4
	mov	edx, DWORD PTR _bufindex$[ebp]
	add	edx, 1
	mov	DWORD PTR _bufindex$[ebp], edx
; Line 499
	mov	eax, DWORD PTR _qe$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _bufindex$[ebp]
	mov	eax, DWORD PTR _bufs$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 500
	mov	edx, DWORD PTR _qe$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _bufindex$[ebp]
	mov	edx, DWORD PTR _lens$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _bufindex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _bufindex$[ebp], ecx
; Line 502
	mov	edx, DWORD PTR _qe$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _bufindex$[ebp]
	mov	edx, DWORD PTR _bufs$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 503
	mov	eax, DWORD PTR _bufindex$[ebp]
	mov	ecx, DWORD PTR _lens$[ebp]
	mov	DWORD PTR [ecx+eax*4], 4
	mov	edx, DWORD PTR _bufindex$[ebp]
	add	edx, 1
	mov	DWORD PTR _bufindex$[ebp], edx
; Line 505
	mov	eax, DWORD PTR _qe$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _bufindex$[ebp]
	mov	eax, DWORD PTR _bufs$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 506
	mov	ecx, DWORD PTR _bufindex$[ebp]
	mov	edx, DWORD PTR _lens$[ebp]
	mov	DWORD PTR [edx+ecx*4], 4
	mov	eax, DWORD PTR _bufindex$[ebp]
	add	eax, 1
	mov	DWORD PTR _bufindex$[ebp], eax
; Line 508
	mov	ecx, DWORD PTR _qe$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 24					; 00000018H
	mov	eax, DWORD PTR _bufindex$[ebp]
	mov	ecx, DWORD PTR _bufs$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 509
	mov	edx, DWORD PTR _bufindex$[ebp]
	mov	eax, DWORD PTR _lens$[ebp]
	mov	DWORD PTR [eax+edx*4], 4
	mov	ecx, DWORD PTR _bufindex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _bufindex$[ebp], ecx
; Line 511
	mov	edx, DWORD PTR _qe$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 28					; 0000001cH
	mov	ecx, DWORD PTR _bufindex$[ebp]
	mov	edx, DWORD PTR _bufs$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 512
	mov	eax, DWORD PTR _bufindex$[ebp]
	mov	ecx, DWORD PTR _lens$[ebp]
	mov	DWORD PTR [ecx+eax*4], 4
	mov	edx, DWORD PTR _bufindex$[ebp]
	add	edx, 1
	mov	DWORD PTR _bufindex$[ebp], edx
; Line 514
	mov	eax, DWORD PTR _bufindex$[ebp]
	mov	ecx, DWORD PTR _bufs$[ebp]
	mov	edx, DWORD PTR _qe$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 515
	mov	eax, DWORD PTR _qe$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	edx, DWORD PTR _bufindex$[ebp]
	mov	ecx, DWORD PTR _lens$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	edx, DWORD PTR _bufindex$[ebp]
	add	edx, 1
	mov	DWORD PTR _bufindex$[ebp], edx
; Line 517
	mov	eax, DWORD PTR _qe$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _bufindex$[ebp]
	mov	edx, DWORD PTR _bufs$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 518
	mov	eax, DWORD PTR _bufindex$[ebp]
	mov	ecx, DWORD PTR _lens$[ebp]
	mov	DWORD PTR [ecx+eax*4], 4
	mov	edx, DWORD PTR _bufindex$[ebp]
	add	edx, 1
	mov	DWORD PTR _bufindex$[ebp], edx
; Line 520
	mov	eax, DWORD PTR _aclient$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 1
	mov	DWORD PTR tv165[ebp], ecx
	mov	edx, DWORD PTR _aclient$[ebp]
	mov	eax, DWORD PTR tv165[ebp]
	mov	DWORD PTR [edx+72], eax
	mov	ecx, DWORD PTR tv165[ebp]
	push	ecx
	push	OFFSET $SG84959
	push	OFFSET $SG84960
	lea	edx, DWORD PTR _key$[ebp]
	push	edx
	call	DWORD PTR __imp__sprintf
	add	esp, 16					; 00000010H
; Line 521
	mov	eax, DWORD PTR _qe$[ebp]
	mov	ecx, DWORD PTR _aclient$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR [eax+12], edx
; Line 523
	mov	eax, DWORD PTR _lens$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bufs$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nbufs$[ebp]
	push	edx
	lea	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aclient$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _aclient$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	add	esp, 20					; 00000014H
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], 0
	je	SHORT $LN1@MQTTPersis@12
; Line 524
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	OFFSET $SG84963
	push	0
	push	5
	call	_Log
	add	esp, 16					; 00000010H
$LN1@MQTTPersis@12:
; Line 526
	mov	ecx, DWORD PTR _lens$[ebp]
	push	ecx
	push	526					; 0000020eH
	push	OFFSET $SG84964
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 527
	mov	edx, DWORD PTR _bufs$[ebp]
	push	edx
	push	527					; 0000020fH
	push	OFFSET $SG84965
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 529
	push	3
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	push	529					; 00000211H
	push	OFFSET $SG84966
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 530
	mov	eax, DWORD PTR _rc$[ebp]
; Line 531
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_persistQueueEntry ENDP
_TEXT	ENDS
PUBLIC	_MQTTPersistence_restoreQueueEntry
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_data_size$ = -12					; size = 4
_qe$ = -8						; size = 4
_ptr$ = -4						; size = 4
_buffer$ = 8						; size = 4
_buflen$ = 12						; size = 4
_MQTTPersistence_restoreQueueEntry PROC
; Line 535
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 536
	mov	DWORD PTR _qe$[ebp], 0
; Line 537
	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _ptr$[ebp], eax
; Line 540
	push	3
	push	540					; 0000021cH
	push	OFFSET $SG84977
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 541
	push	16					; 00000010H
	push	541					; 0000021dH
	push	OFFSET $SG84979
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _qe$[ebp], eax
; Line 542
	push	16					; 00000010H
	push	0
	mov	ecx, DWORD PTR _qe$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 544
	push	32					; 00000020H
	push	544					; 00000220H
	push	OFFSET $SG84982
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _qe$[ebp]
	mov	DWORD PTR [edx], eax
; Line 545
	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _qe$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 547
	mov	edx, DWORD PTR _qe$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
; Line 548
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _ptr$[ebp], eax
; Line 550
	mov	ecx, DWORD PTR _qe$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _data_size$[ebp], eax
; Line 551
	mov	ecx, DWORD PTR _data_size$[ebp]
	push	ecx
	push	551					; 00000227H
	push	OFFSET $SG84986
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _qe$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], eax
; Line 552
	mov	edx, DWORD PTR _data_size$[ebp]
	push	edx
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _qe$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 553
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, DWORD PTR _data_size$[ebp]
	mov	DWORD PTR _ptr$[ebp], ecx
; Line 555
	mov	edx, DWORD PTR _qe$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx
; Line 556
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _ptr$[ebp], eax
; Line 558
	mov	ecx, DWORD PTR _qe$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+20], ecx
; Line 559
	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, 4
	mov	DWORD PTR _ptr$[ebp], edx
; Line 561
	mov	eax, DWORD PTR _qe$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ptr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+24], eax
; Line 562
	mov	ecx, DWORD PTR _ptr$[ebp]
	add	ecx, 4
	mov	DWORD PTR _ptr$[ebp], ecx
; Line 564
	mov	edx, DWORD PTR _qe$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+28], edx
; Line 565
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _ptr$[ebp], eax
; Line 567
	mov	ecx, DWORD PTR _ptr$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _data_size$[ebp], eax
; Line 568
	mov	edx, DWORD PTR _data_size$[ebp]
	push	edx
	push	568					; 00000238H
	push	OFFSET $SG84995
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _qe$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 569
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _qe$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 570
	mov	edx, DWORD PTR _ptr$[ebp]
	add	edx, DWORD PTR _data_size$[ebp]
	mov	DWORD PTR _ptr$[ebp], edx
; Line 572
	mov	eax, DWORD PTR _qe$[ebp]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
; Line 573
	mov	eax, DWORD PTR _ptr$[ebp]
	add	eax, 4
	mov	DWORD PTR _ptr$[ebp], eax
; Line 575
	push	3
	push	0
	push	575					; 0000023fH
	push	OFFSET $SG84999
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 576
	mov	eax, DWORD PTR _qe$[ebp]
; Line 577
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_restoreQueueEntry ENDP
_TEXT	ENDS
PUBLIC	_MQTTPersistence_insertInSeqOrder
; Function compile flags: /Odtp
_TEXT	SEGMENT
_index$ = -8						; size = 4
_current$ = -4						; size = 4
_list$ = 8						; size = 4
_qEntry$ = 12						; size = 4
_size$ = 16						; size = 4
_MQTTPersistence_insertInSeqOrder PROC
; Line 581
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 582
	mov	DWORD PTR _index$[ebp], 0
; Line 583
	mov	DWORD PTR _current$[ebp], 0
; Line 585
	push	3
	push	585					; 00000249H
	push	OFFSET $SG85012
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
$LN3@MQTTPersis@13:
; Line 586
	lea	eax, DWORD PTR _current$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_ListNextElement
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@MQTTPersis@13
	cmp	DWORD PTR _index$[ebp], 0
	jne	SHORT $LN2@MQTTPersis@13
; Line 588
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _qEntry$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR [eax+12]
	jae	SHORT $LN1@MQTTPersis@13
; Line 589
	mov	eax, DWORD PTR _current$[ebp]
	mov	DWORD PTR _index$[ebp], eax
$LN1@MQTTPersis@13:
; Line 590
	jmp	SHORT $LN3@MQTTPersis@13
$LN2@MQTTPersis@13:
; Line 591
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _qEntry$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_ListInsert
	add	esp, 16					; 00000010H
; Line 592
	push	3
	push	0
	push	592					; 00000250H
	push	OFFSET $SG85021
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 593
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_insertInSeqOrder ENDP
_TEXT	ENDS
PUBLIC	_MQTTPersistence_restoreMessageQueue
EXTRN	__imp__atoi:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv154 = -36						; size = 4
_qe$85043 = -32						; size = 4
_buffer$85035 = -28					; size = 4
_buflen$85037 = -24					; size = 4
_nkeys$ = -20						; size = 4
_msgkeys$ = -16						; size = 4
_i$ = -12						; size = 4
_rc$ = -8						; size = 4
_entries_restored$ = -4					; size = 4
_c$ = 8							; size = 4
_MQTTPersistence_restoreMessageQueue PROC
; Line 602
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 603
	mov	DWORD PTR _rc$[ebp], 0
; Line 606
	mov	DWORD PTR _i$[ebp], 0
; Line 607
	mov	DWORD PTR _entries_restored$[ebp], 0
; Line 609
	push	3
	push	609					; 00000261H
	push	OFFSET $SG85030
	call	_StackTrace_entry
	add	esp, 12					; 0000000cH
; Line 610
	mov	eax, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	$LN9@MQTTPersis@14
	lea	ecx, DWORD PTR _nkeys$[ebp]
	push	ecx
	lea	edx, DWORD PTR _msgkeys$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], 0
	jne	$LN9@MQTTPersis@14
$LN8@MQTTPersis@14:
; Line 612
	cmp	DWORD PTR _rc$[ebp], 0
	jne	$LN7@MQTTPersis@14
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _nkeys$[ebp]
	jge	$LN7@MQTTPersis@14
; Line 614
	mov	DWORD PTR _buffer$85035[ebp], 0
; Line 617
	push	OFFSET $SG85039
	call	_strlen
	add	esp, 4
	push	eax
	push	OFFSET $SG85040
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _msgkeys$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@MQTTPersis@14
	jmp	$LN5@MQTTPersis@14
$LN6@MQTTPersis@14:
; Line 619
	lea	eax, DWORD PTR _buflen$85037[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$85035[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _msgkeys$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
	cmp	DWORD PTR _rc$[ebp], 0
	jne	$LN5@MQTTPersis@14
; Line 621
	mov	ecx, DWORD PTR _buflen$85037[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$85035[ebp]
	push	edx
	call	_MQTTPersistence_restoreQueueEntry
	add	esp, 8
	mov	DWORD PTR _qe$85043[ebp], eax
; Line 623
	cmp	DWORD PTR _qe$85043[ebp], 0
	je	SHORT $LN5@MQTTPersis@14
; Line 625
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _msgkeys$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, 2
	push	edx
	call	DWORD PTR __imp__atoi
	add	esp, 4
	mov	ecx, DWORD PTR _qe$85043[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 626
	push	16					; 00000010H
	mov	edx, DWORD PTR _qe$85043[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_MQTTPersistence_insertInSeqOrder
	add	esp, 12					; 0000000cH
; Line 627
	mov	edx, DWORD PTR _buffer$85035[ebp]
	push	edx
	push	627					; 00000273H
	push	OFFSET $SG85046
	call	_myfree
	add	esp, 12					; 0000000cH
; Line 628
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _qe$85043[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+12]
	jbe	SHORT $LN12@MQTTPersis@14
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR tv154[ebp], ecx
	jmp	SHORT $LN13@MQTTPersis@14
$LN12@MQTTPersis@14:
	mov	edx, DWORD PTR _qe$85043[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv154[ebp], eax
$LN13@MQTTPersis@14:
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR tv154[ebp]
	mov	DWORD PTR [ecx+72], edx
; Line 629
	mov	eax, DWORD PTR _entries_restored$[ebp]
	add	eax, 1
	mov	DWORD PTR _entries_restored$[ebp], eax
$LN5@MQTTPersis@14:
; Line 632
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _msgkeys$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	je	SHORT $LN2@MQTTPersis@14
; Line 633
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _msgkeys$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	633					; 00000279H
	push	OFFSET $SG85048
	call	_myfree
	add	esp, 12					; 0000000cH
$LN2@MQTTPersis@14:
; Line 634
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
; Line 635
	jmp	$LN8@MQTTPersis@14
$LN7@MQTTPersis@14:
; Line 636
	cmp	DWORD PTR _msgkeys$[ebp], 0
	je	SHORT $LN9@MQTTPersis@14
; Line 637
	mov	ecx, DWORD PTR _msgkeys$[ebp]
	push	ecx
	push	637					; 0000027dH
	push	OFFSET $SG85051
	call	_myfree
	add	esp, 12					; 0000000cH
$LN9@MQTTPersis@14:
; Line 639
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _entries_restored$[ebp]
	push	ecx
	push	OFFSET $SG85052
	push	-1
	push	3
	call	_Log
	add	esp, 20					; 00000014H
; Line 640
	push	3
	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	push	640					; 00000280H
	push	OFFSET $SG85053
	call	_StackTrace_exit
	add	esp, 16					; 00000010H
; Line 641
	mov	eax, DWORD PTR _rc$[ebp]
; Line 642
	mov	esp, ebp
	pop	ebp
	ret	0
_MQTTPersistence_restoreMessageQueue ENDP
_TEXT	ENDS
END
