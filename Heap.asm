; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspaces\newagent2\Paho\org.eclipse.paho.mqtt.c\src\Heap.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_heap_mutex:DWORD
COMM	_Log_levels:DWORD
_DATA	ENDS
_BSS	SEGMENT
_state	DQ	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
_eyecatcher DD	088888888H
$SG81633 DB	'Memory allocation error', 00H
_errmsg	DD	FLAT:$SG81633
?multsize@?1??roundup@@9@9 DD 010H			; `roundup'::`2'::multsize
$SG81687 DB	'Allocating %d bytes in heap at file %s line %d ptr %p', 0aH
	DB	00H
	ORG $+1
$SG81707 DB	'Invalid %s eyecatcher %d in heap item at file %s line %d'
	DB	00H
	ORG $+3
?msg@?1??checkEyecatchers@@9@9 DD FLAT:$SG81707		; `checkEyecatchers'::`2'::msg
$SG81709 DB	'start', 00H
	ORG $+2
$SG81712 DB	'end', 00H
$SG81727 DB	'Failed to remove heap item at file %s line %d', 00H
	ORG $+2
$SG81731 DB	'Freeing %d bytes in heap at file %s line %d, heap use no'
	DB	'w %d bytes', 0aH, 00H
$SG81764 DB	'Failed to reallocate heap item at file %s line %d', 00H
	ORG $+2
$SG81796 DB	'Heap scan start, total %d bytes', 00H
$SG81803 DB	'Heap element size %d, line %d, file %s, ptr %p', 00H
	ORG $+1
$SG81806 DB	'  Content %*.s', 00H
	ORG $+1
$SG81807 DB	'Heap scan end', 00H
	ORG $+2
$SG81810 DB	'Maximum heap use was %d bytes', 00H
	ORG $+2
$SG81812 DB	'Some memory not freed at shutdown, possible memory leak', 00H
_DATA	ENDS
PUBLIC	_roundup
; Function compile flags: /Odtp
_TEXT	SEGMENT
_size$ = 8						; size = 4
_roundup PROC
; File c:\workspaces\newagent2\paho\org.eclipse.paho.mqtt.c\src\heap.c
; Line 78
	push	ebp
	mov	ebp, esp
; Line 81
	mov	eax, DWORD PTR _size$[ebp]
	cdq
	idiv	DWORD PTR ?multsize@?1??roundup@@9@9
	test	edx, edx
	je	SHORT $LN1@roundup
; Line 82
	mov	eax, DWORD PTR _size$[ebp]
	cdq
	idiv	DWORD PTR ?multsize@?1??roundup@@9@9
	mov	eax, DWORD PTR ?multsize@?1??roundup@@9@9
	sub	eax, edx
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _size$[ebp], eax
$LN1@roundup:
; Line 83
	mov	eax, DWORD PTR _size$[ebp]
; Line 84
	pop	ebp
	ret	0
_roundup ENDP
_TEXT	ENDS
PUBLIC	_ptrCompare
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_value$ = 16						; size = 4
_ptrCompare PROC
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 95
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _a$[ebp], ecx
; Line 96
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN1@ptrCompare
; Line 97
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _b$[ebp], eax
$LN1@ptrCompare:
; Line 99
	mov	ecx, DWORD PTR _a$[ebp]
	cmp	ecx, DWORD PTR _b$[ebp]
	jbe	SHORT $LN4@ptrCompare
	mov	DWORD PTR tv70[ebp], -1
	jmp	SHORT $LN5@ptrCompare
$LN4@ptrCompare:
	mov	edx, DWORD PTR _a$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR _b$[ebp]
	setne	al
	mov	DWORD PTR tv70[ebp], eax
$LN5@ptrCompare:
	mov	eax, DWORD PTR tv70[ebp]
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	0
_ptrCompare ENDP
_TEXT	ENDS
PUBLIC	_Heap_check
; Function compile flags: /Odtp
_TEXT	SEGMENT
_string$ = 8						; size = 4
_ptr$ = 12						; size = 4
_Heap_check PROC
; Line 104
	push	ebp
	mov	ebp, esp
; Line 126
	pop	ebp
	ret	0
_Heap_check ENDP
_TEXT	ENDS
PUBLIC	_mymalloc
EXTRN	_Thread_unlock_mutex:PROC
EXTRN	_TreeAdd:PROC
EXTRN	_strcpy:PROC
EXTRN	__imp__free:PROC
EXTRN	_Log:PROC
EXTRN	__imp__malloc:PROC
EXTRN	_Thread_lock_mutex:PROC
EXTRN	_strlen:PROC
_BSS	SEGMENT
_heap	DB	020H DUP (?)
; Function compile flags: /Odtp
_BSS	ENDS
_TEXT	SEGMENT
tv89 = -16						; size = 4
_s$ = -12						; size = 4
_space$ = -8						; size = 4
_filenamelen$ = -4					; size = 4
_file$ = 8						; size = 4
_line$ = 12						; size = 4
_size$ = 16						; size = 4
_mymalloc PROC
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 140
	mov	DWORD PTR _s$[ebp], 0
; Line 141
	mov	DWORD PTR _space$[ebp], 16		; 00000010H
; Line 142
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _filenamelen$[ebp], eax
; Line 144
	mov	ecx, DWORD PTR _heap_mutex
	push	ecx
	call	_Thread_lock_mutex
	add	esp, 4
; Line 145
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	_roundup
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax
; Line 146
	push	16					; 00000010H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	DWORD PTR _s$[ebp], eax
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN4@mymalloc
; Line 148
	mov	eax, DWORD PTR _errmsg
	push	eax
	push	13					; 0000000dH
	push	5
	call	_Log
	add	esp, 12					; 0000000cH
; Line 149
	xor	eax, eax
	jmp	$LN5@mymalloc
$LN4@mymalloc:
; Line 151
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+12], edx
; Line 152
	mov	eax, DWORD PTR _filenamelen$[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	ecx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN3@mymalloc
; Line 154
	mov	eax, DWORD PTR _errmsg
	push	eax
	push	13					; 0000000dH
	push	5
	call	_Log
	add	esp, 12					; 0000000cH
; Line 155
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
; Line 156
	xor	eax, eax
	jmp	$LN5@mymalloc
$LN3@mymalloc:
; Line 158
	mov	edx, DWORD PTR _space$[ebp]
	add	edx, DWORD PTR _filenamelen$[ebp]
	mov	DWORD PTR _space$[ebp], edx
; Line 159
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 160
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 162
	mov	edx, DWORD PTR _size$[ebp]
	add	edx, 8
	push	edx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	DWORD PTR tv89[ebp], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR [eax+8], ecx
	cmp	DWORD PTR tv89[ebp], 0
	jne	SHORT $LN2@mymalloc
; Line 164
	mov	edx, DWORD PTR _errmsg
	push	edx
	push	13					; 0000000dH
	push	5
	call	_Log
	add	esp, 12					; 0000000cH
; Line 165
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
; Line 166
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
; Line 167
	xor	eax, eax
	jmp	$LN5@mymalloc
$LN2@mymalloc:
; Line 169
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _space$[ebp]
	lea	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR _space$[ebp], edx
; Line 170
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _eyecatcher
	mov	DWORD PTR [ecx], edx
; Line 171
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _eyecatcher
	mov	DWORD PTR [edx+ecx+4], eax
; Line 172
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	push	OFFSET $SG81687
	push	-1
	push	1
	call	_Log
	add	esp, 28					; 0000001cH
; Line 173
	mov	eax, DWORD PTR _space$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	OFFSET _heap
	call	_TreeAdd
	add	esp, 12					; 0000000cH
; Line 174
	mov	edx, DWORD PTR _state
	add	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _state, edx
; Line 175
	mov	eax, DWORD PTR _state
	cmp	eax, DWORD PTR _state+4
	jle	SHORT $LN1@mymalloc
; Line 176
	mov	ecx, DWORD PTR _state
	mov	DWORD PTR _state+4, ecx
$LN1@mymalloc:
; Line 177
	mov	edx, DWORD PTR _heap_mutex
	push	edx
	call	_Thread_unlock_mutex
	add	esp, 4
; Line 178
	mov	eax, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 4
$LN5@mymalloc:
; Line 179
	mov	esp, ebp
	pop	ebp
	ret	0
_mymalloc ENDP
_TEXT	ENDS
PUBLIC	_checkEyecatchers
; Function compile flags: /Odtp
_TEXT	SEGMENT
_us$ = -12						; size = 4
_sp$ = -8						; size = 4
_cp$ = -4						; size = 4
_file$ = 8						; size = 4
_line$ = 12						; size = 4
_p$ = 16						; size = 4
_size$ = 20						; size = 4
_checkEyecatchers PROC
; Line 183
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 184
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _sp$[ebp], eax
; Line 185
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR _cp$[ebp], ecx
; Line 189
	mov	edx, DWORD PTR _sp$[ebp]
	sub	edx, 4
	mov	DWORD PTR _sp$[ebp], edx
	mov	eax, DWORD PTR _sp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _us$[ebp], ecx
	mov	edx, DWORD PTR _us$[ebp]
	cmp	edx, DWORD PTR _eyecatcher
	je	SHORT $LN2@checkEyeca
; Line 190
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	mov	edx, DWORD PTR _us$[ebp]
	push	edx
	push	OFFSET $SG81709
	mov	eax, DWORD PTR ?msg@?1??checkEyecatchers@@9@9
	push	eax
	push	13					; 0000000dH
	push	5
	call	_Log
	add	esp, 28					; 0000001cH
$LN2@checkEyeca:
; Line 192
	mov	ecx, DWORD PTR _cp$[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _cp$[ebp], ecx
; Line 193
	mov	edx, DWORD PTR _cp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _us$[ebp], eax
	mov	ecx, DWORD PTR _us$[ebp]
	cmp	ecx, DWORD PTR _eyecatcher
	je	SHORT $LN3@checkEyeca
; Line 194
	mov	edx, DWORD PTR _line$[ebp]
	push	edx
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	mov	ecx, DWORD PTR _us$[ebp]
	push	ecx
	push	OFFSET $SG81712
	mov	edx, DWORD PTR ?msg@?1??checkEyecatchers@@9@9
	push	edx
	push	13					; 0000000dH
	push	5
	call	_Log
	add	esp, 28					; 0000001cH
$LN3@checkEyeca:
; Line 195
	mov	esp, ebp
	pop	ebp
	ret	0
_checkEyecatchers ENDP
_TEXT	ENDS
PUBLIC	_Internal_heap_unlink
EXTRN	_TreeRemoveNodeIndex:PROC
EXTRN	_TreeFind:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_s$81729 = -12						; size = 4
_e$ = -8						; size = 4
_rc$ = -4						; size = 4
_file$ = 8						; size = 4
_line$ = 12						; size = 4
_p$ = 16						; size = 4
_Internal_heap_unlink PROC
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 207
	mov	DWORD PTR _e$[ebp], 0
; Line 208
	mov	DWORD PTR _rc$[ebp], 0
; Line 210
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 4
	push	eax
	push	OFFSET _heap
	call	_TreeFind
	add	esp, 8
	mov	DWORD PTR _e$[ebp], eax
; Line 211
	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN2@Internal_h
; Line 212
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	OFFSET $SG81727
	push	13					; 0000000dH
	push	5
	call	_Log
	add	esp, 20					; 00000014H
; Line 213
	jmp	$LN1@Internal_h
$LN2@Internal_h:
; Line 215
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _s$81729[ebp], ecx
; Line 217
	mov	edx, DWORD PTR _state
	push	edx
	mov	eax, DWORD PTR _line$[ebp]
	push	eax
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$81729[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET $SG81731
	push	-1
	push	1
	call	_Log
	add	esp, 28					; 0000001cH
; Line 218
	mov	ecx, DWORD PTR _s$81729[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	call	_checkEyecatchers
	add	esp, 16					; 00000010H
; Line 220
	mov	eax, DWORD PTR _s$81729[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
; Line 221
	mov	edx, DWORD PTR _s$81729[ebp]
	mov	eax, DWORD PTR _state
	sub	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _state, eax
; Line 222
	push	0
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	push	OFFSET _heap
	call	_TreeRemoveNodeIndex
	add	esp, 12					; 0000000cH
; Line 223
	mov	edx, DWORD PTR _s$81729[ebp]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
; Line 224
	mov	DWORD PTR _rc$[ebp], 1
$LN1@Internal_h:
; Line 226
	mov	eax, DWORD PTR _rc$[ebp]
; Line 227
	mov	esp, ebp
	pop	ebp
	ret	0
_Internal_heap_unlink ENDP
_TEXT	ENDS
PUBLIC	_myfree
; Function compile flags: /Odtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_line$ = 12						; size = 4
_p$ = 16						; size = 4
_myfree	PROC
; Line 238
	push	ebp
	mov	ebp, esp
; Line 239
	mov	eax, DWORD PTR _heap_mutex
	push	eax
	call	_Thread_lock_mutex
	add	esp, 4
; Line 240
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _line$[ebp]
	push	edx
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_Internal_heap_unlink
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@myfree
; Line 241
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 4
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
$LN1@myfree:
; Line 242
	mov	edx, DWORD PTR _heap_mutex
	push	edx
	call	_Thread_unlock_mutex
	add	esp, 4
; Line 243
	pop	ebp
	ret	0
_myfree	ENDP
_TEXT	ENDS
PUBLIC	_Heap_unlink
; Function compile flags: /Odtp
_TEXT	SEGMENT
_file$ = 8						; size = 4
_line$ = 12						; size = 4
_p$ = 16						; size = 4
_Heap_unlink PROC
; Line 254
	push	ebp
	mov	ebp, esp
; Line 255
	mov	eax, DWORD PTR _heap_mutex
	push	eax
	call	_Thread_lock_mutex
	add	esp, 4
; Line 256
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _line$[ebp]
	push	edx
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_Internal_heap_unlink
	add	esp, 12					; 0000000cH
; Line 257
	mov	ecx, DWORD PTR _heap_mutex
	push	ecx
	call	_Thread_unlock_mutex
	add	esp, 4
; Line 258
	pop	ebp
	ret	0
_Heap_unlink ENDP
_TEXT	ENDS
PUBLIC	_myrealloc
EXTRN	__imp__realloc:PROC
EXTRN	_TreeRemoveKey:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv158 = -24						; size = 4
tv90 = -20						; size = 4
_space$81766 = -16					; size = 4
_filenamelen$81768 = -12				; size = 4
_s$ = -8						; size = 4
_rc$ = -4						; size = 4
_file$ = 8						; size = 4
_line$ = 12						; size = 4
_p$ = 16						; size = 4
_size$ = 20						; size = 4
_myrealloc PROC
; Line 274
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 275
	mov	DWORD PTR _rc$[ebp], 0
; Line 276
	mov	DWORD PTR _s$[ebp], 0
; Line 278
	mov	eax, DWORD PTR _heap_mutex
	push	eax
	call	_Thread_lock_mutex
	add	esp, 4
; Line 279
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 4
	push	ecx
	push	OFFSET _heap
	call	_TreeRemoveKey
	add	esp, 8
	mov	DWORD PTR _s$[ebp], eax
; Line 280
	cmp	DWORD PTR _s$[ebp], 0
	jne	SHORT $LN4@myrealloc
; Line 281
	mov	edx, DWORD PTR _line$[ebp]
	push	edx
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	OFFSET $SG81764
	push	13					; 0000000dH
	push	5
	call	_Log
	add	esp, 20					; 00000014H
; Line 282
	jmp	$LN3@myrealloc
$LN4@myrealloc:
; Line 284
	mov	DWORD PTR _space$81766[ebp], 16		; 00000010H
; Line 285
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR _filenamelen$81768[ebp], eax
; Line 287
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _line$[ebp]
	push	edx
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	_checkEyecatchers
	add	esp, 16					; 00000010H
; Line 288
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_roundup
	add	esp, 4
	mov	DWORD PTR _size$[ebp], eax
; Line 289
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _state
	mov	DWORD PTR _state, eax
; Line 290
	mov	ecx, DWORD PTR _state
	cmp	ecx, DWORD PTR _state+4
	jle	SHORT $LN2@myrealloc
; Line 291
	mov	edx, DWORD PTR _state
	mov	DWORD PTR _state+4, edx
$LN2@myrealloc:
; Line 292
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	mov	DWORD PTR tv90[ebp], eax
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR [eax+8], ecx
	cmp	DWORD PTR tv90[ebp], 0
	jne	SHORT $LN1@myrealloc
; Line 294
	mov	edx, DWORD PTR _errmsg
	push	edx
	push	13					; 0000000dH
	push	5
	call	_Log
	add	esp, 12					; 0000000cH
; Line 295
	xor	eax, eax
	jmp	$LN5@myrealloc
$LN1@myrealloc:
; Line 297
	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 8
	mov	ecx, DWORD PTR _s$[ebp]
	sub	eax, DWORD PTR [ecx+12]
	add	eax, DWORD PTR _space$81766[ebp]
	mov	DWORD PTR _space$81766[ebp], eax
; Line 298
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _eyecatcher
	mov	DWORD PTR [eax], ecx
; Line 299
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _eyecatcher
	mov	DWORD PTR [ecx+eax+4], edx
; Line 300
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 301
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _space$81766[ebp]
	sub	ecx, eax
	mov	DWORD PTR _space$81766[ebp], ecx
; Line 302
	mov	edx, DWORD PTR _filenamelen$81768[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	mov	edx, DWORD PTR _s$[ebp]
	mov	DWORD PTR [edx], eax
; Line 303
	mov	eax, DWORD PTR _space$81766[ebp]
	add	eax, DWORD PTR _filenamelen$81768[ebp]
	mov	DWORD PTR _space$81766[ebp], eax
; Line 304
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strcpy
	add	esp, 8
; Line 305
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 306
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rc$[ebp], ecx
; Line 307
	mov	edx, DWORD PTR _space$81766[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	push	OFFSET _heap
	call	_TreeAdd
	add	esp, 12					; 0000000cH
$LN3@myrealloc:
; Line 309
	mov	ecx, DWORD PTR _heap_mutex
	push	ecx
	call	_Thread_unlock_mutex
	add	esp, 4
; Line 310
	cmp	DWORD PTR _rc$[ebp], 0
	jne	SHORT $LN7@myrealloc
	mov	DWORD PTR tv158[ebp], 0
	jmp	SHORT $LN8@myrealloc
$LN7@myrealloc:
	mov	edx, DWORD PTR _rc$[ebp]
	add	edx, 4
	mov	DWORD PTR tv158[ebp], edx
$LN8@myrealloc:
	mov	eax, DWORD PTR tv158[ebp]
$LN5@myrealloc:
; Line 311
	mov	esp, ebp
	pop	ebp
	ret	0
_myrealloc ENDP
_TEXT	ENDS
PUBLIC	_Heap_findItem
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = -8						; size = 4
_e$ = -4						; size = 4
_p$ = 8							; size = 4
_Heap_findItem PROC
; Line 321
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 322
	mov	DWORD PTR _e$[ebp], 0
; Line 324
	mov	eax, DWORD PTR _heap_mutex
	push	eax
	call	_Thread_lock_mutex
	add	esp, 4
; Line 325
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 4
	push	ecx
	push	OFFSET _heap
	call	_TreeFind
	add	esp, 8
	mov	DWORD PTR _e$[ebp], eax
; Line 326
	mov	edx, DWORD PTR _heap_mutex
	push	edx
	call	_Thread_unlock_mutex
	add	esp, 4
; Line 327
	cmp	DWORD PTR _e$[ebp], 0
	jne	SHORT $LN3@Heap_findI
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN4@Heap_findI
$LN3@Heap_findI:
	mov	eax, DWORD PTR _e$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv72[ebp], ecx
$LN4@Heap_findI:
	mov	eax, DWORD PTR tv72[ebp]
; Line 328
	mov	esp, ebp
	pop	ebp
	ret	0
_Heap_findItem ENDP
_TEXT	ENDS
PUBLIC	_HeapScan
EXTRN	_TreeNextElement:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv90 = -12						; size = 4
_s$81801 = -8						; size = 4
_current$ = -4						; size = 4
_log_level$ = 8						; size = 4
_HeapScan PROC
; Line 336
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 337
	mov	DWORD PTR _current$[ebp], 0
; Line 339
	mov	eax, DWORD PTR _heap_mutex
	push	eax
	call	_Thread_lock_mutex
	add	esp, 4
; Line 340
	mov	ecx, DWORD PTR _state
	push	ecx
	push	OFFSET $SG81796
	push	-1
	mov	edx, DWORD PTR _log_level$[ebp]
	push	edx
	call	_Log
	add	esp, 16					; 00000010H
$LN2@HeapScan:
; Line 341
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	push	OFFSET _heap
	call	_TreeNextElement
	add	esp, 8
	mov	DWORD PTR _current$[ebp], eax
	cmp	DWORD PTR _current$[ebp], 0
	je	SHORT $LN1@HeapScan
; Line 343
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _s$81801[ebp], edx
; Line 344
	mov	eax, DWORD PTR _s$81801[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _s$81801[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _s$81801[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _s$81801[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	OFFSET $SG81803
	push	-1
	mov	edx, DWORD PTR _log_level$[ebp]
	push	edx
	call	_Log
	add	esp, 28					; 0000001cH
; Line 345
	mov	eax, DWORD PTR _current$[ebp]
	cmp	DWORD PTR [eax+16], 10			; 0000000aH
	jge	SHORT $LN5@HeapScan
	mov	ecx, DWORD PTR _s$81801[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN6@HeapScan
$LN5@HeapScan:
	mov	DWORD PTR tv90[ebp], 10			; 0000000aH
$LN6@HeapScan:
	mov	eax, DWORD PTR _s$81801[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR tv90[ebp]
	push	edx
	push	OFFSET $SG81806
	push	-1
	mov	eax, DWORD PTR _log_level$[ebp]
	push	eax
	call	_Log
	add	esp, 20					; 00000014H
; Line 346
	jmp	$LN2@HeapScan
$LN1@HeapScan:
; Line 347
	push	OFFSET $SG81807
	push	-1
	mov	ecx, DWORD PTR _log_level$[ebp]
	push	ecx
	call	_Log
	add	esp, 12					; 0000000cH
; Line 348
	mov	edx, DWORD PTR _heap_mutex
	push	edx
	call	_Thread_unlock_mutex
	add	esp, 4
; Line 349
	mov	esp, ebp
	pop	ebp
	ret	0
_HeapScan ENDP
_TEXT	ENDS
PUBLIC	_Heap_initialize
EXTRN	_TreeInitializeNoMalloc:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Heap_initialize PROC
; Line 356
	push	ebp
	mov	ebp, esp
; Line 357
	push	OFFSET _ptrCompare
	push	OFFSET _heap
	call	_TreeInitializeNoMalloc
	add	esp, 8
; Line 358
	mov	eax, DWORD PTR _heap+28
	and	eax, -2					; fffffffeH
	mov	DWORD PTR _heap+28, eax
; Line 359
	xor	eax, eax
; Line 360
	pop	ebp
	ret	0
_Heap_initialize ENDP
_TEXT	ENDS
PUBLIC	_Heap_terminate
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Heap_terminate PROC
; Line 367
	push	ebp
	mov	ebp, esp
; Line 368
	mov	eax, DWORD PTR _state+4
	push	eax
	push	OFFSET $SG81810
	push	-1
	push	3
	call	_Log
	add	esp, 16					; 00000010H
; Line 369
	cmp	DWORD PTR _state, 20			; 00000014H
	jle	SHORT $LN2@Heap_termi
; Line 371
	push	OFFSET $SG81812
	push	-1
	push	5
	call	_Log
	add	esp, 12					; 0000000cH
; Line 372
	push	5
	call	_HeapScan
	add	esp, 4
$LN2@Heap_termi:
; Line 374
	pop	ebp
	ret	0
_Heap_terminate ENDP
_TEXT	ENDS
PUBLIC	_Heap_get_info
; Function compile flags: /Odtp
_TEXT	SEGMENT
_Heap_get_info PROC
; Line 382
	push	ebp
	mov	ebp, esp
; Line 383
	mov	eax, OFFSET _state
; Line 384
	pop	ebp
	ret	0
_Heap_get_info ENDP
_TEXT	ENDS
PUBLIC	_HeapDumpString
EXTRN	__imp__fwrite:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = -12						; size = 4
_len$ = -8						; size = 4
_rc$ = -4						; size = 4
_file$ = 8						; size = 4
_str$ = 12						; size = 4
_HeapDumpString PROC
; Line 393
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 394
	mov	DWORD PTR _rc$[ebp], 0
; Line 395
	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN8@HeapDumpSt
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN9@HeapDumpSt
$LN8@HeapDumpSt:
	mov	DWORD PTR tv68[ebp], 0
$LN9@HeapDumpSt:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _len$[ebp], ecx
; Line 397
	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	4
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN5@HeapDumpSt
; Line 398
	mov	DWORD PTR _rc$[ebp], -1
	jmp	SHORT $LN4@HeapDumpSt
$LN5@HeapDumpSt:
; Line 399
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	push	4
	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN3@HeapDumpSt
; Line 400
	mov	DWORD PTR _rc$[ebp], -1
	jmp	SHORT $LN4@HeapDumpSt
$LN3@HeapDumpSt:
; Line 401
	cmp	DWORD PTR _len$[ebp], 0
	jle	SHORT $LN4@HeapDumpSt
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN4@HeapDumpSt
; Line 402
	mov	DWORD PTR _rc$[ebp], -1
$LN4@HeapDumpSt:
; Line 403
	mov	eax, DWORD PTR _rc$[ebp]
; Line 404
	mov	esp, ebp
	pop	ebp
	ret	0
_HeapDumpString ENDP
_TEXT	ENDS
PUBLIC	_HeapDump
; Function compile flags: /Odtp
_TEXT	SEGMENT
_s$81837 = -12						; size = 4
_rc$ = -8						; size = 4
_current$ = -4						; size = 4
_file$ = 8						; size = 4
_HeapDump PROC
; Line 412
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 413
	mov	DWORD PTR _rc$[ebp], 0
; Line 414
	mov	DWORD PTR _current$[ebp], 0
$LN7@HeapDump:
; Line 416
	cmp	DWORD PTR _rc$[ebp], 0
	jne	$LN6@HeapDump
	mov	eax, DWORD PTR _current$[ebp]
	push	eax
	push	OFFSET _heap
	call	_TreeNextElement
	add	esp, 8
	mov	DWORD PTR _current$[ebp], eax
	cmp	DWORD PTR _current$[ebp], 0
	je	$LN6@HeapDump
; Line 418
	mov	ecx, DWORD PTR _current$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _s$81837[ebp], edx
; Line 420
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	push	1
	push	4
	mov	ecx, DWORD PTR _s$81837[ebp]
	add	ecx, 8
	push	ecx
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN5@HeapDump
; Line 421
	mov	DWORD PTR _rc$[ebp], -1
	jmp	SHORT $LN4@HeapDump
$LN5@HeapDump:
; Line 422
	mov	edx, DWORD PTR _file$[ebp]
	push	edx
	push	1
	push	4
	mov	eax, DWORD PTR _current$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN3@HeapDump
; Line 423
	mov	DWORD PTR _rc$[ebp], -1
	jmp	SHORT $LN4@HeapDump
$LN3@HeapDump:
; Line 424
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _current$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _s$81837[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR __imp__fwrite
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN4@HeapDump
; Line 425
	mov	DWORD PTR _rc$[ebp], -1
$LN4@HeapDump:
; Line 426
	jmp	$LN7@HeapDump
$LN6@HeapDump:
; Line 427
	mov	eax, DWORD PTR _rc$[ebp]
; Line 428
	mov	esp, ebp
	pop	ebp
	ret	0
_HeapDump ENDP
_TEXT	ENDS
END
