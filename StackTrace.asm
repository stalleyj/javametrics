; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspaces\newagent2\Paho\org.eclipse.paho.mqtt.c\src\StackTrace.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_stack_mutex:DWORD
COMM	_Log_levels:DWORD
_DATA	ENDS
_BSS	SEGMENT
_thread_count DD 01H DUP (?)
_cur_thread DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG82257 DB	'Max stack depth exceeded', 00H
	ORG $+3
$SG82270 DB	'Minimum stack depth exceeded for thread %lu', 00H
$SG82272 DB	'Stack mismatch. Entry:%s Exit:%s', 0aH, 00H
	ORG $+2
$SG82294 DB	'=========== Start of stack trace for thread %lu ========'
	DB	'==', 0aH, 00H
$SG82296 DB	'%s (%d)', 0aH, 00H
	ORG $+3
$SG82300 DB	'   at %s (%d)', 0aH, 00H
	ORG $+1
$SG82302 DB	'=========== End of stack trace for thread %lu =========='
	DB	0aH, 0aH, 00H
	ORG $+1
$SG82323 DB	'%s (%d)', 0aH, 00H
	ORG $+3
$SG82327 DB	'   at %s (%d)', 0aH, 00H
_DATA	ENDS
PUBLIC	_setStack
EXTRN	_Thread_getid:PROC
_BSS	SEGMENT
_threads DB	07d424H DUP (?)
; Function compile flags: /Odtp
_BSS	ENDS
_TEXT	SEGMENT
_curid$ = -8						; size = 4
_i$ = -4						; size = 4
_create$ = 8						; size = 4
_setStack PROC
; File c:\workspaces\newagent2\paho\org.eclipse.paho.mqtt.c\src\stacktrace.c
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 77
	mov	DWORD PTR _i$[ebp], -1
; Line 78
	call	_Thread_getid
	mov	DWORD PTR _curid$[ebp], eax
; Line 80
	mov	DWORD PTR _cur_thread, 0
; Line 81
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@setStack
$LN4@setStack:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@setStack:
	cmp	DWORD PTR _i$[ebp], 255			; 000000ffH
	jge	SHORT $LN3@setStack
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _thread_count
	jge	SHORT $LN3@setStack
; Line 83
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 2012				; 000007dcH
	mov	eax, DWORD PTR _threads[edx]
	cmp	eax, DWORD PTR _curid$[ebp]
	jne	SHORT $LN2@setStack
; Line 85
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 2012				; 000007dcH
	add	ecx, OFFSET _threads
	mov	DWORD PTR _cur_thread, ecx
; Line 86
	jmp	SHORT $LN3@setStack
$LN2@setStack:
; Line 88
	jmp	SHORT $LN4@setStack
$LN3@setStack:
; Line 90
	cmp	DWORD PTR _cur_thread, 0
	jne	SHORT $LN1@setStack
	cmp	DWORD PTR _create$[ebp], 0
	je	SHORT $LN1@setStack
	cmp	DWORD PTR _thread_count, 255		; 000000ffH
	jge	SHORT $LN1@setStack
; Line 92
	mov	edx, DWORD PTR _thread_count
	imul	edx, 2012				; 000007dcH
	add	edx, OFFSET _threads
	mov	DWORD PTR _cur_thread, edx
; Line 93
	mov	eax, DWORD PTR _cur_thread
	mov	ecx, DWORD PTR _curid$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 94
	mov	edx, DWORD PTR _cur_thread
	mov	DWORD PTR [edx+4], 0
; Line 95
	mov	eax, DWORD PTR _cur_thread
	mov	DWORD PTR [eax+8], 0
; Line 96
	mov	ecx, DWORD PTR _thread_count
	add	ecx, 1
	mov	DWORD PTR _thread_count, ecx
$LN1@setStack:
; Line 98
	xor	eax, eax
	cmp	DWORD PTR _cur_thread, 0
	setne	al
; Line 99
	mov	esp, ebp
	pop	ebp
	ret	0
_setStack ENDP
_TEXT	ENDS
PUBLIC	_StackTrace_entry
EXTRN	_Thread_unlock_mutex:PROC
EXTRN	_Log:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	_Log_stackTrace:PROC
EXTRN	_Thread_lock_mutex:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_name$ = 8						; size = 4
_line$ = 12						; size = 4
_trace_level$ = 16					; size = 4
_StackTrace_entry PROC
; Line 102
	push	ebp
	mov	ebp, esp
; Line 103
	mov	eax, DWORD PTR _stack_mutex
	push	eax
	call	_Thread_lock_mutex
	add	esp, 4
; Line 104
	push	1
	call	_setStack
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN4@StackTrace
; Line 105
	jmp	$exit$82251
$LN4@StackTrace:
; Line 106
	cmp	DWORD PTR _trace_level$[ebp], -1
	je	SHORT $LN3@StackTrace
; Line 107
	push	0
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur_thread
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cur_thread
	mov	eax, DWORD PTR [edx]
	push	eax
	push	9
	mov	ecx, DWORD PTR _trace_level$[ebp]
	push	ecx
	call	_Log_stackTrace
	add	esp, 28					; 0000001cH
$LN3@StackTrace:
; Line 108
	push	29					; 0000001dH
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur_thread
	mov	ecx, DWORD PTR [eax+8]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _cur_thread
	lea	eax, DWORD PTR [edx+ecx+16]
	push	eax
	call	DWORD PTR __imp__strncpy
	add	esp, 12					; 0000000cH
; Line 109
	mov	ecx, DWORD PTR _cur_thread
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _cur_thread
	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [eax+edx+48], ecx
	mov	edx, DWORD PTR _cur_thread
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _cur_thread
	mov	DWORD PTR [ecx+8], eax
; Line 110
	mov	edx, DWORD PTR _cur_thread
	mov	eax, DWORD PTR _cur_thread
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+4]
	jle	SHORT $LN2@StackTrace
; Line 111
	mov	edx, DWORD PTR _cur_thread
	mov	eax, DWORD PTR _cur_thread
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+4], ecx
$LN2@StackTrace:
; Line 112
	mov	edx, DWORD PTR _cur_thread
	cmp	DWORD PTR [edx+8], 50			; 00000032H
	jl	SHORT $exit$82251
; Line 113
	push	OFFSET $SG82257
	push	-1
	push	7
	call	_Log
	add	esp, 12					; 0000000cH
$exit$82251:
; Line 115
	mov	eax, DWORD PTR _stack_mutex
	push	eax
	call	_Thread_unlock_mutex
	add	esp, 4
; Line 116
	pop	ebp
	ret	0
_StackTrace_entry ENDP
_TEXT	ENDS
PUBLIC	_StackTrace_exit
EXTRN	__imp__strncmp:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = -4						; size = 4
_name$ = 8						; size = 4
_line$ = 12						; size = 4
_rc$ = 16						; size = 4
_trace_level$ = 20					; size = 4
_StackTrace_exit PROC
; Line 120
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 121
	mov	eax, DWORD PTR _stack_mutex
	push	eax
	call	_Thread_lock_mutex
	add	esp, 4
; Line 122
	push	0
	call	_setStack
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN6@StackTrace@2
; Line 123
	jmp	$exit$82268
$LN6@StackTrace@2:
; Line 124
	mov	ecx, DWORD PTR _cur_thread
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	mov	DWORD PTR tv70[ebp], edx
	mov	eax, DWORD PTR _cur_thread
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR [eax+8], ecx
	cmp	DWORD PTR tv70[ebp], 0
	jge	SHORT $LN5@StackTrace@2
; Line 125
	mov	edx, DWORD PTR _cur_thread
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG82270
	push	-1
	push	7
	call	_Log
	add	esp, 16					; 00000010H
$LN5@StackTrace@2:
; Line 126
	push	29					; 0000001dH
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur_thread
	mov	eax, DWORD PTR [edx+8]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _cur_thread
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN4@StackTrace@2
; Line 127
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_thread
	mov	edx, DWORD PTR [ecx+8]
	imul	edx, 40					; 00000028H
	mov	eax, DWORD PTR _cur_thread
	lea	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	push	OFFSET $SG82272
	push	-1
	push	7
	call	_Log
	add	esp, 20					; 00000014H
$LN4@StackTrace@2:
; Line 128
	cmp	DWORD PTR _trace_level$[ebp], -1
	je	SHORT $exit$82268
; Line 130
	cmp	DWORD PTR _rc$[ebp], 0
	jne	SHORT $LN2@StackTrace@2
; Line 131
	push	0
	mov	edx, DWORD PTR _line$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_thread
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _cur_thread
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	10					; 0000000aH
	mov	edx, DWORD PTR _trace_level$[ebp]
	push	edx
	call	_Log_stackTrace
	add	esp, 28					; 0000001cH
; Line 132
	jmp	SHORT $exit$82268
$LN2@StackTrace@2:
; Line 133
	mov	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _line$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur_thread
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _cur_thread
	mov	eax, DWORD PTR [edx]
	push	eax
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _trace_level$[ebp]
	push	ecx
	call	_Log_stackTrace
	add	esp, 28					; 0000001cH
$exit$82268:
; Line 136
	mov	edx, DWORD PTR _stack_mutex
	push	edx
	call	_Thread_unlock_mutex
	add	esp, 4
; Line 137
	mov	esp, ebp
	pop	ebp
	ret	0
_StackTrace_exit ENDP
_TEXT	ENDS
PUBLIC	_StackTrace_printStack
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fprintf:PROC
EXTRN	__imp____iob_func:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$82292 = -16						; size = 4
_cur_thread$82290 = -12					; size = 4
_t$ = -8						; size = 4
_file$ = -4						; size = 4
_dest$ = 8						; size = 4
_StackTrace_printStack PROC
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 142
	call	DWORD PTR __imp____iob_func
	add	eax, 32					; 00000020H
	mov	DWORD PTR _file$[ebp], eax
; Line 143
	mov	DWORD PTR _t$[ebp], 0
; Line 145
	cmp	DWORD PTR _dest$[ebp], 0
	je	SHORT $LN9@StackTrace@3
; Line 146
	mov	eax, DWORD PTR _dest$[ebp]
	mov	DWORD PTR _file$[ebp], eax
$LN9@StackTrace@3:
; Line 147
	mov	DWORD PTR _t$[ebp], 0
	jmp	SHORT $LN8@StackTrace@3
$LN7@StackTrace@3:
	mov	ecx, DWORD PTR _t$[ebp]
	add	ecx, 1
	mov	DWORD PTR _t$[ebp], ecx
$LN8@StackTrace@3:
	mov	edx, DWORD PTR _t$[ebp]
	cmp	edx, DWORD PTR _thread_count
	jge	$LN6@StackTrace@3
; Line 149
	mov	eax, DWORD PTR _t$[ebp]
	imul	eax, 2012				; 000007dcH
	add	eax, OFFSET _threads
	mov	DWORD PTR _cur_thread$82290[ebp], eax
; Line 151
	mov	ecx, DWORD PTR _cur_thread$82290[ebp]
	cmp	DWORD PTR [ecx], 0
	jbe	$LN5@StackTrace@3
; Line 153
	mov	edx, DWORD PTR _cur_thread$82290[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, 1
	mov	DWORD PTR _i$82292[ebp], eax
; Line 155
	mov	ecx, DWORD PTR _cur_thread$82290[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG82294
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
; Line 156
	cmp	DWORD PTR _i$82292[ebp], 0
	jl	SHORT $LN4@StackTrace@3
; Line 158
	mov	ecx, DWORD PTR _i$82292[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _cur_thread$82290[ebp]
	mov	eax, DWORD PTR [edx+ecx+48]
	push	eax
	mov	ecx, DWORD PTR _i$82292[ebp]
	imul	ecx, 40					; 00000028H
	mov	edx, DWORD PTR _cur_thread$82290[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	push	eax
	push	OFFSET $SG82296
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
$LN3@StackTrace@3:
; Line 159
	mov	edx, DWORD PTR _i$82292[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$82292[ebp], edx
	js	SHORT $LN4@StackTrace@3
; Line 160
	mov	eax, DWORD PTR _i$82292[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _cur_thread$82290[ebp]
	mov	edx, DWORD PTR [ecx+eax+48]
	push	edx
	mov	eax, DWORD PTR _i$82292[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _cur_thread$82290[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	push	OFFSET $SG82300
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN3@StackTrace@3
$LN4@StackTrace@3:
; Line 162
	mov	ecx, DWORD PTR _cur_thread$82290[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET $SG82302
	mov	eax, DWORD PTR _file$[ebp]
	push	eax
	call	DWORD PTR __imp__fprintf
	add	esp, 12					; 0000000cH
$LN5@StackTrace@3:
; Line 164
	jmp	$LN7@StackTrace@3
$LN6@StackTrace@3:
; Line 165
	call	DWORD PTR __imp____iob_func
	add	eax, 32					; 00000020H
	cmp	DWORD PTR _file$[ebp], eax
	je	SHORT $LN10@StackTrace@3
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	cmp	DWORD PTR _file$[ebp], eax
	je	SHORT $LN10@StackTrace@3
	cmp	DWORD PTR _file$[ebp], 0
	je	SHORT $LN10@StackTrace@3
; Line 166
	mov	ecx, DWORD PTR _file$[ebp]
	push	ecx
	call	DWORD PTR __imp__fclose
	add	esp, 4
$LN10@StackTrace@3:
; Line 167
	mov	esp, ebp
	pop	ebp
	ret	0
_StackTrace_printStack ENDP
_TEXT	ENDS
PUBLIC	_StackTrace_get
EXTRN	__imp___snprintf:PROC
EXTRN	__imp__malloc:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_curpos$82321 = -24					; size = 4
_i$82320 = -20						; size = 4
_cur_thread$82318 = -16					; size = 4
_t$ = -12						; size = 4
_buf$ = -8						; size = 4
_bufsize$ = -4						; size = 4
_threadid$ = 8						; size = 4
_StackTrace_get PROC
; Line 171
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
; Line 172
	mov	DWORD PTR _bufsize$[ebp], 256		; 00000100H
; Line 173
	mov	DWORD PTR _buf$[ebp], 0
; Line 174
	mov	DWORD PTR _t$[ebp], 0
; Line 176
	mov	eax, DWORD PTR _bufsize$[ebp]
	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	DWORD PTR _buf$[ebp], eax
	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN9@StackTrace@4
; Line 177
	jmp	$exit$82314
$LN9@StackTrace@4:
; Line 178
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 179
	mov	DWORD PTR _t$[ebp], 0
	jmp	SHORT $LN8@StackTrace@4
$LN7@StackTrace@4:
	mov	edx, DWORD PTR _t$[ebp]
	add	edx, 1
	mov	DWORD PTR _t$[ebp], edx
$LN8@StackTrace@4:
	mov	eax, DWORD PTR _t$[ebp]
	cmp	eax, DWORD PTR _thread_count
	jge	$exit$82314
; Line 181
	mov	ecx, DWORD PTR _t$[ebp]
	imul	ecx, 2012				; 000007dcH
	add	ecx, OFFSET _threads
	mov	DWORD PTR _cur_thread$82318[ebp], ecx
; Line 183
	mov	edx, DWORD PTR _cur_thread$82318[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _threadid$[ebp]
	jne	$LN5@StackTrace@4
; Line 185
	mov	ecx, DWORD PTR _cur_thread$82318[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 1
	mov	DWORD PTR _i$82320[ebp], edx
; Line 186
	mov	DWORD PTR _curpos$82321[ebp], 0
; Line 188
	cmp	DWORD PTR _i$82320[ebp], 0
	jl	$LN4@StackTrace@4
; Line 191
	mov	eax, DWORD PTR _i$82320[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _cur_thread$82318[ebp]
	mov	edx, DWORD PTR [ecx+eax+48]
	push	edx
	mov	eax, DWORD PTR _i$82320[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _cur_thread$82318[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	push	OFFSET $SG82323
	mov	eax, DWORD PTR _bufsize$[ebp]
	sub	eax, DWORD PTR _curpos$82321[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _curpos$82321[ebp]
	push	ecx
	call	DWORD PTR __imp___snprintf
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _curpos$82321[ebp]
	mov	DWORD PTR _curpos$82321[ebp], eax
$LN3@StackTrace@4:
; Line 192
	mov	edx, DWORD PTR _i$82320[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$82320[ebp], edx
	js	SHORT $LN2@StackTrace@4
; Line 194
	mov	eax, DWORD PTR _i$82320[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _cur_thread$82318[ebp]
	mov	edx, DWORD PTR [ecx+eax+48]
	push	edx
	mov	eax, DWORD PTR _i$82320[ebp]
	imul	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _cur_thread$82318[ebp]
	lea	edx, DWORD PTR [ecx+eax+16]
	push	edx
	push	OFFSET $SG82327
	mov	eax, DWORD PTR _bufsize$[ebp]
	sub	eax, DWORD PTR _curpos$82321[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _curpos$82321[ebp]
	push	ecx
	call	DWORD PTR __imp___snprintf
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _curpos$82321[ebp]
	mov	DWORD PTR _curpos$82321[ebp], eax
	jmp	SHORT $LN3@StackTrace@4
$LN2@StackTrace@4:
; Line 195
	mov	edx, DWORD PTR _curpos$82321[ebp]
	sub	edx, 1
	mov	DWORD PTR _curpos$82321[ebp], edx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _curpos$82321[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN4@StackTrace@4
; Line 196
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _curpos$82321[ebp]
	mov	BYTE PTR [edx], 0
$LN4@StackTrace@4:
; Line 198
	jmp	SHORT $exit$82314
$LN5@StackTrace@4:
; Line 200
	jmp	$LN7@StackTrace@4
$exit$82314:
; Line 202
	mov	eax, DWORD PTR _buf$[ebp]
; Line 203
	mov	esp, ebp
	pop	ebp
	ret	0
_StackTrace_get ENDP
_TEXT	ENDS
END
