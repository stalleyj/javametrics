; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspaces\newagent2\Paho\org.eclipse.paho.mqtt.c\src\Tree.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG4998	DB	'../Paho/org.eclipse.paho.mqtt.c/src/Tree.c', 00H
	ORG $+1
$SG5010	DB	'../Paho/org.eclipse.paho.mqtt.c/src/Tree.c', 00H
	ORG $+1
$SG5111	DB	'../Paho/org.eclipse.paho.mqtt.c/src/Tree.c', 00H
	ORG $+1
$SG5260	DB	'../Paho/org.eclipse.paho.mqtt.c/src/Tree.c', 00H
_DATA	ENDS
PUBLIC	_TreeInitializeNoMalloc
EXTRN	_memset:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aTree$ = 8						; size = 4
_compare$ = 12						; size = 4
_TreeInitializeNoMalloc PROC
; File c:\workspaces\newagent2\paho\org.eclipse.paho.mqtt.c\src\tree.c
; Line 37
	push	ebp
	mov	ebp, esp
; Line 38
	push	32					; 00000020H
	push	0
	mov	eax, DWORD PTR _aTree$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 39
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	or	edx, 1
	mov	eax, DWORD PTR _aTree$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 40
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR _compare$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 41
	mov	eax, DWORD PTR _aTree$[ebp]
	mov	DWORD PTR [eax+16], 1
; Line 42
	pop	ebp
	ret	0
_TreeInitializeNoMalloc ENDP
_TEXT	ENDS
PUBLIC	_TreeInitialize
EXTRN	_mymalloc:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_newt$ = -4						; size = 4
_compare$ = 8						; size = 4
_TreeInitialize PROC
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 53
	push	32					; 00000020H
	push	53					; 00000035H
	push	OFFSET $SG4998
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _newt$[ebp], eax
; Line 55
	mov	eax, DWORD PTR _compare$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newt$[ebp]
	push	ecx
	call	_TreeInitializeNoMalloc
	add	esp, 8
; Line 56
	mov	eax, DWORD PTR _newt$[ebp]
; Line 57
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeInitialize ENDP
_TEXT	ENDS
PUBLIC	_TreeAddIndex
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aTree$ = 8						; size = 4
_compare$ = 12						; size = 4
_TreeAddIndex PROC
; Line 61
	push	ebp
	mov	ebp, esp
; Line 62
	mov	eax, DWORD PTR _aTree$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _aTree$[ebp]
	mov	eax, DWORD PTR _compare$[ebp]
	mov	DWORD PTR [edx+ecx*8+4], eax
; Line 63
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _aTree$[ebp]
	mov	DWORD PTR [eax+16], edx
; Line 64
	pop	ebp
	ret	0
_TreeAddIndex ENDP
_TEXT	ENDS
PUBLIC	_TreeFree
EXTRN	__imp__free:PROC
EXTRN	_myfree:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = -4						; size = 4
_aTree$ = 8						; size = 4
_TreeFree PROC
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 72
	mov	eax, DWORD PTR _aTree$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 1
	je	SHORT $LN3@TreeFree
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	push	72					; 00000048H
	push	OFFSET $SG5010
	call	_myfree
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv71[ebp], 0
	jmp	SHORT $LN1@TreeFree
$LN3@TreeFree:
	mov	eax, DWORD PTR _aTree$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	mov	DWORD PTR tv71[ebp], 0
$LN1@TreeFree:
; Line 74
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeFree ENDP
_TEXT	ENDS
PUBLIC	_isRed
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = -4						; size = 4
_aNode$ = 8						; size = 4
_isRed	PROC
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 87
	cmp	DWORD PTR _aNode$[ebp], 0
	je	SHORT $LN3@isRed
	mov	eax, DWORD PTR _aNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 1
	je	SHORT $LN3@isRed
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@isRed
$LN3@isRed:
	mov	DWORD PTR tv68[ebp], 0
$LN4@isRed:
	mov	eax, DWORD PTR tv68[ebp]
; Line 88
	mov	esp, ebp
	pop	ebp
	ret	0
_isRed	ENDP
_TEXT	ENDS
PUBLIC	_isBlack
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = -4						; size = 4
_aNode$ = 8						; size = 4
_isBlack PROC
; Line 92
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 93
	cmp	DWORD PTR _aNode$[ebp], 0
	je	SHORT $LN3@isBlack
	mov	eax, DWORD PTR _aNode$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 1
	je	SHORT $LN3@isBlack
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@isBlack
$LN3@isBlack:
	mov	DWORD PTR tv68[ebp], 1
$LN4@isBlack:
	mov	eax, DWORD PTR tv68[ebp]
; Line 94
	mov	esp, ebp
	pop	ebp
	ret	0
_isBlack ENDP
_TEXT	ENDS
PUBLIC	_TreeWalk
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = -12						; size = 4
_right$5029 = -8					; size = 4
_left$5028 = -4						; size = 4
_curnode$ = 8						; size = 4
_depth$ = 12						; size = 4
_TreeWalk PROC
; Line 98
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 99
	cmp	DWORD PTR _curnode$[ebp], 0
	je	SHORT $LN2@TreeWalk
; Line 101
	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_TreeWalk
	add	esp, 8
	mov	DWORD PTR _left$5028[ebp], eax
; Line 102
	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_TreeWalk
	add	esp, 8
	mov	DWORD PTR _right$5029[ebp], eax
; Line 103
	mov	eax, DWORD PTR _left$5028[ebp]
	cmp	eax, DWORD PTR _right$5029[ebp]
	jle	SHORT $LN5@TreeWalk
	mov	ecx, DWORD PTR _left$5028[ebp]
	mov	DWORD PTR tv78[ebp], ecx
	jmp	SHORT $LN6@TreeWalk
$LN5@TreeWalk:
	mov	edx, DWORD PTR _right$5029[ebp]
	mov	DWORD PTR tv78[ebp], edx
$LN6@TreeWalk:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _depth$[ebp], eax
$LN2@TreeWalk:
; Line 113
	mov	eax, DWORD PTR _depth$[ebp]
; Line 114
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeWalk ENDP
_TEXT	ENDS
PUBLIC	_TreeMaxDepth
; Function compile flags: /Odtp
_TEXT	SEGMENT
_rc$ = -4						; size = 4
_aTree$ = 8						; size = 4
_TreeMaxDepth PROC
; Line 118
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 119
	push	0
	mov	eax, DWORD PTR _aTree$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_TreeWalk
	add	esp, 8
	mov	DWORD PTR _rc$[ebp], eax
; Line 125
	mov	eax, DWORD PTR _rc$[ebp]
; Line 126
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeMaxDepth ENDP
_TEXT	ENDS
PUBLIC	_TreeRotate
; Function compile flags: /Odtp
_TEXT	SEGMENT
_other$ = -4						; size = 4
_aTree$ = 8						; size = 4
_curnode$ = 12						; size = 4
_direction$ = 16					; size = 4
_index$ = 20						; size = 4
_TreeRotate PROC
; Line 130
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 131
	xor	eax, eax
	cmp	DWORD PTR _direction$[ebp], 0
	sete	al
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _other$[ebp], edx
; Line 133
	xor	eax, eax
	cmp	DWORD PTR _direction$[ebp], 0
	sete	al
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR _direction$[ebp]
	mov	esi, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+4]
	mov	DWORD PTR [ecx+eax*4+4], edx
; Line 134
	mov	eax, DWORD PTR _direction$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [ecx+eax*4+4], 0
	je	SHORT $LN5@TreeRotate
; Line 135
	mov	edx, DWORD PTR _direction$[ebp]
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	DWORD PTR [ecx], edx
$LN5@TreeRotate:
; Line 136
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 137
	mov	eax, DWORD PTR _curnode$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@TreeRotate
; Line 138
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _aTree$[ebp]
	mov	eax, DWORD PTR _other$[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
	jmp	SHORT $LN3@TreeRotate
$LN4@TreeRotate:
; Line 139
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _direction$[ebp]
	mov	ecx, DWORD PTR _curnode$[ebp]
	cmp	ecx, DWORD PTR [edx+eax*4+4]
	jne	SHORT $LN2@TreeRotate
; Line 140
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _direction$[ebp]
	mov	edx, DWORD PTR _other$[ebp]
	mov	DWORD PTR [eax+ecx*4+4], edx
; Line 141
	jmp	SHORT $LN3@TreeRotate
$LN2@TreeRotate:
; Line 142
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	cmp	DWORD PTR _direction$[ebp], 0
	sete	dl
	mov	eax, DWORD PTR _other$[ebp]
	mov	DWORD PTR [ecx+edx*4+4], eax
$LN3@TreeRotate:
; Line 143
	mov	ecx, DWORD PTR _direction$[ebp]
	mov	edx, DWORD PTR _other$[ebp]
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	DWORD PTR [edx+ecx*4+4], eax
; Line 144
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR _other$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 145
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeRotate ENDP
_TEXT	ENDS
PUBLIC	_TreeBAASub
; Function compile flags: /Odtp
_TEXT	SEGMENT
_uncle$ = -4						; size = 4
_aTree$ = 8						; size = 4
_curnode$ = 12						; size = 4
_which$ = 16						; size = 4
_index$ = 20						; size = 4
_TreeBAASub PROC
; Line 149
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 150
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _which$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4+4]
	mov	DWORD PTR _uncle$[ebp], ecx
; Line 152
	mov	edx, DWORD PTR _uncle$[ebp]
	push	edx
	call	_isRed
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@TreeBAASub
; Line 154
	mov	eax, DWORD PTR _uncle$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _uncle$[ebp]
	mov	DWORD PTR [edx+20], ecx
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], edx
; Line 155
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curnode$[ebp], ecx
; Line 156
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	or	eax, 1
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 158
	jmp	SHORT $LN2@TreeBAASub
$LN3@TreeBAASub:
; Line 160
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _which$[ebp]
	mov	edx, DWORD PTR _curnode$[ebp]
	cmp	edx, DWORD PTR [eax+ecx*4+4]
	jne	SHORT $LN1@TreeBAASub
; Line 162
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curnode$[ebp], ecx
; Line 163
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	xor	eax, eax
	cmp	DWORD PTR _which$[ebp], 0
	sete	al
	push	eax
	mov	ecx, DWORD PTR _curnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeRotate
	add	esp, 16					; 00000010H
$LN1@TreeBAASub:
; Line 165
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], edx
; Line 166
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	or	edx, 1
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [eax+20], edx
; Line 167
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _which$[ebp]
	push	edx
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _aTree$[ebp]
	push	eax
	call	_TreeRotate
	add	esp, 16					; 00000010H
$LN2@TreeBAASub:
; Line 169
	mov	eax, DWORD PTR _curnode$[ebp]
; Line 170
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeBAASub ENDP
_TEXT	ENDS
PUBLIC	_TreeBalanceAfterAdd
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aTree$ = 8						; size = 4
_curnode$ = 12						; size = 4
_index$ = 16						; size = 4
_TreeBalanceAfterAdd PROC
; Line 174
	push	ebp
	mov	ebp, esp
$LN4@TreeBalanc:
; Line 175
	cmp	DWORD PTR _curnode$[ebp], 0
	je	SHORT $LN3@TreeBalanc
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_isRed
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@TreeBalanc
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@TreeBalanc
; Line 177
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax+4]
	jne	SHORT $LN2@TreeBalanc
; Line 178
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _curnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeBAASub
	add	esp, 16					; 00000010H
	mov	DWORD PTR _curnode$[ebp], eax
; Line 179
	jmp	SHORT $LN1@TreeBalanc
$LN2@TreeBalanc:
; Line 180
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _curnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeBAASub
	add	esp, 16					; 00000010H
	mov	DWORD PTR _curnode$[ebp], eax
$LN1@TreeBalanc:
; Line 181
	jmp	SHORT $LN4@TreeBalanc
$LN3@TreeBalanc:
; Line 182
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	eax, DWORD PTR [edx+20]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _aTree$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR [ecx+20], eax
; Line 183
	pop	ebp
	ret	0
_TreeBalanceAfterAdd ENDP
_TEXT	ENDS
PUBLIC	_TreeAddByIndex
EXTRN	__imp__malloc:PROC
EXTRN	__imp__exit:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv135 = -28						; size = 4
_result$ = -24						; size = 4
_newel$ = -20						; size = 4
_left$ = -16						; size = 4
_curparent$ = -12					; size = 4
_curnode$ = -8						; size = 4
_rc$ = -4						; size = 4
_aTree$ = 8						; size = 4
_content$ = 12						; size = 4
_size$ = 16						; size = 4
_index$ = 20						; size = 4
_TreeAddByIndex PROC
; Line 193
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
; Line 194
	mov	DWORD PTR _curparent$[ebp], 0
; Line 195
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _curnode$[ebp], edx
; Line 196
	mov	DWORD PTR _newel$[ebp], 0
; Line 197
	mov	DWORD PTR _left$[ebp], 0
; Line 198
	mov	DWORD PTR _result$[ebp], 1
; Line 199
	mov	DWORD PTR _rc$[ebp], 0
$LN11@TreeAddByI:
; Line 201
	cmp	DWORD PTR _curnode$[ebp], 0
	je	SHORT $LN10@TreeAddByI
; Line 203
	push	1
	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8+4]
	call	edx
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
; Line 204
	xor	eax, eax
	cmp	DWORD PTR _result$[ebp], 0
	setg	al
	mov	DWORD PTR _left$[ebp], eax
; Line 205
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN9@TreeAddByI
; Line 206
	jmp	SHORT $LN10@TreeAddByI
; Line 207
	jmp	SHORT $LN8@TreeAddByI
$LN9@TreeAddByI:
; Line 209
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	DWORD PTR _curparent$[ebp], ecx
; Line 210
	mov	edx, DWORD PTR _left$[ebp]
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR _curnode$[ebp], ecx
$LN8@TreeAddByI:
; Line 212
	jmp	SHORT $LN11@TreeAddByI
$LN10@TreeAddByI:
; Line 214
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN7@TreeAddByI
; Line 216
	mov	edx, DWORD PTR _aTree$[ebp]
	mov	eax, DWORD PTR [edx+28]
	shr	eax, 1
	and	eax, 1
	je	SHORT $LN6@TreeAddByI
; Line 217
	push	-99					; ffffff9dH
	call	DWORD PTR __imp__exit
$LN6@TreeAddByI:
; Line 219
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	DWORD PTR _newel$[ebp], ecx
; Line 220
	mov	edx, DWORD PTR _newel$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _rc$[ebp], eax
; Line 221
	cmp	DWORD PTR _index$[ebp], 0
	jne	SHORT $LN5@TreeAddByI
; Line 222
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _aTree$[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	DWORD PTR [ecx+24], edx
$LN5@TreeAddByI:
; Line 225
	jmp	$LN4@TreeAddByI
$LN7@TreeAddByI:
; Line 230
	mov	edx, DWORD PTR _aTree$[ebp]
	mov	eax, DWORD PTR [edx+28]
	and	eax, 1
	je	SHORT $LN14@TreeAddByI
	push	24					; 00000018H
	push	230					; 000000e6H
	push	OFFSET $SG5111
	call	_mymalloc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN15@TreeAddByI
$LN14@TreeAddByI:
	push	24					; 00000018H
	call	DWORD PTR __imp__malloc
	add	esp, 4
	mov	DWORD PTR tv135[ebp], eax
$LN15@TreeAddByI:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _newel$[ebp], ecx
; Line 232
	push	24					; 00000018H
	push	0
	mov	edx, DWORD PTR _newel$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 233
	cmp	DWORD PTR _curparent$[ebp], 0
	je	SHORT $LN3@TreeAddByI
; Line 234
	mov	eax, DWORD PTR _left$[ebp]
	mov	ecx, DWORD PTR _curparent$[ebp]
	mov	edx, DWORD PTR _newel$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], edx
; Line 235
	jmp	SHORT $LN2@TreeAddByI
$LN3@TreeAddByI:
; Line 236
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR _newel$[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
$LN2@TreeAddByI:
; Line 237
	mov	eax, DWORD PTR _newel$[ebp]
	mov	ecx, DWORD PTR _curparent$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 238
	mov	edx, DWORD PTR _newel$[ebp]
	mov	eax, DWORD PTR [edx+20]
	or	eax, 1
	mov	ecx, DWORD PTR _newel$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 239
	cmp	DWORD PTR _index$[ebp], 0
	jne	SHORT $LN4@TreeAddByI
; Line 241
	mov	edx, DWORD PTR _aTree$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 1
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 242
	mov	edx, DWORD PTR _aTree$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN4@TreeAddByI:
; Line 245
	mov	edx, DWORD PTR _newel$[ebp]
	mov	eax, DWORD PTR _content$[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 246
	mov	ecx, DWORD PTR _newel$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+16], edx
; Line 247
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _newel$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeBalanceAfterAdd
	add	esp, 12					; 0000000cH
; Line 248
	mov	eax, DWORD PTR _rc$[ebp]
$LN13@TreeAddByI:
; Line 249
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeAddByIndex ENDP
_TEXT	ENDS
PUBLIC	_TreeAdd
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_rc$ = -4						; size = 4
_aTree$ = 8						; size = 4
_content$ = 12						; size = 4
_size$ = 16						; size = 4
_TreeAdd PROC
; Line 253
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 254
	mov	DWORD PTR _rc$[ebp], 0
; Line 257
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@TreeAdd
$LN2@TreeAdd:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@TreeAdd:
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN1@TreeAdd
; Line 258
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _content$[ebp]
	push	edx
	mov	eax, DWORD PTR _aTree$[ebp]
	push	eax
	call	_TreeAddByIndex
	add	esp, 16					; 00000010H
	mov	DWORD PTR _rc$[ebp], eax
	jmp	SHORT $LN2@TreeAdd
$LN1@TreeAdd:
; Line 260
	mov	eax, DWORD PTR _rc$[ebp]
; Line 261
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeAdd ENDP
_TEXT	ENDS
PUBLIC	_TreeFindIndex1
; Function compile flags: /Odtp
_TEXT	SEGMENT
_result$ = -8						; size = 4
_curnode$ = -4						; size = 4
_aTree$ = 8						; size = 4
_key$ = 12						; size = 4
_index$ = 16						; size = 4
_value$ = 20						; size = 4
_TreeFindIndex1 PROC
; Line 265
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 266
	mov	DWORD PTR _result$[ebp], 0
; Line 267
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _curnode$[ebp], edx
$LN4@TreeFindIn:
; Line 269
	cmp	DWORD PTR _curnode$[ebp], 0
	je	SHORT $LN3@TreeFindIn
; Line 271
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _aTree$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8+4]
	call	eax
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _result$[ebp], eax
; Line 272
	cmp	DWORD PTR _result$[ebp], 0
	jne	SHORT $LN2@TreeFindIn
; Line 273
	jmp	SHORT $LN3@TreeFindIn
; Line 274
	jmp	SHORT $LN1@TreeFindIn
$LN2@TreeFindIn:
; Line 275
	xor	ecx, ecx
	cmp	DWORD PTR _result$[ebp], 0
	setg	cl
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _curnode$[ebp], eax
$LN1@TreeFindIn:
; Line 276
	jmp	SHORT $LN4@TreeFindIn
$LN3@TreeFindIn:
; Line 277
	mov	eax, DWORD PTR _curnode$[ebp]
; Line 278
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeFindIndex1 ENDP
_TEXT	ENDS
PUBLIC	_TreeFindIndex
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aTree$ = 8						; size = 4
_key$ = 12						; size = 4
_index$ = 16						; size = 4
_TreeFindIndex PROC
; Line 282
	push	ebp
	mov	ebp, esp
; Line 283
	push	0
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeFindIndex1
	add	esp, 16					; 00000010H
; Line 284
	pop	ebp
	ret	0
_TreeFindIndex ENDP
_TEXT	ENDS
PUBLIC	_TreeFindContentIndex
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aTree$ = 8						; size = 4
_key$ = 12						; size = 4
_index$ = 16						; size = 4
_TreeFindContentIndex PROC
; Line 288
	push	ebp
	mov	ebp, esp
; Line 289
	push	1
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeFindIndex1
	add	esp, 16					; 00000010H
; Line 290
	pop	ebp
	ret	0
_TreeFindContentIndex ENDP
_TEXT	ENDS
PUBLIC	_TreeFind
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aTree$ = 8						; size = 4
_key$ = 12						; size = 4
_TreeFind PROC
; Line 294
	push	ebp
	mov	ebp, esp
; Line 295
	push	0
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aTree$[ebp]
	push	ecx
	call	_TreeFindIndex
	add	esp, 12					; 0000000cH
; Line 296
	pop	ebp
	ret	0
_TreeFind ENDP
_TEXT	ENDS
PUBLIC	_TreeMinimum
; Function compile flags: /Odtp
_TEXT	SEGMENT
_curnode$ = 8						; size = 4
_TreeMinimum PROC
; Line 300
	push	ebp
	mov	ebp, esp
; Line 301
	cmp	DWORD PTR _curnode$[ebp], 0
	je	SHORT $LN3@TreeMinimu
$LN2@TreeMinimu:
; Line 302
	mov	eax, DWORD PTR _curnode$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@TreeMinimu
; Line 303
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _curnode$[ebp], edx
	jmp	SHORT $LN2@TreeMinimu
$LN3@TreeMinimu:
; Line 304
	mov	eax, DWORD PTR _curnode$[ebp]
; Line 305
	pop	ebp
	ret	0
_TreeMinimum ENDP
_TEXT	ENDS
PUBLIC	_TreeSuccessor
; Function compile flags: /Odtp
_TEXT	SEGMENT
_curparent$5180 = -4					; size = 4
_curnode$ = 8						; size = 4
_TreeSuccessor PROC
; Line 309
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 310
	mov	eax, DWORD PTR _curnode$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@TreeSucces
; Line 311
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_TreeMinimum
	add	esp, 4
	mov	DWORD PTR _curnode$[ebp], eax
; Line 312
	jmp	SHORT $LN3@TreeSucces
$LN4@TreeSucces:
; Line 314
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curparent$5180[ebp], ecx
$LN2@TreeSucces:
; Line 315
	cmp	DWORD PTR _curparent$5180[ebp], 0
	je	SHORT $LN1@TreeSucces
	mov	edx, DWORD PTR _curparent$5180[ebp]
	mov	eax, DWORD PTR _curnode$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jne	SHORT $LN1@TreeSucces
; Line 317
	mov	ecx, DWORD PTR _curparent$5180[ebp]
	mov	DWORD PTR _curnode$[ebp], ecx
; Line 318
	mov	edx, DWORD PTR _curparent$5180[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _curparent$5180[ebp], eax
; Line 319
	jmp	SHORT $LN2@TreeSucces
$LN1@TreeSucces:
; Line 320
	mov	ecx, DWORD PTR _curparent$5180[ebp]
	mov	DWORD PTR _curnode$[ebp], ecx
$LN3@TreeSucces:
; Line 322
	mov	eax, DWORD PTR _curnode$[ebp]
; Line 323
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeSuccessor ENDP
_TEXT	ENDS
PUBLIC	_TreeNextElementIndex
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aTree$ = 8						; size = 4
_curnode$ = 12						; size = 4
_index$ = 16						; size = 4
_TreeNextElementIndex PROC
; Line 327
	push	ebp
	mov	ebp, esp
; Line 328
	cmp	DWORD PTR _curnode$[ebp], 0
	jne	SHORT $LN2@TreeNextEl
; Line 329
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	push	edx
	call	_TreeMinimum
	add	esp, 4
	mov	DWORD PTR _curnode$[ebp], eax
; Line 330
	jmp	SHORT $LN1@TreeNextEl
$LN2@TreeNextEl:
; Line 331
	mov	eax, DWORD PTR _curnode$[ebp]
	push	eax
	call	_TreeSuccessor
	add	esp, 4
	mov	DWORD PTR _curnode$[ebp], eax
$LN1@TreeNextEl:
; Line 332
	mov	eax, DWORD PTR _curnode$[ebp]
; Line 333
	pop	ebp
	ret	0
_TreeNextElementIndex ENDP
_TEXT	ENDS
PUBLIC	_TreeNextElement
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aTree$ = 8						; size = 4
_curnode$ = 12						; size = 4
_TreeNextElement PROC
; Line 337
	push	ebp
	mov	ebp, esp
; Line 338
	push	0
	mov	eax, DWORD PTR _curnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aTree$[ebp]
	push	ecx
	call	_TreeNextElementIndex
	add	esp, 12					; 0000000cH
; Line 339
	pop	ebp
	ret	0
_TreeNextElement ENDP
_TEXT	ENDS
PUBLIC	_TreeBARSub
; Function compile flags: /Odtp
_TEXT	SEGMENT
_sibling$ = -4						; size = 4
_aTree$ = 8						; size = 4
_curnode$ = 12						; size = 4
_which$ = 16						; size = 4
_index$ = 20						; size = 4
_TreeBARSub PROC
; Line 343
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 344
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _which$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+4]
	mov	DWORD PTR _sibling$[ebp], eax
; Line 346
	mov	ecx, DWORD PTR _sibling$[ebp]
	push	ecx
	call	_isRed
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@TreeBARSub
; Line 348
	mov	edx, DWORD PTR _sibling$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _sibling$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 349
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	or	ecx, 1
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+20], ecx
; Line 350
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	xor	edx, edx
	cmp	DWORD PTR _which$[ebp], 0
	sete	dl
	push	edx
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeRotate
	add	esp, 16					; 00000010H
; Line 351
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _which$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4+4]
	mov	DWORD PTR _sibling$[ebp], eax
$LN6@TreeBARSub:
; Line 353
	cmp	DWORD PTR _sibling$[ebp], 0
	jne	SHORT $LN5@TreeBARSub
; Line 354
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _curnode$[ebp], edx
	jmp	$LN4@TreeBARSub
$LN5@TreeBARSub:
; Line 355
	xor	eax, eax
	cmp	DWORD PTR _which$[ebp], 0
	sete	al
	mov	ecx, DWORD PTR _sibling$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	call	_isBlack
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@TreeBARSub
	mov	eax, DWORD PTR _which$[ebp]
	mov	ecx, DWORD PTR _sibling$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	call	_isBlack
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@TreeBARSub
; Line 357
	mov	eax, DWORD PTR _sibling$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	or	ecx, 1
	mov	edx, DWORD PTR _sibling$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 358
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curnode$[ebp], ecx
; Line 360
	jmp	$LN4@TreeBARSub
$LN3@TreeBARSub:
; Line 362
	mov	edx, DWORD PTR _which$[ebp]
	mov	eax, DWORD PTR _sibling$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	push	ecx
	call	_isBlack
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@TreeBARSub
; Line 364
	xor	edx, edx
	cmp	DWORD PTR _which$[ebp], 0
	sete	dl
	mov	eax, DWORD PTR _sibling$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, -2					; fffffffeH
	xor	eax, eax
	cmp	DWORD PTR _which$[ebp], 0
	sete	al
	mov	ecx, DWORD PTR _sibling$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR [eax+20], edx
; Line 365
	mov	ecx, DWORD PTR _sibling$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	or	edx, 1
	mov	eax, DWORD PTR _sibling$[ebp]
	mov	DWORD PTR [eax+20], edx
; Line 366
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _which$[ebp]
	push	edx
	mov	eax, DWORD PTR _sibling$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aTree$[ebp]
	push	ecx
	call	_TreeRotate
	add	esp, 16					; 00000010H
; Line 367
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _which$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+4]
	mov	DWORD PTR _sibling$[ebp], edx
$LN1@TreeBARSub:
; Line 369
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, 1
	and	edx, 1
	mov	eax, DWORD PTR _sibling$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, -2					; fffffffeH
	or	ecx, edx
	mov	edx, DWORD PTR _sibling$[ebp]
	mov	DWORD PTR [edx+20], ecx
; Line 370
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+20], edx
; Line 371
	mov	edx, DWORD PTR _which$[ebp]
	mov	eax, DWORD PTR _sibling$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	edx, DWORD PTR [ecx+20]
	and	edx, -2					; fffffffeH
	mov	eax, DWORD PTR _which$[ebp]
	mov	ecx, DWORD PTR _sibling$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR [eax+20], edx
; Line 372
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	xor	edx, edx
	cmp	DWORD PTR _which$[ebp], 0
	sete	dl
	push	edx
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeRotate
	add	esp, 16					; 00000010H
; Line 373
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _curnode$[ebp], edx
$LN4@TreeBARSub:
; Line 375
	mov	eax, DWORD PTR _curnode$[ebp]
; Line 376
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeBARSub ENDP
_TEXT	ENDS
PUBLIC	_TreeBalanceAfterRemove
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aTree$ = 8						; size = 4
_curnode$ = 12						; size = 4
_index$ = 16						; size = 4
_TreeBalanceAfterRemove PROC
; Line 380
	push	ebp
	mov	ebp, esp
$LN4@TreeBalanc@2:
; Line 381
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR _curnode$[ebp]
	cmp	edx, DWORD PTR [ecx+eax*8]
	je	SHORT $LN3@TreeBalanc@2
	mov	eax, DWORD PTR _curnode$[ebp]
	push	eax
	call	_isBlack
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@TreeBalanc@2
; Line 384
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	neg	edx
	sbb	edx, edx
	and	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN2@TreeBalanc@2
; Line 385
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _curnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aTree$[ebp]
	push	ecx
	call	_TreeBARSub
	add	esp, 16					; 00000010H
	mov	DWORD PTR _curnode$[ebp], eax
; Line 386
	jmp	SHORT $LN1@TreeBalanc@2
$LN2@TreeBalanc@2:
; Line 387
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _curnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aTree$[ebp]
	push	ecx
	call	_TreeBARSub
	add	esp, 16					; 00000010H
	mov	DWORD PTR _curnode$[ebp], eax
$LN1@TreeBalanc@2:
; Line 388
	jmp	SHORT $LN4@TreeBalanc@2
$LN3@TreeBalanc@2:
; Line 389
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR [edx+20]
	and	eax, -2					; fffffffeH
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 390
	pop	ebp
	ret	0
_TreeBalanceAfterRemove ENDP
_TEXT	ENDS
PUBLIC	_TreeRemoveNodeIndex
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv153 = -48						; size = 4
tv138 = -44						; size = 4
_temp$5256 = -40					; size = 24
_content$ = -16						; size = 4
_curchild$ = -12					; size = 4
_redundant$ = -8					; size = 4
_size$ = -4						; size = 4
_aTree$ = 8						; size = 4
_curnode$ = 12						; size = 4
_index$ = 16						; size = 4
_TreeRemoveNodeIndex PROC
; Line 399
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
; Line 400
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	DWORD PTR _redundant$[ebp], eax
; Line 401
	mov	DWORD PTR _curchild$[ebp], 0
; Line 402
	mov	ecx, DWORD PTR _curnode$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _size$[ebp], edx
; Line 403
	mov	eax, DWORD PTR _curnode$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _content$[ebp], ecx
; Line 406
	mov	edx, DWORD PTR _curnode$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN12@TreeRemove
	mov	eax, DWORD PTR _curnode$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN12@TreeRemove
; Line 407
	mov	ecx, DWORD PTR _curnode$[ebp]
	push	ecx
	call	_TreeSuccessor
	add	esp, 4
	mov	DWORD PTR _redundant$[ebp], eax
$LN12@TreeRemove:
; Line 409
	mov	edx, DWORD PTR _redundant$[ebp]
	xor	eax, eax
	cmp	DWORD PTR [edx+4], 0
	sete	al
	mov	ecx, DWORD PTR _redundant$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR _curchild$[ebp], edx
; Line 410
	cmp	DWORD PTR _curchild$[ebp], 0
	je	SHORT $LN11@TreeRemove
; Line 411
	mov	eax, DWORD PTR _curchild$[ebp]
	mov	ecx, DWORD PTR _redundant$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN11@TreeRemove:
; Line 413
	mov	eax, DWORD PTR _redundant$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@TreeRemove
; Line 414
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _aTree$[ebp]
	mov	eax, DWORD PTR _curchild$[ebp]
	mov	DWORD PTR [edx+ecx*8], eax
; Line 415
	jmp	SHORT $LN9@TreeRemove
$LN10@TreeRemove:
; Line 417
	mov	ecx, DWORD PTR _redundant$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _redundant$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN8@TreeRemove
; Line 418
	mov	ecx, DWORD PTR _redundant$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _curchild$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 419
	jmp	SHORT $LN9@TreeRemove
$LN8@TreeRemove:
; Line 420
	mov	ecx, DWORD PTR _redundant$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _curchild$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN9@TreeRemove:
; Line 423
	mov	ecx, DWORD PTR _redundant$[ebp]
	cmp	ecx, DWORD PTR _curnode$[ebp]
	je	SHORT $LN6@TreeRemove
; Line 425
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR _redundant$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
; Line 426
	mov	edx, DWORD PTR _curnode$[ebp]
	mov	eax, DWORD PTR _redundant$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
$LN6@TreeRemove:
; Line 429
	mov	edx, DWORD PTR _redundant$[ebp]
	push	edx
	call	_isBlack
	add	esp, 4
	test	eax, eax
	je	SHORT $LN5@TreeRemove
; Line 431
	cmp	DWORD PTR _curchild$[ebp], 0
	jne	SHORT $LN4@TreeRemove
; Line 433
	mov	eax, DWORD PTR _redundant$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@TreeRemove
; Line 436
	push	24					; 00000018H
	push	0
	lea	ecx, DWORD PTR _temp$5256[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 437
	cmp	DWORD PTR _redundant$[ebp], 0
	je	SHORT $LN15@TreeRemove
	mov	edx, DWORD PTR _redundant$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN16@TreeRemove
$LN15@TreeRemove:
	mov	DWORD PTR tv138[ebp], 0
$LN16@TreeRemove:
	mov	ecx, DWORD PTR tv138[ebp]
	mov	DWORD PTR _temp$5256[ebp], ecx
; Line 438
	mov	edx, DWORD PTR _temp$5256[ebp+20]
	and	edx, -2					; fffffffeH
	mov	DWORD PTR _temp$5256[ebp+20], edx
; Line 439
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	lea	ecx, DWORD PTR _temp$5256[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeBalanceAfterRemove
	add	esp, 12					; 0000000cH
$LN3@TreeRemove:
; Line 442
	jmp	SHORT $LN5@TreeRemove
$LN4@TreeRemove:
; Line 443
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curchild$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeBalanceAfterRemove
	add	esp, 12					; 0000000cH
$LN5@TreeRemove:
; Line 449
	mov	eax, DWORD PTR _aTree$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 1
	je	SHORT $LN17@TreeRemove
	mov	edx, DWORD PTR _redundant$[ebp]
	push	edx
	push	449					; 000001c1H
	push	OFFSET $SG5260
	call	_myfree
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv153[ebp], 0
	jmp	SHORT $LN18@TreeRemove
$LN17@TreeRemove:
	mov	eax, DWORD PTR _redundant$[ebp]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	mov	DWORD PTR tv153[ebp], 0
$LN18@TreeRemove:
; Line 451
	cmp	DWORD PTR _index$[ebp], 0
	jne	SHORT $LN1@TreeRemove
; Line 453
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	sub	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _aTree$[ebp]
	mov	DWORD PTR [eax+24], edx
; Line 454
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	sub	edx, 1
	mov	eax, DWORD PTR _aTree$[ebp]
	mov	DWORD PTR [eax+20], edx
$LN1@TreeRemove:
; Line 456
	mov	eax, DWORD PTR _content$[ebp]
; Line 457
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeRemoveNodeIndex ENDP
_TEXT	ENDS
PUBLIC	_TreeRemoveIndex
; Function compile flags: /Odtp
_TEXT	SEGMENT
_curnode$ = -4						; size = 4
_aTree$ = 8						; size = 4
_content$ = 12						; size = 4
_index$ = 16						; size = 4
_TreeRemoveIndex PROC
; Line 466
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 467
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _content$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeFindContentIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _curnode$[ebp], eax
; Line 469
	cmp	DWORD PTR _curnode$[ebp], 0
	jne	SHORT $LN1@TreeRemove@2
; Line 470
	xor	eax, eax
	jmp	SHORT $LN2@TreeRemove@2
$LN1@TreeRemove@2:
; Line 472
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeRemoveNodeIndex
	add	esp, 12					; 0000000cH
$LN2@TreeRemove@2:
; Line 473
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeRemoveIndex ENDP
_TEXT	ENDS
PUBLIC	_TreeRemove
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_rc$ = -4						; size = 4
_aTree$ = 8						; size = 4
_content$ = 12						; size = 4
_TreeRemove PROC
; Line 477
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 479
	mov	DWORD PTR _rc$[ebp], 0
; Line 481
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@TreeRemove@3
$LN2@TreeRemove@3:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@TreeRemove@3:
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN1@TreeRemove@3
; Line 482
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _content$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeRemoveIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _rc$[ebp], eax
	jmp	SHORT $LN2@TreeRemove@3
$LN1@TreeRemove@3:
; Line 484
	mov	eax, DWORD PTR _rc$[ebp]
; Line 485
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeRemove ENDP
_TEXT	ENDS
PUBLIC	_TreeRemoveKeyIndex
; Function compile flags: /Odtp
_TEXT	SEGMENT
_content$ = -12						; size = 4
_curnode$ = -8						; size = 4
_i$ = -4						; size = 4
_aTree$ = 8						; size = 4
_key$ = 12						; size = 4
_index$ = 16						; size = 4
_TreeRemoveKeyIndex PROC
; Line 489
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 490
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeFindIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _curnode$[ebp], eax
; Line 491
	mov	DWORD PTR _content$[ebp], 0
; Line 494
	cmp	DWORD PTR _curnode$[ebp], 0
	jne	SHORT $LN5@TreeRemove@4
; Line 495
	xor	eax, eax
	jmp	SHORT $LN6@TreeRemove@4
$LN5@TreeRemove@4:
; Line 497
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _aTree$[ebp]
	push	edx
	call	_TreeRemoveNodeIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _content$[ebp], eax
; Line 498
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@TreeRemove@4
$LN3@TreeRemove@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@TreeRemove@4:
	mov	ecx, DWORD PTR _aTree$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jge	SHORT $LN2@TreeRemove@4
; Line 500
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _index$[ebp]
	je	SHORT $LN1@TreeRemove@4
; Line 501
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _content$[ebp]
	push	edx
	mov	eax, DWORD PTR _aTree$[ebp]
	push	eax
	call	_TreeRemoveIndex
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _content$[ebp], eax
$LN1@TreeRemove@4:
; Line 502
	jmp	SHORT $LN3@TreeRemove@4
$LN2@TreeRemove@4:
; Line 503
	mov	eax, DWORD PTR _content$[ebp]
$LN6@TreeRemove@4:
; Line 504
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeRemoveKeyIndex ENDP
_TEXT	ENDS
PUBLIC	_TreeRemoveKey
; Function compile flags: /Odtp
_TEXT	SEGMENT
_aTree$ = 8						; size = 4
_key$ = 12						; size = 4
_TreeRemoveKey PROC
; Line 508
	push	ebp
	mov	ebp, esp
; Line 509
	push	0
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aTree$[ebp]
	push	ecx
	call	_TreeRemoveKeyIndex
	add	esp, 12					; 0000000cH
; Line 510
	pop	ebp
	ret	0
_TreeRemoveKey ENDP
_TEXT	ENDS
PUBLIC	_TreeIntCompare
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_content$ = 16						; size = 4
_TreeIntCompare PROC
; Line 514
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 515
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp], ecx
; Line 516
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _j$[ebp], eax
; Line 519
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _j$[ebp]
	jle	SHORT $LN3@TreeIntCom
	mov	DWORD PTR tv67[ebp], -1
	jmp	SHORT $LN4@TreeIntCom
$LN3@TreeIntCom:
	mov	edx, DWORD PTR _i$[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR _j$[ebp]
	setne	al
	mov	DWORD PTR tv67[ebp], eax
$LN4@TreeIntCom:
	mov	eax, DWORD PTR tv67[ebp]
; Line 520
	mov	esp, ebp
	pop	ebp
	ret	0
_TreeIntCompare ENDP
_TEXT	ENDS
PUBLIC	_TreePtrCompare
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_content$ = 16						; size = 4
_TreePtrCompare PROC
; Line 524
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 525
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jbe	SHORT $LN3@TreePtrCom
	mov	DWORD PTR tv67[ebp], -1
	jmp	SHORT $LN4@TreePtrCom
$LN3@TreePtrCom:
	mov	ecx, DWORD PTR _a$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR _b$[ebp]
	setne	dl
	mov	DWORD PTR tv67[ebp], edx
$LN4@TreePtrCom:
	mov	eax, DWORD PTR tv67[ebp]
; Line 526
	mov	esp, ebp
	pop	ebp
	ret	0
_TreePtrCompare ENDP
_TEXT	ENDS
PUBLIC	_TreeStringCompare
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_content$ = 16						; size = 4
_TreeStringCompare PROC
; Line 530
	push	ebp
	mov	ebp, esp
; Line 531
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	_strcmp
	add	esp, 8
; Line 532
	pop	ebp
	ret	0
_TreeStringCompare ENDP
_TEXT	ENDS
END
